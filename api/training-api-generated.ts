/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TrainingAddCategoryRequest } from '../models';
// @ts-ignore
import { TrainingAddEmployeeTrainingRecordRequest } from '../models';
// @ts-ignore
import { TrainingAddEmployeeTrainingRecordRequestCost } from '../models';
// @ts-ignore
import { TrainingCategory } from '../models';
// @ts-ignore
import { TrainingCategoryListResponseInner } from '../models';
// @ts-ignore
import { TrainingGetTypesResponseInner } from '../models';
// @ts-ignore
import { TrainingListEmployeeTrainingsResponseInner } from '../models';
// @ts-ignore
import { TrainingRecord } from '../models';
// @ts-ignore
import { TrainingType } from '../models';
// @ts-ignore
import { TrainingTypeAdditionRequest } from '../models';
// @ts-ignore
import { TrainingTypeAdditionRequestCategory } from '../models';
// @ts-ignore
import { TrainingUpdateCategoryRequest } from '../models';
// @ts-ignore
import { TrainingUpdateEmployeeTrainingRecordRequest } from '../models';
// @ts-ignore
import { TrainingUpdateTypeRequest } from '../models';
// @ts-ignore
import { TrainingUpdateTypeRequestCategory } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrainingApi - axios parameter creator
 * @export
 */
export const TrainingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a training category. The owner of the API key used must have access to training settings.
         * @summary Add Training Category
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TrainingAddCategoryRequest} trainingAddCategoryRequest Training category to post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (companyDomain: string, trainingAddCategoryRequest: TrainingAddCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addCategory', 'companyDomain', companyDomain)
            // verify required parameter 'trainingAddCategoryRequest' is not null or undefined
            assertParamExists('addCategory', 'trainingAddCategoryRequest', trainingAddCategoryRequest)
            const localVarPath = `/{companyDomain}/v1/training/category`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingAddCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/category',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingAddCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.
         * @summary Add New Employee Training Record
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeId The ID of the employee to add a training record to.
         * @param {TrainingAddEmployeeTrainingRecordRequest} trainingAddEmployeeTrainingRecordRequest Training object to post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeTrainingRecord: async (companyDomain: string, employeeId: number, trainingAddEmployeeTrainingRecordRequest: TrainingAddEmployeeTrainingRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeeTrainingRecord', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addEmployeeTrainingRecord', 'employeeId', employeeId)
            // verify required parameter 'trainingAddEmployeeTrainingRecordRequest' is not null or undefined
            assertParamExists('addEmployeeTrainingRecord', 'trainingAddEmployeeTrainingRecordRequest', trainingAddEmployeeTrainingRecordRequest)
            const localVarPath = `/{companyDomain}/v1/training/record/employee/{employeeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingAddEmployeeTrainingRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/record/employee/{employeeId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingAddEmployeeTrainingRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of training categories. The owner of the API key used must have access to training settings.
         * @summary List Training Categories
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryList: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('categoryList', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/training/category`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/category',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing training category. The owner of the API key used must have access to training settings.
         * @summary Delete Training Category
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} trainingCategoryId The ID of the training category to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (companyDomain: string, trainingCategoryId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteCategory', 'companyDomain', companyDomain)
            // verify required parameter 'trainingCategoryId' is not null or undefined
            assertParamExists('deleteCategory', 'trainingCategoryId', trainingCategoryId)
            const localVarPath = `/{companyDomain}/v1/training/category/{trainingCategoryId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"trainingCategoryId"}}`, encodeURIComponent(String(trainingCategoryId !== undefined ? trainingCategoryId : `-trainingCategoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/category/{trainingCategoryId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.
         * @summary Delete Employee Training Record
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeTrainingRecordId The ID of the training record to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeRecord: async (companyDomain: string, employeeTrainingRecordId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteEmployeeRecord', 'companyDomain', companyDomain)
            // verify required parameter 'employeeTrainingRecordId' is not null or undefined
            assertParamExists('deleteEmployeeRecord', 'employeeTrainingRecordId', employeeTrainingRecordId)
            const localVarPath = `/{companyDomain}/v1/training/record/{employeeTrainingRecordId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeTrainingRecordId"}}`, encodeURIComponent(String(employeeTrainingRecordId !== undefined ? employeeTrainingRecordId : `-employeeTrainingRecordId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of training types. The owner of the API key used must have access to training settings.
         * @summary List Training Types
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypes: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getTypes', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/training/type`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/type',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.
         * @summary List Employee Trainings
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeId The ID of the employee to get a list of trainings for.
         * @param {number} [trainingTypeId] The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTrainings: async (companyDomain: string, employeeId: number, trainingTypeId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeTrainings', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeeTrainings', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/training/record/employee/{employeeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (trainingTypeId !== undefined) {
                localVarQueryParameter['trainingTypeId'] = trainingTypeId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/record/employee/{employeeId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.
         * @summary Delete Training Type
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} trainingTypeId The ID of the training type to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeType: async (companyDomain: string, trainingTypeId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('removeType', 'companyDomain', companyDomain)
            // verify required parameter 'trainingTypeId' is not null or undefined
            assertParamExists('removeType', 'trainingTypeId', trainingTypeId)
            const localVarPath = `/{companyDomain}/v1/training/type/{trainingTypeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"trainingTypeId"}}`, encodeURIComponent(String(trainingTypeId !== undefined ? trainingTypeId : `-trainingTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/type/{trainingTypeId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a training type. The owner of the API key used must have access to training settings.
         * @summary Add Training Type
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TrainingTypeAdditionRequest} trainingTypeAdditionRequest Training object to post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeAddition: async (companyDomain: string, trainingTypeAdditionRequest: TrainingTypeAdditionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('typeAddition', 'companyDomain', companyDomain)
            // verify required parameter 'trainingTypeAdditionRequest' is not null or undefined
            assertParamExists('typeAddition', 'trainingTypeAdditionRequest', trainingTypeAdditionRequest)
            const localVarPath = `/{companyDomain}/v1/training/type`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingTypeAdditionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/type',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingTypeAdditionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing training category. The owner of the API key used must have access to training settings.
         * @summary Update Training Category
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} trainingCategoryId The ID of the training category to update.
         * @param {TrainingUpdateCategoryRequest} trainingUpdateCategoryRequest Training category to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (companyDomain: string, trainingCategoryId: number, trainingUpdateCategoryRequest: TrainingUpdateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateCategory', 'companyDomain', companyDomain)
            // verify required parameter 'trainingCategoryId' is not null or undefined
            assertParamExists('updateCategory', 'trainingCategoryId', trainingCategoryId)
            // verify required parameter 'trainingUpdateCategoryRequest' is not null or undefined
            assertParamExists('updateCategory', 'trainingUpdateCategoryRequest', trainingUpdateCategoryRequest)
            const localVarPath = `/{companyDomain}/v1/training/category/{trainingCategoryId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"trainingCategoryId"}}`, encodeURIComponent(String(trainingCategoryId !== undefined ? trainingCategoryId : `-trainingCategoryId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingUpdateCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/category/{trainingCategoryId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingUpdateCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee
         * @summary Update Employee Training Record
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeTrainingRecordId The ID of the training record to update.
         * @param {TrainingUpdateEmployeeTrainingRecordRequest} trainingUpdateEmployeeTrainingRecordRequest Training object to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeTrainingRecord: async (companyDomain: string, employeeTrainingRecordId: number, trainingUpdateEmployeeTrainingRecordRequest: TrainingUpdateEmployeeTrainingRecordRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateEmployeeTrainingRecord', 'companyDomain', companyDomain)
            // verify required parameter 'employeeTrainingRecordId' is not null or undefined
            assertParamExists('updateEmployeeTrainingRecord', 'employeeTrainingRecordId', employeeTrainingRecordId)
            // verify required parameter 'trainingUpdateEmployeeTrainingRecordRequest' is not null or undefined
            assertParamExists('updateEmployeeTrainingRecord', 'trainingUpdateEmployeeTrainingRecordRequest', trainingUpdateEmployeeTrainingRecordRequest)
            const localVarPath = `/{companyDomain}/v1/training/record/{employeeTrainingRecordId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeTrainingRecordId"}}`, encodeURIComponent(String(employeeTrainingRecordId !== undefined ? employeeTrainingRecordId : `-employeeTrainingRecordId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingUpdateEmployeeTrainingRecordRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/record/{employeeTrainingRecordId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingUpdateEmployeeTrainingRecordRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing training type. The owner of the API key used must have access to training settings.
         * @summary Update Training Type
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} trainingTypeId The ID of the training type to update.
         * @param {TrainingUpdateTypeRequest} trainingUpdateTypeRequest Training type object to update to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType: async (companyDomain: string, trainingTypeId: number, trainingUpdateTypeRequest: TrainingUpdateTypeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateType', 'companyDomain', companyDomain)
            // verify required parameter 'trainingTypeId' is not null or undefined
            assertParamExists('updateType', 'trainingTypeId', trainingTypeId)
            // verify required parameter 'trainingUpdateTypeRequest' is not null or undefined
            assertParamExists('updateType', 'trainingUpdateTypeRequest', trainingUpdateTypeRequest)
            const localVarPath = `/{companyDomain}/v1/training/type/{trainingTypeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"trainingTypeId"}}`, encodeURIComponent(String(trainingTypeId !== undefined ? trainingTypeId : `-trainingTypeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: trainingUpdateTypeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/training/type/{trainingTypeId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(trainingUpdateTypeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingApi - functional programming interface
 * @export
 */
export const TrainingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a training category. The owner of the API key used must have access to training settings.
         * @summary Add Training Category
         * @param {TrainingApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(requestParameters: TrainingApiAddCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingCategory>> {
            const trainingAddCategoryRequest: TrainingAddCategoryRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(requestParameters.companyDomain, trainingAddCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.
         * @summary Add New Employee Training Record
         * @param {TrainingApiAddEmployeeTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeTrainingRecord(requestParameters: TrainingApiAddEmployeeTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingRecord>> {
            const trainingAddEmployeeTrainingRecordRequest: TrainingAddEmployeeTrainingRecordRequest = {
                completed: requestParameters.completed,
                cost: requestParameters.cost,
                instructor: requestParameters.instructor,
                hours: requestParameters.hours,
                credits: requestParameters.credits,
                notes: requestParameters.notes,
                type: requestParameters.type
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeTrainingRecord(requestParameters.companyDomain, requestParameters.employeeId, trainingAddEmployeeTrainingRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of training categories. The owner of the API key used must have access to training settings.
         * @summary List Training Categories
         * @param {TrainingApiCategoryListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoryList(requestParameters: TrainingApiCategoryListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingCategoryListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoryList(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing training category. The owner of the API key used must have access to training settings.
         * @summary Delete Training Category
         * @param {TrainingApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(requestParameters: TrainingApiDeleteCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(requestParameters.companyDomain, requestParameters.trainingCategoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.
         * @summary Delete Employee Training Record
         * @param {TrainingApiDeleteEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployeeRecord(requestParameters: TrainingApiDeleteEmployeeRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployeeRecord(requestParameters.companyDomain, requestParameters.employeeTrainingRecordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of training types. The owner of the API key used must have access to training settings.
         * @summary List Training Types
         * @param {TrainingApiGetTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTypes(requestParameters: TrainingApiGetTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingGetTypesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTypes(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.
         * @summary List Employee Trainings
         * @param {TrainingApiListEmployeeTrainingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeTrainings(requestParameters: TrainingApiListEmployeeTrainingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingListEmployeeTrainingsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeTrainings(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.trainingTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.
         * @summary Delete Training Type
         * @param {TrainingApiRemoveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeType(requestParameters: TrainingApiRemoveTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeType(requestParameters.companyDomain, requestParameters.trainingTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a training type. The owner of the API key used must have access to training settings.
         * @summary Add Training Type
         * @param {TrainingApiTypeAdditionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async typeAddition(requestParameters: TrainingApiTypeAdditionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingType>> {
            const trainingTypeAdditionRequest: TrainingTypeAdditionRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                frequency: requestParameters.frequency,
                renewable: requestParameters.renewable,
                category: requestParameters.category,
                required: requestParameters.required,
                dueFromHireDate: requestParameters.dueFromHireDate,
                linkUrl: requestParameters.linkUrl,
                allowEmployeesToMarkComplete: requestParameters.allowEmployeesToMarkComplete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.typeAddition(requestParameters.companyDomain, trainingTypeAdditionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing training category. The owner of the API key used must have access to training settings.
         * @summary Update Training Category
         * @param {TrainingApiUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(requestParameters: TrainingApiUpdateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingCategory>> {
            const trainingUpdateCategoryRequest: TrainingUpdateCategoryRequest = {
                name: requestParameters.name
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(requestParameters.companyDomain, requestParameters.trainingCategoryId, trainingUpdateCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee
         * @summary Update Employee Training Record
         * @param {TrainingApiUpdateEmployeeTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeTrainingRecord(requestParameters: TrainingApiUpdateEmployeeTrainingRecordRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingRecord>> {
            const trainingUpdateEmployeeTrainingRecordRequest: TrainingUpdateEmployeeTrainingRecordRequest = {
                completed: requestParameters.completed,
                cost: requestParameters.cost,
                instructor: requestParameters.instructor,
                hours: requestParameters.hours,
                credits: requestParameters.credits,
                notes: requestParameters.notes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeTrainingRecord(requestParameters.companyDomain, requestParameters.employeeTrainingRecordId, trainingUpdateEmployeeTrainingRecordRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing training type. The owner of the API key used must have access to training settings.
         * @summary Update Training Type
         * @param {TrainingApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateType(requestParameters: TrainingApiUpdateTypeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingType>> {
            const trainingUpdateTypeRequest: TrainingUpdateTypeRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                frequency: requestParameters.frequency,
                renewable: requestParameters.renewable,
                category: requestParameters.category,
                required: requestParameters.required,
                dueFromHireDate: requestParameters.dueFromHireDate,
                linkUrl: requestParameters.linkUrl,
                allowEmployeesToMarkComplete: requestParameters.allowEmployeesToMarkComplete
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateType(requestParameters.companyDomain, requestParameters.trainingTypeId, trainingUpdateTypeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainingApi - factory interface
 * @export
 */
export const TrainingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingApiFp(configuration)
    return {
        /**
         * Add a training category. The owner of the API key used must have access to training settings.
         * @summary Add Training Category
         * @param {TrainingApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(requestParameters: TrainingApiAddCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingCategory> {
            return localVarFp.addCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.
         * @summary Add New Employee Training Record
         * @param {TrainingApiAddEmployeeTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeTrainingRecord(requestParameters: TrainingApiAddEmployeeTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingRecord> {
            return localVarFp.addEmployeeTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of training categories. The owner of the API key used must have access to training settings.
         * @summary List Training Categories
         * @param {TrainingApiCategoryListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoryList(requestParameters: TrainingApiCategoryListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TrainingCategoryListResponseInner>> {
            return localVarFp.categoryList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing training category. The owner of the API key used must have access to training settings.
         * @summary Delete Training Category
         * @param {TrainingApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(requestParameters: TrainingApiDeleteCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.
         * @summary Delete Employee Training Record
         * @param {TrainingApiDeleteEmployeeRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeRecord(requestParameters: TrainingApiDeleteEmployeeRecordRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmployeeRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of training types. The owner of the API key used must have access to training settings.
         * @summary List Training Types
         * @param {TrainingApiGetTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTypes(requestParameters: TrainingApiGetTypesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TrainingGetTypesResponseInner>> {
            return localVarFp.getTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.
         * @summary List Employee Trainings
         * @param {TrainingApiListEmployeeTrainingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTrainings(requestParameters: TrainingApiListEmployeeTrainingsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TrainingListEmployeeTrainingsResponseInner>> {
            return localVarFp.listEmployeeTrainings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.
         * @summary Delete Training Type
         * @param {TrainingApiRemoveTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeType(requestParameters: TrainingApiRemoveTypeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a training type. The owner of the API key used must have access to training settings.
         * @summary Add Training Type
         * @param {TrainingApiTypeAdditionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        typeAddition(requestParameters: TrainingApiTypeAdditionRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingType> {
            return localVarFp.typeAddition(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing training category. The owner of the API key used must have access to training settings.
         * @summary Update Training Category
         * @param {TrainingApiUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(requestParameters: TrainingApiUpdateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingCategory> {
            return localVarFp.updateCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee
         * @summary Update Employee Training Record
         * @param {TrainingApiUpdateEmployeeTrainingRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeTrainingRecord(requestParameters: TrainingApiUpdateEmployeeTrainingRecordRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingRecord> {
            return localVarFp.updateEmployeeTrainingRecord(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing training type. The owner of the API key used must have access to training settings.
         * @summary Update Training Type
         * @param {TrainingApiUpdateTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateType(requestParameters: TrainingApiUpdateTypeRequest, options?: AxiosRequestConfig): AxiosPromise<TrainingType> {
            return localVarFp.updateType(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCategory operation in TrainingApi.
 * @export
 * @interface TrainingApiAddCategoryRequest
 */
export type TrainingApiAddCategoryRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiAddCategory
    */
    readonly companyDomain: string
    
} & TrainingAddCategoryRequest

/**
 * Request parameters for addEmployeeTrainingRecord operation in TrainingApi.
 * @export
 * @interface TrainingApiAddEmployeeTrainingRecordRequest
 */
export type TrainingApiAddEmployeeTrainingRecordRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiAddEmployeeTrainingRecord
    */
    readonly companyDomain: string
    
    /**
    * The ID of the employee to add a training record to.
    * @type {number}
    * @memberof TrainingApiAddEmployeeTrainingRecord
    */
    readonly employeeId: number
    
} & TrainingAddEmployeeTrainingRecordRequest

/**
 * Request parameters for categoryList operation in TrainingApi.
 * @export
 * @interface TrainingApiCategoryListRequest
 */
export type TrainingApiCategoryListRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiCategoryList
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for deleteCategory operation in TrainingApi.
 * @export
 * @interface TrainingApiDeleteCategoryRequest
 */
export type TrainingApiDeleteCategoryRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiDeleteCategory
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training category to delete.
    * @type {number}
    * @memberof TrainingApiDeleteCategory
    */
    readonly trainingCategoryId: number
    
}

/**
 * Request parameters for deleteEmployeeRecord operation in TrainingApi.
 * @export
 * @interface TrainingApiDeleteEmployeeRecordRequest
 */
export type TrainingApiDeleteEmployeeRecordRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiDeleteEmployeeRecord
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training record to delete.
    * @type {number}
    * @memberof TrainingApiDeleteEmployeeRecord
    */
    readonly employeeTrainingRecordId: number
    
}

/**
 * Request parameters for getTypes operation in TrainingApi.
 * @export
 * @interface TrainingApiGetTypesRequest
 */
export type TrainingApiGetTypesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiGetTypes
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for listEmployeeTrainings operation in TrainingApi.
 * @export
 * @interface TrainingApiListEmployeeTrainingsRequest
 */
export type TrainingApiListEmployeeTrainingsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiListEmployeeTrainings
    */
    readonly companyDomain: string
    
    /**
    * The ID of the employee to get a list of trainings for.
    * @type {number}
    * @memberof TrainingApiListEmployeeTrainings
    */
    readonly employeeId: number
    
    /**
    * The training type id is optional. Not supplying a training type id will return the collection of all training records for the employee.
    * @type {number}
    * @memberof TrainingApiListEmployeeTrainings
    */
    readonly trainingTypeId?: number
    
}

/**
 * Request parameters for removeType operation in TrainingApi.
 * @export
 * @interface TrainingApiRemoveTypeRequest
 */
export type TrainingApiRemoveTypeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiRemoveType
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training type to delete.
    * @type {number}
    * @memberof TrainingApiRemoveType
    */
    readonly trainingTypeId: number
    
}

/**
 * Request parameters for typeAddition operation in TrainingApi.
 * @export
 * @interface TrainingApiTypeAdditionRequest
 */
export type TrainingApiTypeAdditionRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiTypeAddition
    */
    readonly companyDomain: string
    
} & TrainingTypeAdditionRequest

/**
 * Request parameters for updateCategory operation in TrainingApi.
 * @export
 * @interface TrainingApiUpdateCategoryRequest
 */
export type TrainingApiUpdateCategoryRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiUpdateCategory
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training category to update.
    * @type {number}
    * @memberof TrainingApiUpdateCategory
    */
    readonly trainingCategoryId: number
    
} & TrainingUpdateCategoryRequest

/**
 * Request parameters for updateEmployeeTrainingRecord operation in TrainingApi.
 * @export
 * @interface TrainingApiUpdateEmployeeTrainingRecordRequest
 */
export type TrainingApiUpdateEmployeeTrainingRecordRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiUpdateEmployeeTrainingRecord
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training record to update.
    * @type {number}
    * @memberof TrainingApiUpdateEmployeeTrainingRecord
    */
    readonly employeeTrainingRecordId: number
    
} & TrainingUpdateEmployeeTrainingRecordRequest

/**
 * Request parameters for updateType operation in TrainingApi.
 * @export
 * @interface TrainingApiUpdateTypeRequest
 */
export type TrainingApiUpdateTypeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TrainingApiUpdateType
    */
    readonly companyDomain: string
    
    /**
    * The ID of the training type to update.
    * @type {number}
    * @memberof TrainingApiUpdateType
    */
    readonly trainingTypeId: number
    
} & TrainingUpdateTypeRequest

/**
 * TrainingApiGenerated - object-oriented interface
 * @export
 * @class TrainingApiGenerated
 * @extends {BaseAPI}
 */
export class TrainingApiGenerated extends BaseAPI {
    /**
     * Add a training category. The owner of the API key used must have access to training settings.
     * @summary Add Training Category
     * @param {TrainingApiAddCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public addCategory(requestParameters: TrainingApiAddCategoryRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).addCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new employee training record. The owner of the API key used must have permission to add trainings for the selected employee.
     * @summary Add New Employee Training Record
     * @param {TrainingApiAddEmployeeTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public addEmployeeTrainingRecord(requestParameters: TrainingApiAddEmployeeTrainingRecordRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).addEmployeeTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of training categories. The owner of the API key used must have access to training settings.
     * @summary List Training Categories
     * @param {TrainingApiCategoryListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public categoryList(requestParameters: TrainingApiCategoryListRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).categoryList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing training category. The owner of the API key used must have access to training settings.
     * @summary Delete Training Category
     * @param {TrainingApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public deleteCategory(requestParameters: TrainingApiDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).deleteCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing employee training record. The owner of the API key used must have permission to view and edit the employee and training type.
     * @summary Delete Employee Training Record
     * @param {TrainingApiDeleteEmployeeRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public deleteEmployeeRecord(requestParameters: TrainingApiDeleteEmployeeRecordRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).deleteEmployeeRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of training types. The owner of the API key used must have access to training settings.
     * @summary List Training Types
     * @param {TrainingApiGetTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public getTypes(requestParameters: TrainingApiGetTypesRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).getTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all employee training records. The owner of the API key used must have access to view the employee. The API will only return trainings for the employee that the owner of the API key has permission to see. Included with each employee training is the training information that has been selected for tracking in settings.
     * @summary List Employee Trainings
     * @param {TrainingApiListEmployeeTrainingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public listEmployeeTrainings(requestParameters: TrainingApiListEmployeeTrainingsRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).listEmployeeTrainings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing training type. The owner of the API key used must have access to training settings. Deleting a training type will only be successful if all employee trainings for this type have been removed prior to this request.
     * @summary Delete Training Type
     * @param {TrainingApiRemoveTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public removeType(requestParameters: TrainingApiRemoveTypeRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).removeType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a training type. The owner of the API key used must have access to training settings.
     * @summary Add Training Type
     * @param {TrainingApiTypeAdditionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public typeAddition(requestParameters: TrainingApiTypeAdditionRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).typeAddition(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing training category. The owner of the API key used must have access to training settings.
     * @summary Update Training Category
     * @param {TrainingApiUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public updateCategory(requestParameters: TrainingApiUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).updateCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing exmployee training record. The owner of the API key used must have permission to add trainings for the selected employee
     * @summary Update Employee Training Record
     * @param {TrainingApiUpdateEmployeeTrainingRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public updateEmployeeTrainingRecord(requestParameters: TrainingApiUpdateEmployeeTrainingRecordRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).updateEmployeeTrainingRecord(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing training type. The owner of the API key used must have access to training settings.
     * @summary Update Training Type
     * @param {TrainingApiUpdateTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiGenerated
     */
    public updateType(requestParameters: TrainingApiUpdateTypeRequest, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).updateType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
