/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicantTrackingAddApplicationCommentRequest } from '../models';
// @ts-ignore
import { ApplicantTrackingChangeApplicantStatusRequest } from '../models';
// @ts-ignore
import { ApplicantTrackingCreateNewApplicationRequest } from '../models';
// @ts-ignore
import { ApplicantTrackingCreateNewApplicationResponseInner } from '../models';
// @ts-ignore
import { ApplicantTrackingCreateNewJobOpeningRequest } from '../models';
// @ts-ignore
import { ApplicantTrackingCreateNewJobOpeningResponseInner } from '../models';
// @ts-ignore
import { ApplicantTrackingGetApplicationDetailsResponse } from '../models';
// @ts-ignore
import { ApplicantTrackingGetCompanyLocationsResponseInner } from '../models';
// @ts-ignore
import { ApplicantTrackingGetHiringLeadsResponseInner } from '../models';
// @ts-ignore
import { ApplicantTrackingGetJobSummariesResponseInner } from '../models';
// @ts-ignore
import { ApplicantTrackingListApplicationsResponse } from '../models';
// @ts-ignore
import { ApplicantTrackingListStatusesResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ApplicantTrackingApi - axios parameter creator
 * @export
 */
export const ApplicantTrackingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a comment to an application. The owner of the API key used must have access to ATS settings.
         * @summary Add Application Comment
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} applicationId The ID of the application to add a comment to.
         * @param {ApplicantTrackingAddApplicationCommentRequest} applicantTrackingAddApplicationCommentRequest Comment object to post
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationComment: async (companyDomain: string, applicationId: number, applicantTrackingAddApplicationCommentRequest: ApplicantTrackingAddApplicationCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addApplicationComment', 'companyDomain', companyDomain)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('addApplicationComment', 'applicationId', applicationId)
            // verify required parameter 'applicantTrackingAddApplicationCommentRequest' is not null or undefined
            assertParamExists('addApplicationComment', 'applicantTrackingAddApplicationCommentRequest', applicantTrackingAddApplicationCommentRequest)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId !== undefined ? applicationId : `-applicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicantTrackingAddApplicationCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicantTrackingAddApplicationCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change applicant\'s status. The owner of the API key used must have access to ATS settings.
         * @summary Change Applicant\'s Status
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} applicationId The ID of the application to add a comment to.
         * @param {ApplicantTrackingChangeApplicantStatusRequest} applicantTrackingChangeApplicantStatusRequest Sample Post Data.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeApplicantStatus: async (companyDomain: string, applicationId: number, applicantTrackingChangeApplicantStatusRequest: ApplicantTrackingChangeApplicantStatusRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('changeApplicantStatus', 'companyDomain', companyDomain)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('changeApplicantStatus', 'applicationId', applicationId)
            // verify required parameter 'applicantTrackingChangeApplicantStatusRequest' is not null or undefined
            assertParamExists('changeApplicantStatus', 'applicantTrackingChangeApplicantStatusRequest', applicantTrackingChangeApplicantStatusRequest)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId !== undefined ? applicationId : `-applicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: applicantTrackingChangeApplicantStatusRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}/status',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(applicantTrackingChangeApplicantStatusRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Candidate
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} firstName The first name of the candidate.
         * @param {string} lastName The last name of the candidate.
         * @param {number} jobId The id of the job opening for the candidate application.
         * @param {ApplicantTrackingCreateNewApplicationRequest} applicantTrackingCreateNewApplicationRequest 
         * @param {string} [email] The email address of the candidate.
         * @param {string} [phoneNumber] The phone number of the candidate.
         * @param {string} [source] The source of the candidate application, e.g. LinkedIn, Indeed, etc.
         * @param {string} [address] The street address of the candidate.
         * @param {string} [city] The city of the candidate.
         * @param {string} [state] The state or province of the candidate. Accepts state name, abbreviation, or ISO code.
         * @param {string} [zip] The zip code or postal code of the candidate.
         * @param {string} [country] The country of the candidate. Accepts country name or ISO code.
         * @param {string} [linkedinUrl] The LinkedIn profile url of the candidate.
         * @param {string} [dateAvailable] The available start date of the candidate with the format YYYY-MM-DD.
         * @param {string} [desiredSalary] The desired salary of the candidate.
         * @param {string} [referredBy] The person or entity that referred the candidate.
         * @param {string} [websiteUrl] The personal website, blog, or online portfolio of the candidate.
         * @param {string} [highestEducation] The highest completed education level of the candidate.
         * @param {string} [collegeName] The college or university of the candidate.
         * @param {string} [references] A list of references supplied by the candidate.
         * @param {Uint8Array | File | buffer.File} [resume] Resume of the candidate.
         * @param {Uint8Array | File | buffer.File} [coverLetter] Cover letter of the candidate.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication: async (companyDomain: string, firstName: string, lastName: string, jobId: number, applicantTrackingCreateNewApplicationRequest: ApplicantTrackingCreateNewApplicationRequest, email?: string, phoneNumber?: string, source?: string, address?: string, city?: string, state?: string, zip?: string, country?: string, linkedinUrl?: string, dateAvailable?: string, desiredSalary?: string, referredBy?: string, websiteUrl?: string, highestEducation?: string, collegeName?: string, references?: string, resume?: Uint8Array | File | buffer.File, coverLetter?: Uint8Array | File | buffer.File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createNewApplication', 'companyDomain', companyDomain)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('createNewApplication', 'firstName', firstName)
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('createNewApplication', 'lastName', lastName)
            // verify required parameter 'jobId' is not null or undefined
            assertParamExists('createNewApplication', 'jobId', jobId)
            // verify required parameter 'applicantTrackingCreateNewApplicationRequest' is not null or undefined
            assertParamExists('createNewApplication', 'applicantTrackingCreateNewApplicationRequest', applicantTrackingCreateNewApplicationRequest)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/application`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (firstName !== undefined) {
                await addFormParam('firstName', firstName, false, true)
            }
    
            if (lastName !== undefined) {
                await addFormParam('lastName', lastName, false, true)
            }
    
            if (email !== undefined) {
                await addFormParam('email', email, false, true)
            }
    
            if (phoneNumber !== undefined) {
                await addFormParam('phoneNumber', phoneNumber, false, true)
            }
    
            if (source !== undefined) {
                await addFormParam('source', source, false, true)
            }
    
            if (jobId !== undefined) {
                await addFormParam('jobId', jobId, false, true)
            }
    
            if (address !== undefined) {
                await addFormParam('address', address, false, true)
            }
    
            if (city !== undefined) {
                await addFormParam('city', city, false, true)
            }
    
            if (state !== undefined) {
                await addFormParam('state', state, false, true)
            }
    
            if (zip !== undefined) {
                await addFormParam('zip', zip, false, true)
            }
    
            if (country !== undefined) {
                await addFormParam('country', country, false, true)
            }
    
            if (linkedinUrl !== undefined) {
                await addFormParam('linkedinUrl', linkedinUrl, false, true)
            }
    
            if (dateAvailable !== undefined) {
                await addFormParam('dateAvailable', dateAvailable, false, true)
            }
    
            if (desiredSalary !== undefined) {
                await addFormParam('desiredSalary', desiredSalary, false, true)
            }
    
            if (referredBy !== undefined) {
                await addFormParam('referredBy', referredBy, false, true)
            }
    
            if (websiteUrl !== undefined) {
                await addFormParam('websiteUrl', websiteUrl, false, true)
            }
    
            if (highestEducation !== undefined) {
                await addFormParam('highestEducation', highestEducation, false, true)
            }
    
            if (collegeName !== undefined) {
                await addFormParam('collegeName', collegeName, false, true)
            }
    
            if (references !== undefined) {
                await addFormParam('references', references, false, true)
            }
    
            if (resume !== undefined) {
                await addFormParam('resume', resume, true, true)
            }
    
            if (coverLetter !== undefined) {
                await addFormParam('coverLetter', coverLetter, true, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: applicantTrackingCreateNewApplicationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/application',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Job Opening
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} postingTitle The posting title of the job opening.
         * @param {string} jobStatus The status of the job opening.
         * @param {number} hiringLead The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.
         * @param {string} employmentType The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.
         * @param {string} jobDescription The long-form text description of the job opening.
         * @param {ApplicantTrackingCreateNewJobOpeningRequest} applicantTrackingCreateNewJobOpeningRequest 
         * @param {string} [department] The department of the job opening.
         * @param {string} [minimumExperience] The minimum experience level that qualifies a candidate for the job opening.
         * @param {string} [compensation] The pay rate or compensation for the job opening.
         * @param {number} [jobLocation] The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.
         * @param {string} [applicationQuestionResume] Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).
         * @param {string} [applicationQuestionAddress] Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).
         * @param {string} [applicationQuestionLinkedinUrl] Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).
         * @param {string} [applicationQuestionDateAvailable] Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).
         * @param {string} [applicationQuestionDesiredSalary] Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).
         * @param {string} [applicationQuestionCoverLetter] Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).
         * @param {string} [applicationQuestionReferredBy] Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).
         * @param {string} [applicationQuestionWebsiteUrl] Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).
         * @param {string} [applicationQuestionHighestEducation] Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).
         * @param {string} [applicationQuestionCollege] Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).
         * @param {string} [applicationQuestionReferences] Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).
         * @param {string} [internalJobCode] The internal job code for the job opening.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewJobOpening: async (companyDomain: string, postingTitle: string, jobStatus: string, hiringLead: number, employmentType: string, jobDescription: string, applicantTrackingCreateNewJobOpeningRequest: ApplicantTrackingCreateNewJobOpeningRequest, department?: string, minimumExperience?: string, compensation?: string, jobLocation?: number, applicationQuestionResume?: string, applicationQuestionAddress?: string, applicationQuestionLinkedinUrl?: string, applicationQuestionDateAvailable?: string, applicationQuestionDesiredSalary?: string, applicationQuestionCoverLetter?: string, applicationQuestionReferredBy?: string, applicationQuestionWebsiteUrl?: string, applicationQuestionHighestEducation?: string, applicationQuestionCollege?: string, applicationQuestionReferences?: string, internalJobCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createNewJobOpening', 'companyDomain', companyDomain)
            // verify required parameter 'postingTitle' is not null or undefined
            assertParamExists('createNewJobOpening', 'postingTitle', postingTitle)
            // verify required parameter 'jobStatus' is not null or undefined
            assertParamExists('createNewJobOpening', 'jobStatus', jobStatus)
            // verify required parameter 'hiringLead' is not null or undefined
            assertParamExists('createNewJobOpening', 'hiringLead', hiringLead)
            // verify required parameter 'employmentType' is not null or undefined
            assertParamExists('createNewJobOpening', 'employmentType', employmentType)
            // verify required parameter 'jobDescription' is not null or undefined
            assertParamExists('createNewJobOpening', 'jobDescription', jobDescription)
            // verify required parameter 'applicantTrackingCreateNewJobOpeningRequest' is not null or undefined
            assertParamExists('createNewJobOpening', 'applicantTrackingCreateNewJobOpeningRequest', applicantTrackingCreateNewJobOpeningRequest)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/job_opening`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (postingTitle !== undefined) {
                await addFormParam('postingTitle', postingTitle, false, true)
            }
    
            if (jobStatus !== undefined) {
                await addFormParam('jobStatus', jobStatus, false, true)
            }
    
            if (hiringLead !== undefined) {
                await addFormParam('hiringLead', hiringLead, false, true)
            }
    
            if (department !== undefined) {
                await addFormParam('department', department, false, true)
            }
    
            if (employmentType !== undefined) {
                await addFormParam('employmentType', employmentType, false, true)
            }
    
            if (minimumExperience !== undefined) {
                await addFormParam('minimumExperience', minimumExperience, false, true)
            }
    
            if (compensation !== undefined) {
                await addFormParam('compensation', compensation, false, true)
            }
    
            if (jobLocation !== undefined) {
                await addFormParam('jobLocation', jobLocation, false, true)
            }
    
            if (jobDescription !== undefined) {
                await addFormParam('jobDescription', jobDescription, false, true)
            }
    
            if (applicationQuestionResume !== undefined) {
                await addFormParam('applicationQuestionResume', applicationQuestionResume, false, true)
            }
    
            if (applicationQuestionAddress !== undefined) {
                await addFormParam('applicationQuestionAddress', applicationQuestionAddress, false, true)
            }
    
            if (applicationQuestionLinkedinUrl !== undefined) {
                await addFormParam('applicationQuestionLinkedinUrl', applicationQuestionLinkedinUrl, false, true)
            }
    
            if (applicationQuestionDateAvailable !== undefined) {
                await addFormParam('applicationQuestionDateAvailable', applicationQuestionDateAvailable, false, true)
            }
    
            if (applicationQuestionDesiredSalary !== undefined) {
                await addFormParam('applicationQuestionDesiredSalary', applicationQuestionDesiredSalary, false, true)
            }
    
            if (applicationQuestionCoverLetter !== undefined) {
                await addFormParam('applicationQuestionCoverLetter', applicationQuestionCoverLetter, false, true)
            }
    
            if (applicationQuestionReferredBy !== undefined) {
                await addFormParam('applicationQuestionReferredBy', applicationQuestionReferredBy, false, true)
            }
    
            if (applicationQuestionWebsiteUrl !== undefined) {
                await addFormParam('applicationQuestionWebsiteUrl', applicationQuestionWebsiteUrl, false, true)
            }
    
            if (applicationQuestionHighestEducation !== undefined) {
                await addFormParam('applicationQuestionHighestEducation', applicationQuestionHighestEducation, false, true)
            }
    
            if (applicationQuestionCollege !== undefined) {
                await addFormParam('applicationQuestionCollege', applicationQuestionCollege, false, true)
            }
    
            if (applicationQuestionReferences !== undefined) {
                await addFormParam('applicationQuestionReferences', applicationQuestionReferences, false, true)
            }
    
            if (internalJobCode !== undefined) {
                await addFormParam('internalJobCode', internalJobCode, false, true)
            }
    
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: applicantTrackingCreateNewJobOpeningRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/job_opening',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of an application. The owner of the API key used must have access to ATS settings.
         * @summary Get Application Details
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} applicationId The ID of the application to look up details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDetails: async (companyDomain: string, applicationId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getApplicationDetails', 'companyDomain', companyDomain)
            // verify required parameter 'applicationId' is not null or undefined
            assertParamExists('getApplicationDetails', 'applicationId', applicationId)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/applications/{applicationId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"applicationId"}}`, encodeURIComponent(String(applicationId !== undefined ? applicationId : `-applicationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/applications/{applicationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Company Locations
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyLocations: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCompanyLocations', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/locations`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/locations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Hiring Leads
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHiringLeads: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getHiringLeads', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/hiring_leads`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/hiring_leads',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Job Summaries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'} [statusGroups] A list of status groups to filter positions by.
         * @param {'count' | 'title' | 'lead' | 'created' | 'status'} [sortBy] A specific field to sort the results by.
         * @param {'ASC' | 'DESC'} [sortOrder] Order by which to sort results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSummaries: async (companyDomain: string, statusGroups?: 'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled', sortBy?: 'count' | 'title' | 'lead' | 'created' | 'status', sortOrder?: 'ASC' | 'DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getJobSummaries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/jobs`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (statusGroups !== undefined) {
                localVarQueryParameter['statusGroups'] = statusGroups;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/jobs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Applications
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} [page] The page number
         * @param {number} [jobId] A Job Id to limit results to
         * @param {number} [applicationStatusId] Application status id to filter by.
         * @param {'ALL' | 'ALL_ACTIVE' | 'NEW' | 'ACTIVE' | 'INACTIVE' | 'HIRED'} [applicationStatus] A list of application status groups to filter by.
         * @param {'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'} [jobStatusGroups] A list of position status groups to filter by.
         * @param {string} [searchString] A general search criteria by which to find applications.
         * @param {'first_name' | 'job_title' | 'rating' | 'phone' | 'status' | 'last_updated' | 'created_date'} [sortBy] A specific field to sort the results by.
         * @param {'ASC' | 'DESC'} [sortOrder] Order by which to sort results.
         * @param {string} [newSince] Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (companyDomain: string, page?: number, jobId?: number, applicationStatusId?: number, applicationStatus?: 'ALL' | 'ALL_ACTIVE' | 'NEW' | 'ACTIVE' | 'INACTIVE' | 'HIRED', jobStatusGroups?: 'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled', searchString?: string, sortBy?: 'first_name' | 'job_title' | 'rating' | 'phone' | 'status' | 'last_updated' | 'created_date', sortOrder?: 'ASC' | 'DESC', newSince?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listApplications', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/applications`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (jobId !== undefined) {
                localVarQueryParameter['jobId'] = jobId;
            }

            if (applicationStatusId !== undefined) {
                localVarQueryParameter['applicationStatusId'] = applicationStatusId;
            }

            if (applicationStatus !== undefined) {
                localVarQueryParameter['applicationStatus'] = applicationStatus;
            }

            if (jobStatusGroups !== undefined) {
                localVarQueryParameter['jobStatusGroups'] = jobStatusGroups;
            }

            if (searchString !== undefined) {
                localVarQueryParameter['searchString'] = searchString;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (newSince !== undefined) {
                localVarQueryParameter['newSince'] = (newSince as any instanceof Date) ?
                    (newSince as any).toISOString() :
                    newSince;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/applications',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.
         * @summary Get Statuses
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStatuses: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listStatuses', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/applicant_tracking/statuses`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/applicant_tracking/statuses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicantTrackingApi - functional programming interface
 * @export
 */
export const ApplicantTrackingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApplicantTrackingApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a comment to an application. The owner of the API key used must have access to ATS settings.
         * @summary Add Application Comment
         * @param {ApplicantTrackingApiAddApplicationCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addApplicationComment(requestParameters: ApplicantTrackingApiAddApplicationCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const applicantTrackingAddApplicationCommentRequest: ApplicantTrackingAddApplicationCommentRequest = {
                type: requestParameters.type,
                comment: requestParameters.comment
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addApplicationComment(requestParameters.companyDomain, requestParameters.applicationId, applicantTrackingAddApplicationCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change applicant\'s status. The owner of the API key used must have access to ATS settings.
         * @summary Change Applicant\'s Status
         * @param {ApplicantTrackingApiChangeApplicantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeApplicantStatus(requestParameters: ApplicantTrackingApiChangeApplicantStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const applicantTrackingChangeApplicantStatusRequest: ApplicantTrackingChangeApplicantStatusRequest = {
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeApplicantStatus(requestParameters.companyDomain, requestParameters.applicationId, applicantTrackingChangeApplicantStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Candidate
         * @param {ApplicantTrackingApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewApplication(requestParameters: ApplicantTrackingApiCreateNewApplicationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingCreateNewApplicationResponseInner>>> {
            const applicantTrackingCreateNewApplicationRequest: ApplicantTrackingCreateNewApplicationRequest = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                phoneNumber: requestParameters.phoneNumber,
                source: requestParameters.source,
                jobId: requestParameters.jobId,
                address: requestParameters.address,
                city: requestParameters.city,
                state: requestParameters.state,
                zip: requestParameters.zip,
                country: requestParameters.country,
                linkedinUrl: requestParameters.linkedinUrl,
                dateAvailable: requestParameters.dateAvailable,
                desiredSalary: requestParameters.desiredSalary,
                referredBy: requestParameters.referredBy,
                websiteUrl: requestParameters.websiteUrl,
                highestEducation: requestParameters.highestEducation,
                collegeName: requestParameters.collegeName,
                references: requestParameters.references,
                resume: requestParameters.resume,
                coverLetter: requestParameters.coverLetter
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewApplication(requestParameters.companyDomain, requestParameters.firstName, requestParameters.lastName, requestParameters.jobId, applicantTrackingCreateNewApplicationRequest, requestParameters.email, requestParameters.phoneNumber, requestParameters.source, requestParameters.address, requestParameters.city, requestParameters.state, requestParameters.zip, requestParameters.country, requestParameters.linkedinUrl, requestParameters.dateAvailable, requestParameters.desiredSalary, requestParameters.referredBy, requestParameters.websiteUrl, requestParameters.highestEducation, requestParameters.collegeName, requestParameters.references, requestParameters.resume, requestParameters.coverLetter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Job Opening
         * @param {ApplicantTrackingApiCreateNewJobOpeningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewJobOpening(requestParameters: ApplicantTrackingApiCreateNewJobOpeningRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingCreateNewJobOpeningResponseInner>>> {
            const applicantTrackingCreateNewJobOpeningRequest: ApplicantTrackingCreateNewJobOpeningRequest = {
                postingTitle: requestParameters.postingTitle,
                jobStatus: requestParameters.jobStatus,
                hiringLead: requestParameters.hiringLead,
                department: requestParameters.department,
                employmentType: requestParameters.employmentType,
                minimumExperience: requestParameters.minimumExperience,
                compensation: requestParameters.compensation,
                jobLocation: requestParameters.jobLocation,
                jobDescription: requestParameters.jobDescription,
                applicationQuestionResume: requestParameters.applicationQuestionResume,
                applicationQuestionAddress: requestParameters.applicationQuestionAddress,
                applicationQuestionLinkedinUrl: requestParameters.applicationQuestionLinkedinUrl,
                applicationQuestionDateAvailable: requestParameters.applicationQuestionDateAvailable,
                applicationQuestionDesiredSalary: requestParameters.applicationQuestionDesiredSalary,
                applicationQuestionCoverLetter: requestParameters.applicationQuestionCoverLetter,
                applicationQuestionReferredBy: requestParameters.applicationQuestionReferredBy,
                applicationQuestionWebsiteUrl: requestParameters.applicationQuestionWebsiteUrl,
                applicationQuestionHighestEducation: requestParameters.applicationQuestionHighestEducation,
                applicationQuestionCollege: requestParameters.applicationQuestionCollege,
                applicationQuestionReferences: requestParameters.applicationQuestionReferences,
                internalJobCode: requestParameters.internalJobCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewJobOpening(requestParameters.companyDomain, requestParameters.postingTitle, requestParameters.jobStatus, requestParameters.hiringLead, requestParameters.employmentType, requestParameters.jobDescription, applicantTrackingCreateNewJobOpeningRequest, requestParameters.department, requestParameters.minimumExperience, requestParameters.compensation, requestParameters.jobLocation, requestParameters.applicationQuestionResume, requestParameters.applicationQuestionAddress, requestParameters.applicationQuestionLinkedinUrl, requestParameters.applicationQuestionDateAvailable, requestParameters.applicationQuestionDesiredSalary, requestParameters.applicationQuestionCoverLetter, requestParameters.applicationQuestionReferredBy, requestParameters.applicationQuestionWebsiteUrl, requestParameters.applicationQuestionHighestEducation, requestParameters.applicationQuestionCollege, requestParameters.applicationQuestionReferences, requestParameters.internalJobCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of an application. The owner of the API key used must have access to ATS settings.
         * @summary Get Application Details
         * @param {ApplicantTrackingApiGetApplicationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationDetails(requestParameters: ApplicantTrackingApiGetApplicationDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicantTrackingGetApplicationDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationDetails(requestParameters.companyDomain, requestParameters.applicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Company Locations
         * @param {ApplicantTrackingApiGetCompanyLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyLocations(requestParameters: ApplicantTrackingApiGetCompanyLocationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingGetCompanyLocationsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyLocations(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Hiring Leads
         * @param {ApplicantTrackingApiGetHiringLeadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHiringLeads(requestParameters: ApplicantTrackingApiGetHiringLeadsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingGetHiringLeadsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHiringLeads(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Job Summaries
         * @param {ApplicantTrackingApiGetJobSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getJobSummaries(requestParameters: ApplicantTrackingApiGetJobSummariesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingGetJobSummariesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getJobSummaries(requestParameters.companyDomain, requestParameters.statusGroups, requestParameters.sortBy, requestParameters.sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Applications
         * @param {ApplicantTrackingApiListApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(requestParameters: ApplicantTrackingApiListApplicationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicantTrackingListApplicationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listApplications(requestParameters.companyDomain, requestParameters.page, requestParameters.jobId, requestParameters.applicationStatusId, requestParameters.applicationStatus, requestParameters.jobStatusGroups, requestParameters.searchString, requestParameters.sortBy, requestParameters.sortOrder, requestParameters.newSince, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.
         * @summary Get Statuses
         * @param {ApplicantTrackingApiListStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStatuses(requestParameters: ApplicantTrackingApiListStatusesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicantTrackingListStatusesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStatuses(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApplicantTrackingApi - factory interface
 * @export
 */
export const ApplicantTrackingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApplicantTrackingApiFp(configuration)
    return {
        /**
         * Add a comment to an application. The owner of the API key used must have access to ATS settings.
         * @summary Add Application Comment
         * @param {ApplicantTrackingApiAddApplicationCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addApplicationComment(requestParameters: ApplicantTrackingApiAddApplicationCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addApplicationComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change applicant\'s status. The owner of the API key used must have access to ATS settings.
         * @summary Change Applicant\'s Status
         * @param {ApplicantTrackingApiChangeApplicantStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeApplicantStatus(requestParameters: ApplicantTrackingApiChangeApplicantStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeApplicantStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Candidate
         * @param {ApplicantTrackingApiCreateNewApplicationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewApplication(requestParameters: ApplicantTrackingApiCreateNewApplicationRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingCreateNewApplicationResponseInner>> {
            return localVarFp.createNewApplication(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Add New Job Opening
         * @param {ApplicantTrackingApiCreateNewJobOpeningRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewJobOpening(requestParameters: ApplicantTrackingApiCreateNewJobOpeningRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingCreateNewJobOpeningResponseInner>> {
            return localVarFp.createNewJobOpening(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of an application. The owner of the API key used must have access to ATS settings.
         * @summary Get Application Details
         * @param {ApplicantTrackingApiGetApplicationDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationDetails(requestParameters: ApplicantTrackingApiGetApplicationDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicantTrackingGetApplicationDetailsResponse> {
            return localVarFp.getApplicationDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Company Locations
         * @param {ApplicantTrackingApiGetCompanyLocationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyLocations(requestParameters: ApplicantTrackingApiGetCompanyLocationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingGetCompanyLocationsResponseInner>> {
            return localVarFp.getCompanyLocations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
         * @summary Get Hiring Leads
         * @param {ApplicantTrackingApiGetHiringLeadsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHiringLeads(requestParameters: ApplicantTrackingApiGetHiringLeadsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingGetHiringLeadsResponseInner>> {
            return localVarFp.getHiringLeads(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Job Summaries
         * @param {ApplicantTrackingApiGetJobSummariesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getJobSummaries(requestParameters: ApplicantTrackingApiGetJobSummariesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingGetJobSummariesResponseInner>> {
            return localVarFp.getJobSummaries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
         * @summary Get Applications
         * @param {ApplicantTrackingApiListApplicationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(requestParameters: ApplicantTrackingApiListApplicationsRequest, options?: AxiosRequestConfig): AxiosPromise<ApplicantTrackingListApplicationsResponse> {
            return localVarFp.listApplications(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.
         * @summary Get Statuses
         * @param {ApplicantTrackingApiListStatusesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStatuses(requestParameters: ApplicantTrackingApiListStatusesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ApplicantTrackingListStatusesResponseInner>> {
            return localVarFp.listStatuses(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addApplicationComment operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiAddApplicationCommentRequest
 */
export type ApplicantTrackingApiAddApplicationCommentRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiAddApplicationComment
    */
    readonly companyDomain: string
    
    /**
    * The ID of the application to add a comment to.
    * @type {number}
    * @memberof ApplicantTrackingApiAddApplicationComment
    */
    readonly applicationId: number
    
} & ApplicantTrackingAddApplicationCommentRequest

/**
 * Request parameters for changeApplicantStatus operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiChangeApplicantStatusRequest
 */
export type ApplicantTrackingApiChangeApplicantStatusRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiChangeApplicantStatus
    */
    readonly companyDomain: string
    
    /**
    * The ID of the application to add a comment to.
    * @type {number}
    * @memberof ApplicantTrackingApiChangeApplicantStatus
    */
    readonly applicationId: number
    
} & ApplicantTrackingChangeApplicantStatusRequest

/**
 * Request parameters for createNewApplication operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiCreateNewApplicationRequest
 */
export type ApplicantTrackingApiCreateNewApplicationRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly companyDomain: string
    
    /**
    * The first name of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly firstName: string
    
    /**
    * The last name of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly lastName: string
    
    /**
    * The id of the job opening for the candidate application.
    * @type {number}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly jobId: number
    
    /**
    * The email address of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly email?: string
    
    /**
    * The phone number of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly phoneNumber?: string
    
    /**
    * The source of the candidate application, e.g. LinkedIn, Indeed, etc.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly source?: string
    
    /**
    * The street address of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly address?: string
    
    /**
    * The city of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly city?: string
    
    /**
    * The state or province of the candidate. Accepts state name, abbreviation, or ISO code.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly state?: string
    
    /**
    * The zip code or postal code of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly zip?: string
    
    /**
    * The country of the candidate. Accepts country name or ISO code.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly country?: string
    
    /**
    * The LinkedIn profile url of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly linkedinUrl?: string
    
    /**
    * The available start date of the candidate with the format YYYY-MM-DD.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly dateAvailable?: string
    
    /**
    * The desired salary of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly desiredSalary?: string
    
    /**
    * The person or entity that referred the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly referredBy?: string
    
    /**
    * The personal website, blog, or online portfolio of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly websiteUrl?: string
    
    /**
    * The highest completed education level of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly highestEducation?: string
    
    /**
    * The college or university of the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly collegeName?: string
    
    /**
    * A list of references supplied by the candidate.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly references?: string
    
    /**
    * Resume of the candidate.
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly resume?: Uint8Array | File | buffer.File
    
    /**
    * Cover letter of the candidate.
    * @type {Uint8Array | File | buffer.File}
    * @memberof ApplicantTrackingApiCreateNewApplication
    */
    readonly coverLetter?: Uint8Array | File | buffer.File
    
} & ApplicantTrackingCreateNewApplicationRequest

/**
 * Request parameters for createNewJobOpening operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiCreateNewJobOpeningRequest
 */
export type ApplicantTrackingApiCreateNewJobOpeningRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly companyDomain: string
    
    /**
    * The posting title of the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly postingTitle: string
    
    /**
    * The status of the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly jobStatus: string
    
    /**
    * The employee id (from the v1/applicant_tracking/hiring_leads endpoint) of the hiring lead for the job opening.
    * @type {number}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly hiringLead: number
    
    /**
    * The type of employment offered in the job opening, e.g. Full-Time, Part-Time, Contractor, etc.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly employmentType: string
    
    /**
    * The long-form text description of the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly jobDescription: string
    
    /**
    * The department of the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly department?: string
    
    /**
    * The minimum experience level that qualifies a candidate for the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly minimumExperience?: string
    
    /**
    * The pay rate or compensation for the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly compensation?: string
    
    /**
    * The location id (from the v1/applicant_tracking/locations endpoint) of the job opening. Omit this parameter for a remote job location.
    * @type {number}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly jobLocation?: number
    
    /**
    * Whether the job opening application has a standard question for resume (true) or not (false) or if uploading a resume is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionResume?: string
    
    /**
    * Whether the job opening application has a standard question for address (true) or not (false) or if entering an address is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionAddress?: string
    
    /**
    * Whether the job opening application has a standard question for LinkedIn profile url (true) or not (false) or if entering a LinkedIn profile url is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionLinkedinUrl?: string
    
    /**
    * Whether the job opening application has a standard question for availability date (true) or not (false) or if entering an availability date is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionDateAvailable?: string
    
    /**
    * Whether the job opening application has a standard question for desired salary (true) or not (false) or if entering a desired salary is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionDesiredSalary?: string
    
    /**
    * Whether the job opening application has a standard question for cover letter (true) or not (false) or if uploading a cover letter is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionCoverLetter?: string
    
    /**
    * Whether the job opening application has a standard question for referred by (true) or not (false) or if entering referred by is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionReferredBy?: string
    
    /**
    * Whether the job opening application has a standard question for website url (true) or not (false) or if entering a website url is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionWebsiteUrl?: string
    
    /**
    * Whether the job opening application has a standard question for highest education (true) or not (false) or if entering highest education is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionHighestEducation?: string
    
    /**
    * Whether the job opening application has a standard question for college (true) or not (false) or if entering a college is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionCollege?: string
    
    /**
    * Whether the job opening application has a standard question for references (true) or not (false) or if entering references is mandatory (required).
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly applicationQuestionReferences?: string
    
    /**
    * The internal job code for the job opening.
    * @type {string}
    * @memberof ApplicantTrackingApiCreateNewJobOpening
    */
    readonly internalJobCode?: string
    
} & ApplicantTrackingCreateNewJobOpeningRequest

/**
 * Request parameters for getApplicationDetails operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiGetApplicationDetailsRequest
 */
export type ApplicantTrackingApiGetApplicationDetailsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiGetApplicationDetails
    */
    readonly companyDomain: string
    
    /**
    * The ID of the application to look up details.
    * @type {number}
    * @memberof ApplicantTrackingApiGetApplicationDetails
    */
    readonly applicationId: number
    
}

/**
 * Request parameters for getCompanyLocations operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiGetCompanyLocationsRequest
 */
export type ApplicantTrackingApiGetCompanyLocationsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiGetCompanyLocations
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getHiringLeads operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiGetHiringLeadsRequest
 */
export type ApplicantTrackingApiGetHiringLeadsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiGetHiringLeads
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getJobSummaries operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiGetJobSummariesRequest
 */
export type ApplicantTrackingApiGetJobSummariesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiGetJobSummaries
    */
    readonly companyDomain: string
    
    /**
    * A list of status groups to filter positions by.
    * @type {'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'}
    * @memberof ApplicantTrackingApiGetJobSummaries
    */
    readonly statusGroups?: 'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'
    
    /**
    * A specific field to sort the results by.
    * @type {'count' | 'title' | 'lead' | 'created' | 'status'}
    * @memberof ApplicantTrackingApiGetJobSummaries
    */
    readonly sortBy?: 'count' | 'title' | 'lead' | 'created' | 'status'
    
    /**
    * Order by which to sort results.
    * @type {'ASC' | 'DESC'}
    * @memberof ApplicantTrackingApiGetJobSummaries
    */
    readonly sortOrder?: 'ASC' | 'DESC'
    
}

/**
 * Request parameters for listApplications operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiListApplicationsRequest
 */
export type ApplicantTrackingApiListApplicationsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly companyDomain: string
    
    /**
    * The page number
    * @type {number}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly page?: number
    
    /**
    * A Job Id to limit results to
    * @type {number}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly jobId?: number
    
    /**
    * Application status id to filter by.
    * @type {number}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly applicationStatusId?: number
    
    /**
    * A list of application status groups to filter by.
    * @type {'ALL' | 'ALL_ACTIVE' | 'NEW' | 'ACTIVE' | 'INACTIVE' | 'HIRED'}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly applicationStatus?: 'ALL' | 'ALL_ACTIVE' | 'NEW' | 'ACTIVE' | 'INACTIVE' | 'HIRED'
    
    /**
    * A list of position status groups to filter by.
    * @type {'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly jobStatusGroups?: 'ALL' | 'DRAFT_AND_OPEN' | 'Open' | 'Filled' | 'Draft' | 'Deleted' | 'On Hold' | 'Canceled'
    
    /**
    * A general search criteria by which to find applications.
    * @type {string}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly searchString?: string
    
    /**
    * A specific field to sort the results by.
    * @type {'first_name' | 'job_title' | 'rating' | 'phone' | 'status' | 'last_updated' | 'created_date'}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly sortBy?: 'first_name' | 'job_title' | 'rating' | 'phone' | 'status' | 'last_updated' | 'created_date'
    
    /**
    * Order by which to sort results.
    * @type {'ASC' | 'DESC'}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly sortOrder?: 'ASC' | 'DESC'
    
    /**
    * Only get applications newer than a given UTC timestamp, for example 2024-01-01 13:00:00
    * @type {string}
    * @memberof ApplicantTrackingApiListApplications
    */
    readonly newSince?: string
    
}

/**
 * Request parameters for listStatuses operation in ApplicantTrackingApi.
 * @export
 * @interface ApplicantTrackingApiListStatusesRequest
 */
export type ApplicantTrackingApiListStatusesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ApplicantTrackingApiListStatuses
    */
    readonly companyDomain: string
    
}

/**
 * ApplicantTrackingApiGenerated - object-oriented interface
 * @export
 * @class ApplicantTrackingApiGenerated
 * @extends {BaseAPI}
 */
export class ApplicantTrackingApiGenerated extends BaseAPI {
    /**
     * Add a comment to an application. The owner of the API key used must have access to ATS settings.
     * @summary Add Application Comment
     * @param {ApplicantTrackingApiAddApplicationCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public addApplicationComment(requestParameters: ApplicantTrackingApiAddApplicationCommentRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).addApplicationComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change applicant\'s status. The owner of the API key used must have access to ATS settings.
     * @summary Change Applicant\'s Status
     * @param {ApplicantTrackingApiChangeApplicantStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public changeApplicantStatus(requestParameters: ApplicantTrackingApiChangeApplicantStatusRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).changeApplicantStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new candidate application to a job opening. The owner of the API key used must have access to ATS settings.
     * @summary Add New Candidate
     * @param {ApplicantTrackingApiCreateNewApplicationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public createNewApplication(requestParameters: ApplicantTrackingApiCreateNewApplicationRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).createNewApplication(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new job opening. The owner of the API key used must have access to ATS settings.
     * @summary Add New Job Opening
     * @param {ApplicantTrackingApiCreateNewJobOpeningRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public createNewJobOpening(requestParameters: ApplicantTrackingApiCreateNewJobOpeningRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).createNewJobOpening(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of an application. The owner of the API key used must have access to ATS settings.
     * @summary Get Application Details
     * @param {ApplicantTrackingApiGetApplicationDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public getApplicationDetails(requestParameters: ApplicantTrackingApiGetApplicationDetailsRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).getApplicationDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get company locations for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
     * @summary Get Company Locations
     * @param {ApplicantTrackingApiGetCompanyLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public getCompanyLocations(requestParameters: ApplicantTrackingApiGetCompanyLocationsRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).getCompanyLocations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get potential hiring leads for use in creating a new job opening. The owner of the API key used must have access to ATS settings.
     * @summary Get Hiring Leads
     * @param {ApplicantTrackingApiGetHiringLeadsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public getHiringLeads(requestParameters: ApplicantTrackingApiGetHiringLeadsRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).getHiringLeads(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of job summaries. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
     * @summary Get Job Summaries
     * @param {ApplicantTrackingApiGetJobSummariesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public getJobSummaries(requestParameters: ApplicantTrackingApiGetJobSummariesRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).getJobSummaries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of applications. The owner of the API key used must have access to ATS settings. Combine as many different optional parameter filters as you like.
     * @summary Get Applications
     * @param {ApplicantTrackingApiListApplicationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public listApplications(requestParameters: ApplicantTrackingApiListApplicationsRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).listApplications(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of statuses for a company. The owner of the API key used must have access to ATS settings.
     * @summary Get Statuses
     * @param {ApplicantTrackingApiListStatusesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicantTrackingApiGenerated
     */
    public listStatuses(requestParameters: ApplicantTrackingApiListStatusesRequest, options?: AxiosRequestConfig) {
        return ApplicantTrackingApiFp(this.configuration).listStatuses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
