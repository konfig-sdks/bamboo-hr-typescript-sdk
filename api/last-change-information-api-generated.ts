/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LastChangeInformationApi - axios parameter creator
 * @export
 */
export const LastChangeInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This API allows for efficient syncing of employee data. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY individual field in the employee record, as well as any change to the employment status, job info, or compensation tables, will cause that employee to be returned via this API.
         * @summary Gets all updated employee IDs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} since URL encoded iso8601 timestamp
         * @param {string} [type] Use one of these in the {type} variable in the URL: \&quot;inserted\&quot;, \&quot;updated\&quot;, \&quot;deleted\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangedEmployeeIds: async (companyDomain: string, since: string, type?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getChangedEmployeeIds', 'companyDomain', companyDomain)
            // verify required parameter 'since' is not null or undefined
            assertParamExists('getChangedEmployeeIds', 'since', since)
            const localVarPath = `/{companyDomain}/v1/employees/changed`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/changed',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LastChangeInformationApi - functional programming interface
 * @export
 */
export const LastChangeInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LastChangeInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * This API allows for efficient syncing of employee data. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY individual field in the employee record, as well as any change to the employment status, job info, or compensation tables, will cause that employee to be returned via this API.
         * @summary Gets all updated employee IDs
         * @param {LastChangeInformationApiGetChangedEmployeeIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChangedEmployeeIds(requestParameters: LastChangeInformationApiGetChangedEmployeeIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChangedEmployeeIds(requestParameters.companyDomain, requestParameters.since, requestParameters.type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LastChangeInformationApi - factory interface
 * @export
 */
export const LastChangeInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LastChangeInformationApiFp(configuration)
    return {
        /**
         * This API allows for efficient syncing of employee data. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY individual field in the employee record, as well as any change to the employment status, job info, or compensation tables, will cause that employee to be returned via this API.
         * @summary Gets all updated employee IDs
         * @param {LastChangeInformationApiGetChangedEmployeeIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangedEmployeeIds(requestParameters: LastChangeInformationApiGetChangedEmployeeIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChangedEmployeeIds(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getChangedEmployeeIds operation in LastChangeInformationApi.
 * @export
 * @interface LastChangeInformationApiGetChangedEmployeeIdsRequest
 */
export type LastChangeInformationApiGetChangedEmployeeIdsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof LastChangeInformationApiGetChangedEmployeeIds
    */
    readonly companyDomain: string
    
    /**
    * URL encoded iso8601 timestamp
    * @type {string}
    * @memberof LastChangeInformationApiGetChangedEmployeeIds
    */
    readonly since: string
    
    /**
    * Use one of these in the {type} variable in the URL: \"inserted\", \"updated\", \"deleted\"
    * @type {string}
    * @memberof LastChangeInformationApiGetChangedEmployeeIds
    */
    readonly type?: string
    
}

/**
 * LastChangeInformationApiGenerated - object-oriented interface
 * @export
 * @class LastChangeInformationApiGenerated
 * @extends {BaseAPI}
 */
export class LastChangeInformationApiGenerated extends BaseAPI {
    /**
     * This API allows for efficient syncing of employee data. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY individual field in the employee record, as well as any change to the employment status, job info, or compensation tables, will cause that employee to be returned via this API.
     * @summary Gets all updated employee IDs
     * @param {LastChangeInformationApiGetChangedEmployeeIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LastChangeInformationApiGenerated
     */
    public getChangedEmployeeIds(requestParameters: LastChangeInformationApiGetChangedEmployeeIdsRequest, options?: AxiosRequestConfig) {
        return LastChangeInformationApiFp(this.configuration).getChangedEmployeeIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
