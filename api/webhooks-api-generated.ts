/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { NewWebHook } from '../models';
// @ts-ignore
import { NewWebHookFrequency } from '../models';
// @ts-ignore
import { NewWebHookLimit } from '../models';
// @ts-ignore
import { WebHookLogResponse } from '../models';
// @ts-ignore
import { WebHookResponse } from '../models';
// @ts-ignore
import { Webhook400Error } from '../models';
// @ts-ignore
import { Webhook403Error } from '../models';
// @ts-ignore
import { Webhook404Error } from '../models';
// @ts-ignore
import { Webhook500Error } from '../models';
// @ts-ignore
import { WebhooksAddNewWebhook403Response } from '../models';
// @ts-ignore
import { WebhooksAddNewWebhookResponse } from '../models';
// @ts-ignore
import { WebhooksGetUserListResponse } from '../models';
// @ts-ignore
import { WebhooksListMonitorFieldsResponse } from '../models';
// @ts-ignore
import { WebhooksUpdateWebhookByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).
         * @summary Add Webhook
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {NewWebHook} newWebHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWebhook: async (companyDomain: string, newWebHook: NewWebHook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addNewWebhook', 'companyDomain', companyDomain)
            // verify required parameter 'newWebHook' is not null or undefined
            assertParamExists('addNewWebhook', 'newWebHook', newWebHook)
            const localVarPath = `/{companyDomain}/v1/webhooks`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newWebHook,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newWebHook, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a webhook that is tied to a specific user API Key.
         * @summary Delete Webhook
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an webhook ID that is associated with the User API key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteWebhook', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteWebhook', 'id', id)
            const localVarPath = `/{companyDomain}/v1/webhooks/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets as list of webhooks for the user API key.
         * @summary Gets as list of webhooks for the user API key.
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getUserList', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/webhooks`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get webhook data that is tied to a specific user API Key.
         * @summary Get Webhook
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id The webhook ID to display details about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhook: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getUserWebhook', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserWebhook', 'id', id)
            const localVarPath = `/{companyDomain}/v1/webhooks/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get webhook logs for specific webhook id that is associated with the user API Key.
         * @summary Get Webhook Logs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id The webhook ID to get logs about.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogs: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getWebhookLogs', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWebhookLogs', 'id', id)
            const localVarPath = `/{companyDomain}/v1/webhooks/{id}/log`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks/{id}/log',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list fields webhooks can monitor monitor
         * @summary Get monitor fields
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonitorFields: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listMonitorFields', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/webhooks/monitor_fields`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks/monitor_fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a webhook, based on webhook ID.
         * @summary Update Webhook
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is a webhook ID.
         * @param {NewWebHook} newWebHook 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookById: async (companyDomain: string, id: string, newWebHook: NewWebHook, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateWebhookById', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateWebhookById', 'id', id)
            // verify required parameter 'newWebHook' is not null or undefined
            assertParamExists('updateWebhookById', 'newWebHook', newWebHook)
            const localVarPath = `/{companyDomain}/v1/webhooks/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newWebHook,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/webhooks/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newWebHook, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).
         * @summary Add Webhook
         * @param {WebhooksApiAddNewWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewWebhook(requestParameters: WebhooksApiAddNewWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksAddNewWebhookResponse>> {
            const newWebHook: NewWebHook = {
                name: requestParameters.name,
                monitorFields: requestParameters.monitorFields,
                postFields: requestParameters.postFields,
                url: requestParameters.url,
                format: requestParameters.format,
                frequency: requestParameters.frequency,
                limit: requestParameters.limit,
                includeCompanyDomain: requestParameters.includeCompanyDomain
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewWebhook(requestParameters.companyDomain, newWebHook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a webhook that is tied to a specific user API Key.
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWebhook(requestParameters: WebhooksApiDeleteWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteWebhook(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets as list of webhooks for the user API key.
         * @summary Gets as list of webhooks for the user API key.
         * @param {WebhooksApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(requestParameters: WebhooksApiGetUserListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksGetUserListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserList(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get webhook data that is tied to a specific user API Key.
         * @summary Get Webhook
         * @param {WebhooksApiGetUserWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserWebhook(requestParameters: WebhooksApiGetUserWebhookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHookResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserWebhook(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get webhook logs for specific webhook id that is associated with the user API Key.
         * @summary Get Webhook Logs
         * @param {WebhooksApiGetWebhookLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebhookLogs(requestParameters: WebhooksApiGetWebhookLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHookLogResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWebhookLogs(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list fields webhooks can monitor monitor
         * @summary Get monitor fields
         * @param {WebhooksApiListMonitorFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMonitorFields(requestParameters: WebhooksApiListMonitorFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhooksListMonitorFieldsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMonitorFields(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a webhook, based on webhook ID.
         * @summary Update Webhook
         * @param {WebhooksApiUpdateWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWebhookById(requestParameters: WebhooksApiUpdateWebhookByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebHookResponse>> {
            const newWebHook: NewWebHook = {
                name: requestParameters.name,
                monitorFields: requestParameters.monitorFields,
                postFields: requestParameters.postFields,
                url: requestParameters.url,
                format: requestParameters.format,
                frequency: requestParameters.frequency,
                limit: requestParameters.limit,
                includeCompanyDomain: requestParameters.includeCompanyDomain
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateWebhookById(requestParameters.companyDomain, requestParameters.id, newWebHook, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).
         * @summary Add Webhook
         * @param {WebhooksApiAddNewWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewWebhook(requestParameters: WebhooksApiAddNewWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksAddNewWebhookResponse> {
            return localVarFp.addNewWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a webhook that is tied to a specific user API Key.
         * @summary Delete Webhook
         * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWebhook(requestParameters: WebhooksApiDeleteWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets as list of webhooks for the user API key.
         * @summary Gets as list of webhooks for the user API key.
         * @param {WebhooksApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(requestParameters: WebhooksApiGetUserListRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksGetUserListResponse> {
            return localVarFp.getUserList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get webhook data that is tied to a specific user API Key.
         * @summary Get Webhook
         * @param {WebhooksApiGetUserWebhookRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserWebhook(requestParameters: WebhooksApiGetUserWebhookRequest, options?: AxiosRequestConfig): AxiosPromise<WebHookResponse> {
            return localVarFp.getUserWebhook(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get webhook logs for specific webhook id that is associated with the user API Key.
         * @summary Get Webhook Logs
         * @param {WebhooksApiGetWebhookLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebhookLogs(requestParameters: WebhooksApiGetWebhookLogsRequest, options?: AxiosRequestConfig): AxiosPromise<WebHookLogResponse> {
            return localVarFp.getWebhookLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list fields webhooks can monitor monitor
         * @summary Get monitor fields
         * @param {WebhooksApiListMonitorFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMonitorFields(requestParameters: WebhooksApiListMonitorFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<WebhooksListMonitorFieldsResponse> {
            return localVarFp.listMonitorFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a webhook, based on webhook ID.
         * @summary Update Webhook
         * @param {WebhooksApiUpdateWebhookByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWebhookById(requestParameters: WebhooksApiUpdateWebhookByIdRequest, options?: AxiosRequestConfig): AxiosPromise<WebHookResponse> {
            return localVarFp.updateWebhookById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addNewWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiAddNewWebhookRequest
 */
export type WebhooksApiAddNewWebhookRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiAddNewWebhook
    */
    readonly companyDomain: string
    
} & NewWebHook

/**
 * Request parameters for deleteWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiDeleteWebhookRequest
 */
export type WebhooksApiDeleteWebhookRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiDeleteWebhook
    */
    readonly companyDomain: string
    
    /**
    * {id} is an webhook ID that is associated with the User API key.
    * @type {string}
    * @memberof WebhooksApiDeleteWebhook
    */
    readonly id: string
    
}

/**
 * Request parameters for getUserList operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetUserListRequest
 */
export type WebhooksApiGetUserListRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiGetUserList
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getUserWebhook operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetUserWebhookRequest
 */
export type WebhooksApiGetUserWebhookRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiGetUserWebhook
    */
    readonly companyDomain: string
    
    /**
    * The webhook ID to display details about.
    * @type {string}
    * @memberof WebhooksApiGetUserWebhook
    */
    readonly id: string
    
}

/**
 * Request parameters for getWebhookLogs operation in WebhooksApi.
 * @export
 * @interface WebhooksApiGetWebhookLogsRequest
 */
export type WebhooksApiGetWebhookLogsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiGetWebhookLogs
    */
    readonly companyDomain: string
    
    /**
    * The webhook ID to get logs about.
    * @type {string}
    * @memberof WebhooksApiGetWebhookLogs
    */
    readonly id: string
    
}

/**
 * Request parameters for listMonitorFields operation in WebhooksApi.
 * @export
 * @interface WebhooksApiListMonitorFieldsRequest
 */
export type WebhooksApiListMonitorFieldsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiListMonitorFields
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for updateWebhookById operation in WebhooksApi.
 * @export
 * @interface WebhooksApiUpdateWebhookByIdRequest
 */
export type WebhooksApiUpdateWebhookByIdRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof WebhooksApiUpdateWebhookById
    */
    readonly companyDomain: string
    
    /**
    * {id} is a webhook ID.
    * @type {string}
    * @memberof WebhooksApiUpdateWebhookById
    */
    readonly id: string
    
} & NewWebHook

/**
 * WebhooksApiGenerated - object-oriented interface
 * @export
 * @class WebhooksApiGenerated
 * @extends {BaseAPI}
 */
export class WebhooksApiGenerated extends BaseAPI {
    /**
     * Add a new Webhook. For more details or instructions you can refer to the [webhooks API tutorial](https://documentation.bamboohr.com/docs/webhooks-api-permission-based).
     * @summary Add Webhook
     * @param {WebhooksApiAddNewWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public addNewWebhook(requestParameters: WebhooksApiAddNewWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).addNewWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a webhook that is tied to a specific user API Key.
     * @summary Delete Webhook
     * @param {WebhooksApiDeleteWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public deleteWebhook(requestParameters: WebhooksApiDeleteWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).deleteWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets as list of webhooks for the user API key.
     * @summary Gets as list of webhooks for the user API key.
     * @param {WebhooksApiGetUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getUserList(requestParameters: WebhooksApiGetUserListRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getUserList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get webhook data that is tied to a specific user API Key.
     * @summary Get Webhook
     * @param {WebhooksApiGetUserWebhookRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getUserWebhook(requestParameters: WebhooksApiGetUserWebhookRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getUserWebhook(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get webhook logs for specific webhook id that is associated with the user API Key.
     * @summary Get Webhook Logs
     * @param {WebhooksApiGetWebhookLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public getWebhookLogs(requestParameters: WebhooksApiGetWebhookLogsRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).getWebhookLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list fields webhooks can monitor monitor
     * @summary Get monitor fields
     * @param {WebhooksApiListMonitorFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public listMonitorFields(requestParameters: WebhooksApiListMonitorFieldsRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).listMonitorFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a webhook, based on webhook ID.
     * @summary Update Webhook
     * @param {WebhooksApiUpdateWebhookByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApiGenerated
     */
    public updateWebhookById(requestParameters: WebhooksApiUpdateWebhookByIdRequest, options?: AxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).updateWebhookById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
