/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeFileUpdate } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EmployeeFilesApi - axios parameter creator
 * @export
 */
export const EmployeeFilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an employee file category.
         * @summary Add Employee File Category
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (companyDomain: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addCategory', 'companyDomain', companyDomain)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('addCategory', 'requestBody', requestBody)
            const localVarPath = `/{companyDomain}/v1/employees/files/categories`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestBody,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/files/categories',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets an employee file
         * @summary Get an Employee File
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
         * @param {string} fileId {fileId} is the ID of the employee file being retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeFile: async (companyDomain: string, id: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeeFile', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeFile', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('getEmployeeFile', 'fileId', fileId)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/files/{fileId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/files/{fileId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lists employee files and categories
         * @summary List employee files and categories
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesAndCategories: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listFilesAndCategories', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listFilesAndCategories', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/files/view`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/files/view',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an employee file
         * @summary Delete Employee File
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
         * @param {string} fileId {fileId} is the ID of the employee file being deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile: async (companyDomain: string, id: string, fileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('removeFile', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('removeFile', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('removeFile', 'fileId', fileId)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/files/{fileId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/files/{fileId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an employee file
         * @summary Update Employee File
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
         * @param {string} fileId {fileId} is the ID of the employee file being updated.
         * @param {EmployeeFileUpdate} employeeFileUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeFile: async (companyDomain: string, id: string, fileId: string, employeeFileUpdate: EmployeeFileUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateEmployeeFile', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEmployeeFile', 'id', id)
            // verify required parameter 'fileId' is not null or undefined
            assertParamExists('updateEmployeeFile', 'fileId', fileId)
            // verify required parameter 'employeeFileUpdate' is not null or undefined
            assertParamExists('updateEmployeeFile', 'employeeFileUpdate', employeeFileUpdate)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/files/{fileId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"fileId"}}`, encodeURIComponent(String(fileId !== undefined ? fileId : `-fileId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeFileUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/files/{fileId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeFileUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an employee file
         * @summary Upload Employee File
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('uploadFile', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('uploadFile', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/files`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/files',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployeeFilesApi - functional programming interface
 * @export
 */
export const EmployeeFilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployeeFilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an employee file category.
         * @summary Add Employee File Category
         * @param {EmployeeFilesApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(requestParameters: EmployeeFilesApiAddCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const requestBody: Array<string> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(requestParameters.companyDomain, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets an employee file
         * @summary Get an Employee File
         * @param {EmployeeFilesApiGetEmployeeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeFile(requestParameters: EmployeeFilesApiGetEmployeeFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeFile(requestParameters.companyDomain, requestParameters.id, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Lists employee files and categories
         * @summary List employee files and categories
         * @param {EmployeeFilesApiListFilesAndCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFilesAndCategories(requestParameters: EmployeeFilesApiListFilesAndCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFilesAndCategories(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an employee file
         * @summary Delete Employee File
         * @param {EmployeeFilesApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFile(requestParameters: EmployeeFilesApiRemoveFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFile(requestParameters.companyDomain, requestParameters.id, requestParameters.fileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an employee file
         * @summary Update Employee File
         * @param {EmployeeFilesApiUpdateEmployeeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeFile(requestParameters: EmployeeFilesApiUpdateEmployeeFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeFileUpdate: EmployeeFileUpdate = {
                name: requestParameters.name,
                categoryId: requestParameters.categoryId,
                shareWithEmployee: requestParameters.shareWithEmployee
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeFile(requestParameters.companyDomain, requestParameters.id, requestParameters.fileId, employeeFileUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Upload an employee file
         * @summary Upload Employee File
         * @param {EmployeeFilesApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadFile(requestParameters: EmployeeFilesApiUploadFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFile(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployeeFilesApi - factory interface
 * @export
 */
export const EmployeeFilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployeeFilesApiFp(configuration)
    return {
        /**
         * Add an employee file category.
         * @summary Add Employee File Category
         * @param {EmployeeFilesApiAddCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(requestParameters: EmployeeFilesApiAddCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets an employee file
         * @summary Get an Employee File
         * @param {EmployeeFilesApiGetEmployeeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeFile(requestParameters: EmployeeFilesApiGetEmployeeFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Lists employee files and categories
         * @summary List employee files and categories
         * @param {EmployeeFilesApiListFilesAndCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFilesAndCategories(requestParameters: EmployeeFilesApiListFilesAndCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listFilesAndCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an employee file
         * @summary Delete Employee File
         * @param {EmployeeFilesApiRemoveFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFile(requestParameters: EmployeeFilesApiRemoveFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an employee file
         * @summary Update Employee File
         * @param {EmployeeFilesApiUpdateEmployeeFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeFile(requestParameters: EmployeeFilesApiUpdateEmployeeFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateEmployeeFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an employee file
         * @summary Upload Employee File
         * @param {EmployeeFilesApiUploadFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadFile(requestParameters: EmployeeFilesApiUploadFileRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.uploadFile(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCategory operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiAddCategoryRequest
 */
export type EmployeeFilesApiAddCategoryRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiAddCategory
    */
    readonly companyDomain: string
    /**
    * 
    * @type {Array<string>}
    * @memberof EmployeeFilesApiAddCategory
    */
    readonly requestBody: Array<string>
}

/**
 * Request parameters for getEmployeeFile operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiGetEmployeeFileRequest
 */
export type EmployeeFilesApiGetEmployeeFileRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiGetEmployeeFile
    */
    readonly companyDomain: string
    
    /**
    * {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
    * @type {string}
    * @memberof EmployeeFilesApiGetEmployeeFile
    */
    readonly id: string
    
    /**
    * {fileId} is the ID of the employee file being retrieved.
    * @type {string}
    * @memberof EmployeeFilesApiGetEmployeeFile
    */
    readonly fileId: string
    
}

/**
 * Request parameters for listFilesAndCategories operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiListFilesAndCategoriesRequest
 */
export type EmployeeFilesApiListFilesAndCategoriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiListFilesAndCategories
    */
    readonly companyDomain: string
    
    /**
    * {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
    * @type {string}
    * @memberof EmployeeFilesApiListFilesAndCategories
    */
    readonly id: string
    
}

/**
 * Request parameters for removeFile operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiRemoveFileRequest
 */
export type EmployeeFilesApiRemoveFileRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiRemoveFile
    */
    readonly companyDomain: string
    
    /**
    * {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
    * @type {string}
    * @memberof EmployeeFilesApiRemoveFile
    */
    readonly id: string
    
    /**
    * {fileId} is the ID of the employee file being deleted.
    * @type {string}
    * @memberof EmployeeFilesApiRemoveFile
    */
    readonly fileId: string
    
}

/**
 * Request parameters for updateEmployeeFile operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiUpdateEmployeeFileRequest
 */
export type EmployeeFilesApiUpdateEmployeeFileRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiUpdateEmployeeFile
    */
    readonly companyDomain: string
    
    /**
    * {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
    * @type {string}
    * @memberof EmployeeFilesApiUpdateEmployeeFile
    */
    readonly id: string
    
    /**
    * {fileId} is the ID of the employee file being updated.
    * @type {string}
    * @memberof EmployeeFilesApiUpdateEmployeeFile
    */
    readonly fileId: string
    
} & EmployeeFileUpdate

/**
 * Request parameters for uploadFile operation in EmployeeFilesApi.
 * @export
 * @interface EmployeeFilesApiUploadFileRequest
 */
export type EmployeeFilesApiUploadFileRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof EmployeeFilesApiUploadFile
    */
    readonly companyDomain: string
    
    /**
    * {id} is an employee ID. The special employee ID of zero (0) means to use the employee ID associated with the API key (if any).
    * @type {string}
    * @memberof EmployeeFilesApiUploadFile
    */
    readonly id: string
    
}

/**
 * EmployeeFilesApiGenerated - object-oriented interface
 * @export
 * @class EmployeeFilesApiGenerated
 * @extends {BaseAPI}
 */
export class EmployeeFilesApiGenerated extends BaseAPI {
    /**
     * Add an employee file category.
     * @summary Add Employee File Category
     * @param {EmployeeFilesApiAddCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public addCategory(requestParameters: EmployeeFilesApiAddCategoryRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).addCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets an employee file
     * @summary Get an Employee File
     * @param {EmployeeFilesApiGetEmployeeFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public getEmployeeFile(requestParameters: EmployeeFilesApiGetEmployeeFileRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).getEmployeeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Lists employee files and categories
     * @summary List employee files and categories
     * @param {EmployeeFilesApiListFilesAndCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public listFilesAndCategories(requestParameters: EmployeeFilesApiListFilesAndCategoriesRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).listFilesAndCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an employee file
     * @summary Delete Employee File
     * @param {EmployeeFilesApiRemoveFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public removeFile(requestParameters: EmployeeFilesApiRemoveFileRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).removeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an employee file
     * @summary Update Employee File
     * @param {EmployeeFilesApiUpdateEmployeeFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public updateEmployeeFile(requestParameters: EmployeeFilesApiUpdateEmployeeFileRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).updateEmployeeFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an employee file
     * @summary Upload Employee File
     * @param {EmployeeFilesApiUploadFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployeeFilesApiGenerated
     */
    public uploadFile(requestParameters: EmployeeFilesApiUploadFileRequest, options?: AxiosRequestConfig) {
        return EmployeeFilesApiFp(this.configuration).uploadFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
