/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PhotosApi - axios parameter creator
 * @export
 */
export const PhotosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get an employee photo
         * @summary Get an employee photo
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId The ID for the employee you are getting the photo for.
         * @param {'original' | 'large' | 'medium' | 'xs' | 'tiny'} size Photo size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePhoto: async (companyDomain: string, employeeId: string, size: 'original' | 'large' | 'medium' | 'xs' | 'tiny', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeePhoto', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeePhoto', 'employeeId', employeeId)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getEmployeePhoto', 'size', size)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/photo/{size}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"size"}}`, encodeURIComponent(String(size !== undefined ? size : `-size-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/photo/{size}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store a new employee photo
         * @summary Store a new employee photo
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId The ID for the employee you are setting the photo for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeNewEmployeePhoto: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('storeNewEmployeePhoto', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('storeNewEmployeePhoto', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/photo`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/photo',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotosApi - functional programming interface
 * @export
 */
export const PhotosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotosApiAxiosParamCreator(configuration)
    return {
        /**
         * Get an employee photo
         * @summary Get an employee photo
         * @param {PhotosApiGetEmployeePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeePhoto(requestParameters: PhotosApiGetEmployeePhotoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeePhoto(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Store a new employee photo
         * @summary Store a new employee photo
         * @param {PhotosApiStoreNewEmployeePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeNewEmployeePhoto(requestParameters: PhotosApiStoreNewEmployeePhotoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeNewEmployeePhoto(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PhotosApi - factory interface
 * @export
 */
export const PhotosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotosApiFp(configuration)
    return {
        /**
         * Get an employee photo
         * @summary Get an employee photo
         * @param {PhotosApiGetEmployeePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeePhoto(requestParameters: PhotosApiGetEmployeePhotoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeePhoto(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Store a new employee photo
         * @summary Store a new employee photo
         * @param {PhotosApiStoreNewEmployeePhotoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeNewEmployeePhoto(requestParameters: PhotosApiStoreNewEmployeePhotoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeNewEmployeePhoto(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEmployeePhoto operation in PhotosApi.
 * @export
 * @interface PhotosApiGetEmployeePhotoRequest
 */
export type PhotosApiGetEmployeePhotoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PhotosApiGetEmployeePhoto
    */
    readonly companyDomain: string
    
    /**
    * The ID for the employee you are getting the photo for.
    * @type {string}
    * @memberof PhotosApiGetEmployeePhoto
    */
    readonly employeeId: string
    
    /**
    * Photo size
    * @type {'original' | 'large' | 'medium' | 'xs' | 'tiny'}
    * @memberof PhotosApiGetEmployeePhoto
    */
    readonly size: 'original' | 'large' | 'medium' | 'xs' | 'tiny'
    
}

/**
 * Request parameters for storeNewEmployeePhoto operation in PhotosApi.
 * @export
 * @interface PhotosApiStoreNewEmployeePhotoRequest
 */
export type PhotosApiStoreNewEmployeePhotoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PhotosApiStoreNewEmployeePhoto
    */
    readonly companyDomain: string
    
    /**
    * The ID for the employee you are setting the photo for.
    * @type {string}
    * @memberof PhotosApiStoreNewEmployeePhoto
    */
    readonly employeeId: string
    
}

/**
 * PhotosApiGenerated - object-oriented interface
 * @export
 * @class PhotosApiGenerated
 * @extends {BaseAPI}
 */
export class PhotosApiGenerated extends BaseAPI {
    /**
     * Get an employee photo
     * @summary Get an employee photo
     * @param {PhotosApiGetEmployeePhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiGenerated
     */
    public getEmployeePhoto(requestParameters: PhotosApiGetEmployeePhotoRequest, options?: AxiosRequestConfig) {
        return PhotosApiFp(this.configuration).getEmployeePhoto(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Store a new employee photo
     * @summary Store a new employee photo
     * @param {PhotosApiStoreNewEmployeePhotoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApiGenerated
     */
    public storeNewEmployeePhoto(requestParameters: PhotosApiStoreNewEmployeePhotoRequest, options?: AxiosRequestConfig) {
        return PhotosApiFp(this.configuration).storeNewEmployeePhoto(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
