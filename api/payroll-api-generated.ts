/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EmployeeDeposit } from '../models';
// @ts-ignore
import { EmployeeDepositAccountsInner } from '../models';
// @ts-ignore
import { EmployeePaystub } from '../models';
// @ts-ignore
import { EmployeePaystubDeductionsInner } from '../models';
// @ts-ignore
import { EmployeePaystubDepositsInner } from '../models';
// @ts-ignore
import { EmployeePaystubTaxesInner } from '../models';
// @ts-ignore
import { EmployeePaystubWagesInner } from '../models';
// @ts-ignore
import { EmployeeUnpaidPaystub } from '../models';
// @ts-ignore
import { EmployeeUnpaidPaystubUnpaidPeriodsInner } from '../models';
// @ts-ignore
import { EmployeeWithholding } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PayrollApi - axios parameter creator
 * @export
 */
export const PayrollApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an employee\'s direct deposit information
         * @summary Add an employee\'s direct deposit information
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee id.
         * @param {EmployeeDeposit} employeeDeposit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeDirectDepositInfo: async (companyDomain: string, id: string, employeeDeposit: EmployeeDeposit, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeeDirectDepositInfo', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addEmployeeDirectDepositInfo', 'id', id)
            // verify required parameter 'employeeDeposit' is not null or undefined
            assertParamExists('addEmployeeDirectDepositInfo', 'employeeDeposit', employeeDeposit)
            const localVarPath = `/{companyDomain}/v1/employee_direct_deposit_accounts/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDeposit,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_direct_deposit_accounts/{id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDeposit, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an employee\'s paystub
         * @summary Add an employee\'s paystub
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {EmployeePaystub} employeePaystub 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeePaystub: async (companyDomain: string, employeePaystub: EmployeePaystub, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeePaystub', 'companyDomain', companyDomain)
            // verify required parameter 'employeePaystub' is not null or undefined
            assertParamExists('addEmployeePaystub', 'employeePaystub', employeePaystub)
            const localVarPath = `/{companyDomain}/v1/employee_pay_stub`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeePaystub,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_pay_stub',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeePaystub, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an employee\'s unpaid paystubs
         * @summary Add an employee\'s unpaid paystubs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {EmployeeUnpaidPaystub} employeeUnpaidPaystub 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeUnpaidPaystubs: async (companyDomain: string, employeeUnpaidPaystub: EmployeeUnpaidPaystub, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeeUnpaidPaystubs', 'companyDomain', companyDomain)
            // verify required parameter 'employeeUnpaidPaystub' is not null or undefined
            assertParamExists('addEmployeeUnpaidPaystubs', 'employeeUnpaidPaystub', employeeUnpaidPaystub)
            const localVarPath = `/{companyDomain}/v1/employee_unpaid_pay_stubs`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeUnpaidPaystub,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_unpaid_pay_stubs',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeUnpaidPaystub, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an employee\'s default withholdings
         * @summary Add an employee\'s default withholdings
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee id.
         * @param {EmployeeWithholding} employeeWithholding 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeWithholdings: async (companyDomain: string, id: string, employeeWithholding: EmployeeWithholding, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeeWithholdings', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addEmployeeWithholdings', 'id', id)
            // verify required parameter 'employeeWithholding' is not null or undefined
            assertParamExists('addEmployeeWithholdings', 'employeeWithholding', employeeWithholding)
            const localVarPath = `/{companyDomain}/v1/employee_withholding/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeWithholding,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_withholding/{id}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeWithholding, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear an employee\'s direct deposit information
         * @summary Clear an employee\'s direct deposit information
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeDirectDeposit: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clearEmployeeDirectDeposit', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clearEmployeeDirectDeposit', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_direct_deposit_accounts/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_direct_deposit_accounts/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear an employee\'s unpaid paystubs
         * @summary Clear an employee\'s unpaid paystubs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeUnpaidPaystubs: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clearEmployeeUnpaidPaystubs', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clearEmployeeUnpaidPaystubs', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clear an employee\'s default withholdings
         * @summary Clear an employee\'s default withholdings
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeWithholdings: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clearEmployeeWithholdings', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('clearEmployeeWithholdings', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_withholding/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_withholding/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an employee\'s paystub
         * @summary Delete an employee\'s paystub
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the paystub (record) ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeePaystub: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteEmployeePaystub', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmployeePaystub', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_pay_stub/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_pay_stub/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s direct deposit information
         * @summary Get an employee\'s direct deposit information
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDirectDepositInfo: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('employeeDirectDepositInfo', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employeeDirectDepositInfo', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_direct_deposit_accounts/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_direct_deposit_accounts/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s default withholdings
         * @summary Get an employee\'s default withholdings
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultWithholdings: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDefaultWithholdings', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDefaultWithholdings', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_withholding/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_withholding/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s paystub
         * @summary Get an employee\'s paystub
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the paystub (record) ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaystub: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getPaystub', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPaystub', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_pay_stub/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_pay_stub/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an employee\'s unpaid paystubs
         * @summary Get an employee\'s unpaid paystubs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpaidPaystubs: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getUnpaidPaystubs', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUnpaidPaystubs', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee_unpaid_pay_stubs/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PayrollApi - functional programming interface
 * @export
 */
export const PayrollApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PayrollApiAxiosParamCreator(configuration)
    return {
        /**
         * Add an employee\'s direct deposit information
         * @summary Add an employee\'s direct deposit information
         * @param {PayrollApiAddEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeDirectDepositInfo(requestParameters: PayrollApiAddEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeDeposit: EmployeeDeposit = {
                accounts: requestParameters.accounts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeDirectDepositInfo(requestParameters.companyDomain, requestParameters.id, employeeDeposit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an employee\'s paystub
         * @summary Add an employee\'s paystub
         * @param {PayrollApiAddEmployeePaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeePaystub(requestParameters: PayrollApiAddEmployeePaystubRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeePaystub: EmployeePaystub = {
                employeeId: requestParameters.employeeId,
                externalRecordId: requestParameters.externalRecordId,
                payPeriodFrom: requestParameters.payPeriodFrom,
                payPeriodTo: requestParameters.payPeriodTo,
                payDate: requestParameters.payDate,
                payorName: requestParameters.payorName,
                payorAdd1: requestParameters.payorAdd1,
                payorAdd2: requestParameters.payorAdd2,
                payorCity: requestParameters.payorCity,
                payorState: requestParameters.payorState,
                payorZip: requestParameters.payorZip,
                payeeName: requestParameters.payeeName,
                currencyCode: requestParameters.currencyCode,
                net: requestParameters.net,
                gross: requestParameters.gross,
                totalTaxes: requestParameters.totalTaxes,
                totalDeductions: requestParameters.totalDeductions,
                ytdNet: requestParameters.ytdNet,
                ytdGross: requestParameters.ytdGross,
                ytdTaxes: requestParameters.ytdTaxes,
                ytdDeductions: requestParameters.ytdDeductions,
                fedWitholding: requestParameters.fedWitholding,
                federalType: requestParameters.federalType,
                twoJobs: requestParameters.twoJobs,
                dependentsAmount: requestParameters.dependentsAmount,
                otherIncome: requestParameters.otherIncome,
                deductionsAmount: requestParameters.deductionsAmount,
                stateWithholding: requestParameters.stateWithholding,
                localWithholding: requestParameters.localWithholding,
                additionalFed: requestParameters.additionalFed,
                additionalState: requestParameters.additionalState,
                additionalLocal: requestParameters.additionalLocal,
                taxState: requestParameters.taxState,
                taxLocal: requestParameters.taxLocal,
                wages: requestParameters.wages,
                taxes: requestParameters.taxes,
                deductions: requestParameters.deductions,
                deposits: requestParameters.deposits
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeePaystub(requestParameters.companyDomain, employeePaystub, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an employee\'s unpaid paystubs
         * @summary Add an employee\'s unpaid paystubs
         * @param {PayrollApiAddEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeUnpaidPaystubs(requestParameters: PayrollApiAddEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeUnpaidPaystub: EmployeeUnpaidPaystub = {
                employeeId: requestParameters.employeeId,
                unpaidPeriods: requestParameters.unpaidPeriods
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeUnpaidPaystubs(requestParameters.companyDomain, employeeUnpaidPaystub, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an employee\'s default withholdings
         * @summary Add an employee\'s default withholdings
         * @param {PayrollApiAddEmployeeWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeWithholdings(requestParameters: PayrollApiAddEmployeeWithholdingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeWithholding: EmployeeWithholding = {
                fedWithholding: requestParameters.fedWithholding,
                stateWithholding: requestParameters.stateWithholding,
                localWithholding: requestParameters.localWithholding,
                additionalFed: requestParameters.additionalFed,
                additionalState: requestParameters.additionalState,
                additionalLocal: requestParameters.additionalLocal,
                taxState: requestParameters.taxState,
                taxLocal: requestParameters.taxLocal
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeWithholdings(requestParameters.companyDomain, requestParameters.id, employeeWithholding, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear an employee\'s direct deposit information
         * @summary Clear an employee\'s direct deposit information
         * @param {PayrollApiClearEmployeeDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearEmployeeDirectDeposit(requestParameters: PayrollApiClearEmployeeDirectDepositRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearEmployeeDirectDeposit(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear an employee\'s unpaid paystubs
         * @summary Clear an employee\'s unpaid paystubs
         * @param {PayrollApiClearEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearEmployeeUnpaidPaystubs(requestParameters: PayrollApiClearEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearEmployeeUnpaidPaystubs(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clear an employee\'s default withholdings
         * @summary Clear an employee\'s default withholdings
         * @param {PayrollApiClearEmployeeWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearEmployeeWithholdings(requestParameters: PayrollApiClearEmployeeWithholdingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearEmployeeWithholdings(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an employee\'s paystub
         * @summary Delete an employee\'s paystub
         * @param {PayrollApiDeleteEmployeePaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployeePaystub(requestParameters: PayrollApiDeleteEmployeePaystubRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployeePaystub(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s direct deposit information
         * @summary Get an employee\'s direct deposit information
         * @param {PayrollApiEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeDirectDepositInfo(requestParameters: PayrollApiEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeDirectDepositInfo(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s default withholdings
         * @summary Get an employee\'s default withholdings
         * @param {PayrollApiGetDefaultWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDefaultWithholdings(requestParameters: PayrollApiGetDefaultWithholdingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDefaultWithholdings(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s paystub
         * @summary Get an employee\'s paystub
         * @param {PayrollApiGetPaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaystub(requestParameters: PayrollApiGetPaystubRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaystub(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get an employee\'s unpaid paystubs
         * @summary Get an employee\'s unpaid paystubs
         * @param {PayrollApiGetUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnpaidPaystubs(requestParameters: PayrollApiGetUnpaidPaystubsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnpaidPaystubs(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PayrollApi - factory interface
 * @export
 */
export const PayrollApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PayrollApiFp(configuration)
    return {
        /**
         * Add an employee\'s direct deposit information
         * @summary Add an employee\'s direct deposit information
         * @param {PayrollApiAddEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeDirectDepositInfo(requestParameters: PayrollApiAddEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeeDirectDepositInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an employee\'s paystub
         * @summary Add an employee\'s paystub
         * @param {PayrollApiAddEmployeePaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeePaystub(requestParameters: PayrollApiAddEmployeePaystubRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeePaystub(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an employee\'s unpaid paystubs
         * @summary Add an employee\'s unpaid paystubs
         * @param {PayrollApiAddEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeUnpaidPaystubs(requestParameters: PayrollApiAddEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeeUnpaidPaystubs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an employee\'s default withholdings
         * @summary Add an employee\'s default withholdings
         * @param {PayrollApiAddEmployeeWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeWithholdings(requestParameters: PayrollApiAddEmployeeWithholdingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeeWithholdings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear an employee\'s direct deposit information
         * @summary Clear an employee\'s direct deposit information
         * @param {PayrollApiClearEmployeeDirectDepositRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeDirectDeposit(requestParameters: PayrollApiClearEmployeeDirectDepositRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearEmployeeDirectDeposit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear an employee\'s unpaid paystubs
         * @summary Clear an employee\'s unpaid paystubs
         * @param {PayrollApiClearEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeUnpaidPaystubs(requestParameters: PayrollApiClearEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearEmployeeUnpaidPaystubs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clear an employee\'s default withholdings
         * @summary Clear an employee\'s default withholdings
         * @param {PayrollApiClearEmployeeWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearEmployeeWithholdings(requestParameters: PayrollApiClearEmployeeWithholdingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clearEmployeeWithholdings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an employee\'s paystub
         * @summary Delete an employee\'s paystub
         * @param {PayrollApiDeleteEmployeePaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeePaystub(requestParameters: PayrollApiDeleteEmployeePaystubRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmployeePaystub(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s direct deposit information
         * @summary Get an employee\'s direct deposit information
         * @param {PayrollApiEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeDirectDepositInfo(requestParameters: PayrollApiEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employeeDirectDepositInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s default withholdings
         * @summary Get an employee\'s default withholdings
         * @param {PayrollApiGetDefaultWithholdingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDefaultWithholdings(requestParameters: PayrollApiGetDefaultWithholdingsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDefaultWithholdings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s paystub
         * @summary Get an employee\'s paystub
         * @param {PayrollApiGetPaystubRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaystub(requestParameters: PayrollApiGetPaystubRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPaystub(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an employee\'s unpaid paystubs
         * @summary Get an employee\'s unpaid paystubs
         * @param {PayrollApiGetUnpaidPaystubsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnpaidPaystubs(requestParameters: PayrollApiGetUnpaidPaystubsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUnpaidPaystubs(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addEmployeeDirectDepositInfo operation in PayrollApi.
 * @export
 * @interface PayrollApiAddEmployeeDirectDepositInfoRequest
 */
export type PayrollApiAddEmployeeDirectDepositInfoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiAddEmployeeDirectDepositInfo
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee id.
    * @type {string}
    * @memberof PayrollApiAddEmployeeDirectDepositInfo
    */
    readonly id: string
    
} & EmployeeDeposit

/**
 * Request parameters for addEmployeePaystub operation in PayrollApi.
 * @export
 * @interface PayrollApiAddEmployeePaystubRequest
 */
export type PayrollApiAddEmployeePaystubRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiAddEmployeePaystub
    */
    readonly companyDomain: string
    
} & EmployeePaystub

/**
 * Request parameters for addEmployeeUnpaidPaystubs operation in PayrollApi.
 * @export
 * @interface PayrollApiAddEmployeeUnpaidPaystubsRequest
 */
export type PayrollApiAddEmployeeUnpaidPaystubsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiAddEmployeeUnpaidPaystubs
    */
    readonly companyDomain: string
    
} & EmployeeUnpaidPaystub

/**
 * Request parameters for addEmployeeWithholdings operation in PayrollApi.
 * @export
 * @interface PayrollApiAddEmployeeWithholdingsRequest
 */
export type PayrollApiAddEmployeeWithholdingsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiAddEmployeeWithholdings
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee id.
    * @type {string}
    * @memberof PayrollApiAddEmployeeWithholdings
    */
    readonly id: string
    
} & EmployeeWithholding

/**
 * Request parameters for clearEmployeeDirectDeposit operation in PayrollApi.
 * @export
 * @interface PayrollApiClearEmployeeDirectDepositRequest
 */
export type PayrollApiClearEmployeeDirectDepositRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiClearEmployeeDirectDeposit
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof PayrollApiClearEmployeeDirectDeposit
    */
    readonly id: string
    
}

/**
 * Request parameters for clearEmployeeUnpaidPaystubs operation in PayrollApi.
 * @export
 * @interface PayrollApiClearEmployeeUnpaidPaystubsRequest
 */
export type PayrollApiClearEmployeeUnpaidPaystubsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiClearEmployeeUnpaidPaystubs
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee id.
    * @type {string}
    * @memberof PayrollApiClearEmployeeUnpaidPaystubs
    */
    readonly id: string
    
}

/**
 * Request parameters for clearEmployeeWithholdings operation in PayrollApi.
 * @export
 * @interface PayrollApiClearEmployeeWithholdingsRequest
 */
export type PayrollApiClearEmployeeWithholdingsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiClearEmployeeWithholdings
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee id.
    * @type {string}
    * @memberof PayrollApiClearEmployeeWithholdings
    */
    readonly id: string
    
}

/**
 * Request parameters for deleteEmployeePaystub operation in PayrollApi.
 * @export
 * @interface PayrollApiDeleteEmployeePaystubRequest
 */
export type PayrollApiDeleteEmployeePaystubRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiDeleteEmployeePaystub
    */
    readonly companyDomain: string
    
    /**
    * {id} is the paystub (record) ID.
    * @type {string}
    * @memberof PayrollApiDeleteEmployeePaystub
    */
    readonly id: string
    
}

/**
 * Request parameters for employeeDirectDepositInfo operation in PayrollApi.
 * @export
 * @interface PayrollApiEmployeeDirectDepositInfoRequest
 */
export type PayrollApiEmployeeDirectDepositInfoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiEmployeeDirectDepositInfo
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee.
    * @type {string}
    * @memberof PayrollApiEmployeeDirectDepositInfo
    */
    readonly id: string
    
}

/**
 * Request parameters for getDefaultWithholdings operation in PayrollApi.
 * @export
 * @interface PayrollApiGetDefaultWithholdingsRequest
 */
export type PayrollApiGetDefaultWithholdingsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiGetDefaultWithholdings
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee.
    * @type {string}
    * @memberof PayrollApiGetDefaultWithholdings
    */
    readonly id: string
    
}

/**
 * Request parameters for getPaystub operation in PayrollApi.
 * @export
 * @interface PayrollApiGetPaystubRequest
 */
export type PayrollApiGetPaystubRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiGetPaystub
    */
    readonly companyDomain: string
    
    /**
    * {id} is the paystub (record) ID.
    * @type {string}
    * @memberof PayrollApiGetPaystub
    */
    readonly id: string
    
}

/**
 * Request parameters for getUnpaidPaystubs operation in PayrollApi.
 * @export
 * @interface PayrollApiGetUnpaidPaystubsRequest
 */
export type PayrollApiGetUnpaidPaystubsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof PayrollApiGetUnpaidPaystubs
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee.
    * @type {string}
    * @memberof PayrollApiGetUnpaidPaystubs
    */
    readonly id: string
    
}

/**
 * PayrollApiGenerated - object-oriented interface
 * @export
 * @class PayrollApiGenerated
 * @extends {BaseAPI}
 */
export class PayrollApiGenerated extends BaseAPI {
    /**
     * Add an employee\'s direct deposit information
     * @summary Add an employee\'s direct deposit information
     * @param {PayrollApiAddEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addEmployeeDirectDepositInfo(requestParameters: PayrollApiAddEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addEmployeeDirectDepositInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an employee\'s paystub
     * @summary Add an employee\'s paystub
     * @param {PayrollApiAddEmployeePaystubRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addEmployeePaystub(requestParameters: PayrollApiAddEmployeePaystubRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addEmployeePaystub(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an employee\'s unpaid paystubs
     * @summary Add an employee\'s unpaid paystubs
     * @param {PayrollApiAddEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addEmployeeUnpaidPaystubs(requestParameters: PayrollApiAddEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addEmployeeUnpaidPaystubs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an employee\'s default withholdings
     * @summary Add an employee\'s default withholdings
     * @param {PayrollApiAddEmployeeWithholdingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public addEmployeeWithholdings(requestParameters: PayrollApiAddEmployeeWithholdingsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).addEmployeeWithholdings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear an employee\'s direct deposit information
     * @summary Clear an employee\'s direct deposit information
     * @param {PayrollApiClearEmployeeDirectDepositRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public clearEmployeeDirectDeposit(requestParameters: PayrollApiClearEmployeeDirectDepositRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).clearEmployeeDirectDeposit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear an employee\'s unpaid paystubs
     * @summary Clear an employee\'s unpaid paystubs
     * @param {PayrollApiClearEmployeeUnpaidPaystubsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public clearEmployeeUnpaidPaystubs(requestParameters: PayrollApiClearEmployeeUnpaidPaystubsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).clearEmployeeUnpaidPaystubs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clear an employee\'s default withholdings
     * @summary Clear an employee\'s default withholdings
     * @param {PayrollApiClearEmployeeWithholdingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public clearEmployeeWithholdings(requestParameters: PayrollApiClearEmployeeWithholdingsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).clearEmployeeWithholdings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an employee\'s paystub
     * @summary Delete an employee\'s paystub
     * @param {PayrollApiDeleteEmployeePaystubRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public deleteEmployeePaystub(requestParameters: PayrollApiDeleteEmployeePaystubRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).deleteEmployeePaystub(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s direct deposit information
     * @summary Get an employee\'s direct deposit information
     * @param {PayrollApiEmployeeDirectDepositInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public employeeDirectDepositInfo(requestParameters: PayrollApiEmployeeDirectDepositInfoRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).employeeDirectDepositInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s default withholdings
     * @summary Get an employee\'s default withholdings
     * @param {PayrollApiGetDefaultWithholdingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getDefaultWithholdings(requestParameters: PayrollApiGetDefaultWithholdingsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getDefaultWithholdings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s paystub
     * @summary Get an employee\'s paystub
     * @param {PayrollApiGetPaystubRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getPaystub(requestParameters: PayrollApiGetPaystubRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getPaystub(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get an employee\'s unpaid paystubs
     * @summary Get an employee\'s unpaid paystubs
     * @param {PayrollApiGetUnpaidPaystubsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayrollApiGenerated
     */
    public getUnpaidPaystubs(requestParameters: PayrollApiGetUnpaidPaystubsRequest, options?: AxiosRequestConfig) {
        return PayrollApiFp(this.configuration).getUnpaidPaystubs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
