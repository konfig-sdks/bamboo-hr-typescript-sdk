/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BenefitGroupEmployee } from '../models';
// @ts-ignore
import { BenefitsAddEmployeeBenefitRequest } from '../models';
// @ts-ignore
import { BenefitsAddNewCompanyBenefitRequest } from '../models';
// @ts-ignore
import { BenefitsUpdateCompanyBenefitRequest } from '../models';
// @ts-ignore
import { CompanyBenefitResponse } from '../models';
// @ts-ignore
import { CompanyBenefitType } from '../models';
// @ts-ignore
import { EmployeeBenefit } from '../models';
// @ts-ignore
import { EmployeeBenefitFilters } from '../models';
// @ts-ignore
import { EmployeeBenefitFiltersFilters } from '../models';
// @ts-ignore
import { EmployeeDependent } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BenefitsApi - axios parameter creator
 * @export
 */
export const BenefitsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a benefit group employee
         * @summary Add a benefit group employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {BenefitGroupEmployee} benefitGroupEmployee 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBenefitGroupEmployee: async (companyDomain: string, benefitGroupEmployee: BenefitGroupEmployee, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addBenefitGroupEmployee', 'companyDomain', companyDomain)
            // verify required parameter 'benefitGroupEmployee' is not null or undefined
            assertParamExists('addBenefitGroupEmployee', 'benefitGroupEmployee', benefitGroupEmployee)
            const localVarPath = `/{companyDomain}/v1/benefitgroupemployees`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: benefitGroupEmployee,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitgroupemployees',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(benefitGroupEmployee, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add an employee benefit
         * @summary Add an employee benefit
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {BenefitsAddEmployeeBenefitRequest} benefitsAddEmployeeBenefitRequest Employee Benefit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeBenefit: async (companyDomain: string, benefitsAddEmployeeBenefitRequest: BenefitsAddEmployeeBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEmployeeBenefit', 'companyDomain', companyDomain)
            // verify required parameter 'benefitsAddEmployeeBenefitRequest' is not null or undefined
            assertParamExists('addEmployeeBenefit', 'benefitsAddEmployeeBenefitRequest', benefitsAddEmployeeBenefitRequest)
            const localVarPath = `/{companyDomain}/v1/benefit/employee_benefit`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: benefitsAddEmployeeBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/employee_benefit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(benefitsAddEmployeeBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a new company benefit
         * @summary Add a new company benefit
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {BenefitsAddNewCompanyBenefitRequest} benefitsAddNewCompanyBenefitRequest 
         * @param {string} [description] Description
         * @param {string} [companyBenefitName] Name
         * @param {string} [benefitVendorId] Benefit vendor ID
         * @param {string} [benefitType] Benefit type
         * @param {string} [deductionTypeId] Deduction type ID
         * @param {string | Date} [startDate] Benefit start date
         * @param {string | Date} [endDate] Benefit end date
         * @param {string} [planUrl] Plan url
         * @param {string} [ssoLoginUrl] SSO login url
         * @param {string} [ssoLoginUrlLinkText] SSO login link text
         * @param {boolean} [safeHarbor] Is a safe harbor
         * @param {boolean} [meetAcaMin] Meets ACA minimum requirements
         * @param {number} [reimbursementAmount] Reimbursement amount
         * @param {string} [reimbursementFrequency] Reimbursement frequency
         * @param {string} [reimbursementCurrencyCode] Reimbursement currency code
         * @param {boolean} [minEssentialCoverage] Provides minimum essential coverage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCompanyBenefit: async (companyDomain: string, benefitsAddNewCompanyBenefitRequest: BenefitsAddNewCompanyBenefitRequest, description?: string, companyBenefitName?: string, benefitVendorId?: string, benefitType?: string, deductionTypeId?: string, startDate?: string | Date, endDate?: string | Date, planUrl?: string, ssoLoginUrl?: string, ssoLoginUrlLinkText?: string, safeHarbor?: boolean, meetAcaMin?: boolean, reimbursementAmount?: number, reimbursementFrequency?: string, reimbursementCurrencyCode?: string, minEssentialCoverage?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addNewCompanyBenefit', 'companyDomain', companyDomain)
            // verify required parameter 'benefitsAddNewCompanyBenefitRequest' is not null or undefined
            assertParamExists('addNewCompanyBenefit', 'benefitsAddNewCompanyBenefitRequest', benefitsAddNewCompanyBenefitRequest)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (description !== undefined) {
                await addFormParam('description', description, false, true)
            }
    
            if (companyBenefitName !== undefined) {
                await addFormParam('companyBenefitName', companyBenefitName, false, true)
            }
    
            if (benefitVendorId !== undefined) {
                await addFormParam('benefitVendorId', benefitVendorId, false, true)
            }
    
            if (benefitType !== undefined) {
                await addFormParam('benefitType', benefitType, false, true)
            }
    
            if (deductionTypeId !== undefined) {
                await addFormParam('deductionTypeId', deductionTypeId, false, true)
            }
    
            if (startDate !== undefined) {
                await addFormParam('startDate', startDate, false, true)
            }
    
            if (endDate !== undefined) {
                await addFormParam('endDate', endDate, false, true)
            }
    
            if (planUrl !== undefined) {
                await addFormParam('planUrl', planUrl, false, true)
            }
    
            if (ssoLoginUrl !== undefined) {
                await addFormParam('ssoLoginUrl', ssoLoginUrl, false, true)
            }
    
            if (ssoLoginUrlLinkText !== undefined) {
                await addFormParam('ssoLoginUrlLinkText', ssoLoginUrlLinkText, false, true)
            }
    
            if (safeHarbor !== undefined) {
                await addFormParam('safeHarbor', safeHarbor, false, true)
            }
    
            if (meetAcaMin !== undefined) {
                await addFormParam('meetAcaMin', meetAcaMin, false, true)
            }
    
            if (reimbursementAmount !== undefined) {
                await addFormParam('reimbursementAmount', reimbursementAmount, false, true)
            }
    
            if (reimbursementFrequency !== undefined) {
                await addFormParam('reimbursementFrequency', reimbursementFrequency, false, true)
            }
    
            if (reimbursementCurrencyCode !== undefined) {
                await addFormParam('reimbursementCurrencyCode', reimbursementCurrencyCode, false, true)
            }
    
            if (minEssentialCoverage !== undefined) {
                await addFormParam('minEssentialCoverage', minEssentialCoverage, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: benefitsAddNewCompanyBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(benefitsAddNewCompanyBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds an employee dependent
         * @summary Add an employee dependent
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {EmployeeDependent} employeeDependent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeDependent: async (companyDomain: string, employeeDependent: EmployeeDependent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createEmployeeDependent', 'companyDomain', companyDomain)
            // verify required parameter 'employeeDependent' is not null or undefined
            assertParamExists('createEmployeeDependent', 'employeeDependent', employeeDependent)
            const localVarPath = `/{companyDomain}/v1/employeedependents`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDependent,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employeedependents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDependent, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a company benefit
         * @summary Delete a company benefit
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the company benefit ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyBenefit: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteCompanyBenefit', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCompanyBenefit', 'id', id)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit/{id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit group employees
         * @summary Get benefit group employees
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitGroupEmployees: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getBenefitGroupEmployees', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitgroupemployees`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitgroupemployees',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit groups
         * @summary Get benefit groups
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitGroups: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getBenefitGroups', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitgroups`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitgroups',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit plan deductions by employee
         * @summary Get benefit plan deductions by employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitPlanDeductionsByEmployee: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getBenefitPlanDeductionsByEmployee', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBenefitPlanDeductionsByEmployee', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee/plans/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee/plans/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit plans
         * @summary Get benefit plans
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitPlans: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getBenefitPlans', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitplans`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitplans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a company benefit
         * @summary Get a company benefit
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the company benefit ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyBenefit: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCompanyBenefit', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCompanyBenefit', 'id', id)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit coverages
         * @summary Get benefit coverages
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverages: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCoverages', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitcoverages`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitcoverages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit deduction types
         * @summary Get benefit deduction types
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeductionTypesAll: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDeductionTypesAll', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefits/settings/deduction_types/all`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefits/settings/deduction_types/all',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get employee deductions by benefit plan
         * @summary Get employee deductions by benefit plan
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the benefit plan ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeductionsByPlan: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDeductionsByPlan', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDeductionsByPlan', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employee/deductions/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employee/deductions/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit deductions for employee
         * @summary Get benefit deductions for employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBenefitDeductions: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeeBenefitDeductions', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeBenefitDeductions', 'id', id)
            const localVarPath = `/{companyDomain}/v1/payroll/deductions/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/payroll/deductions/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get employee dependent
         * @summary Get employee dependent
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee dependent ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDependent: async (companyDomain: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeeDependent', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeDependent', 'id', id)
            const localVarPath = `/{companyDomain}/v1/employeedependents/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employeedependents/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit group plan costs
         * @summary Get benefit group plan costs
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPlanCosts: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getGroupPlanCosts', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitgroupplancosts`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitgroupplancosts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit group plans
         * @summary Get benefit group plans
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPlans: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getGroupPlans', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitgroupplans`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitgroupplans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get benefit plan coverages
         * @summary Get benefit plan coverages
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBenefitPlanCoverages: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listBenefitPlanCoverages', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefitplancoverages`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefitplancoverages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of company benefit types
         * @summary Get a list of company benefit types
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBenefitTypes: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listCompanyBenefitTypes', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit/type`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit/type',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of company benefits
         * @summary Get a list of company benefits
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBenefits: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listCompanyBenefits', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of employee benefits
         * @summary Get a list of employee benefits
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {EmployeeBenefitFilters} [employeeBenefitFilters] Employee Benefit Filters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeBenefits: async (companyDomain: string, employeeBenefitFilters?: EmployeeBenefitFilters, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeBenefits', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/benefit/employee_benefit`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeBenefitFilters,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/employee_benefit',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeBenefitFilters, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all employee dependents
         * @summary Get all employee dependents
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeid {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeDependents: async (companyDomain: string, employeeid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeDependents', 'companyDomain', companyDomain)
            // verify required parameter 'employeeid' is not null or undefined
            assertParamExists('listEmployeeDependents', 'employeeid', employeeid)
            const localVarPath = `/{companyDomain}/v1/employeedependents`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (employeeid !== undefined) {
                localVarQueryParameter['employeeid'] = employeeid;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employeedependents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a company benefit
         * @summary Update a company benefit
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the company benefit ID.
         * @param {BenefitsUpdateCompanyBenefitRequest} benefitsUpdateCompanyBenefitRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyBenefit: async (companyDomain: string, id: string, benefitsUpdateCompanyBenefitRequest: BenefitsUpdateCompanyBenefitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateCompanyBenefit', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateCompanyBenefit', 'id', id)
            // verify required parameter 'benefitsUpdateCompanyBenefitRequest' is not null or undefined
            assertParamExists('updateCompanyBenefit', 'benefitsUpdateCompanyBenefitRequest', benefitsUpdateCompanyBenefitRequest)
            const localVarPath = `/{companyDomain}/v1/benefit/company_benefit/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: benefitsUpdateCompanyBenefitRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/benefit/company_benefit/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(benefitsUpdateCompanyBenefitRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API allows you to change the information for a given dependent ID.
         * @summary Update an employee dependent
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee dependent ID.
         * @param {EmployeeDependent} employeeDependent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDependentInformation: async (companyDomain: string, id: string, employeeDependent: EmployeeDependent, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateDependentInformation', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDependentInformation', 'id', id)
            // verify required parameter 'employeeDependent' is not null or undefined
            assertParamExists('updateDependentInformation', 'employeeDependent', employeeDependent)
            const localVarPath = `/{companyDomain}/v1/employeedependents/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: employeeDependent,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employeedependents/{id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(employeeDependent, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BenefitsApi - functional programming interface
 * @export
 */
export const BenefitsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BenefitsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a benefit group employee
         * @summary Add a benefit group employee
         * @param {BenefitsApiAddBenefitGroupEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBenefitGroupEmployee(requestParameters: BenefitsApiAddBenefitGroupEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const benefitGroupEmployee: BenefitGroupEmployee = {
                benefitGroupId: requestParameters.benefitGroupId,
                employeeId: requestParameters.employeeId,
                startDate: requestParameters.startDate,
                endDate: requestParameters.endDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBenefitGroupEmployee(requestParameters.companyDomain, benefitGroupEmployee, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add an employee benefit
         * @summary Add an employee benefit
         * @param {BenefitsApiAddEmployeeBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEmployeeBenefit(requestParameters: BenefitsApiAddEmployeeBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const benefitsAddEmployeeBenefitRequest: BenefitsAddEmployeeBenefitRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEmployeeBenefit(requestParameters.companyDomain, benefitsAddEmployeeBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add a new company benefit
         * @summary Add a new company benefit
         * @param {BenefitsApiAddNewCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addNewCompanyBenefit(requestParameters: BenefitsApiAddNewCompanyBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefitResponse>> {
            const benefitsAddNewCompanyBenefitRequest: BenefitsAddNewCompanyBenefitRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addNewCompanyBenefit(requestParameters.companyDomain, benefitsAddNewCompanyBenefitRequest, requestParameters.description, requestParameters.companyBenefitName, requestParameters.benefitVendorId, requestParameters.benefitType, requestParameters.deductionTypeId, requestParameters.startDate, requestParameters.endDate, requestParameters.planUrl, requestParameters.ssoLoginUrl, requestParameters.ssoLoginUrlLinkText, requestParameters.safeHarbor, requestParameters.meetAcaMin, requestParameters.reimbursementAmount, requestParameters.reimbursementFrequency, requestParameters.reimbursementCurrencyCode, requestParameters.minEssentialCoverage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds an employee dependent
         * @summary Add an employee dependent
         * @param {BenefitsApiCreateEmployeeDependentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeDependent(requestParameters: BenefitsApiCreateEmployeeDependentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeDependent: EmployeeDependent = {
                employeeId: requestParameters.employeeId,
                firstName: requestParameters.firstName,
                middleName: requestParameters.middleName,
                lastName: requestParameters.lastName,
                relationship: requestParameters.relationship,
                gender: requestParameters.gender,
                ssn: requestParameters.ssn,
                dateOfBirth: requestParameters.dateOfBirth,
                addressLine1: requestParameters.addressLine1,
                addressLine2: requestParameters.addressLine2,
                city: requestParameters.city,
                state: requestParameters.state,
                zipCode: requestParameters.zipCode,
                homePhone: requestParameters.homePhone,
                country: requestParameters.country,
                isUsCitizen: requestParameters.isUsCitizen,
                isStudent: requestParameters.isStudent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeDependent(requestParameters.companyDomain, employeeDependent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a company benefit
         * @summary Delete a company benefit
         * @param {BenefitsApiDeleteCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCompanyBenefit(requestParameters: BenefitsApiDeleteCompanyBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCompanyBenefit(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit group employees
         * @summary Get benefit group employees
         * @param {BenefitsApiGetBenefitGroupEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBenefitGroupEmployees(requestParameters: BenefitsApiGetBenefitGroupEmployeesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBenefitGroupEmployees(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit groups
         * @summary Get benefit groups
         * @param {BenefitsApiGetBenefitGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBenefitGroups(requestParameters: BenefitsApiGetBenefitGroupsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBenefitGroups(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit plan deductions by employee
         * @summary Get benefit plan deductions by employee
         * @param {BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBenefitPlanDeductionsByEmployee(requestParameters: BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBenefitPlanDeductionsByEmployee(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit plans
         * @summary Get benefit plans
         * @param {BenefitsApiGetBenefitPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBenefitPlans(requestParameters: BenefitsApiGetBenefitPlansRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBenefitPlans(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a company benefit
         * @summary Get a company benefit
         * @param {BenefitsApiGetCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompanyBenefit(requestParameters: BenefitsApiGetCompanyBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompanyBenefit(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit coverages
         * @summary Get benefit coverages
         * @param {BenefitsApiGetCoveragesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCoverages(requestParameters: BenefitsApiGetCoveragesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCoverages(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit deduction types
         * @summary Get benefit deduction types
         * @param {BenefitsApiGetDeductionTypesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeductionTypesAll(requestParameters: BenefitsApiGetDeductionTypesAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeductionTypesAll(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get employee deductions by benefit plan
         * @summary Get employee deductions by benefit plan
         * @param {BenefitsApiGetDeductionsByPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeductionsByPlan(requestParameters: BenefitsApiGetDeductionsByPlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeductionsByPlan(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit deductions for employee
         * @summary Get benefit deductions for employee
         * @param {BenefitsApiGetEmployeeBenefitDeductionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeBenefitDeductions(requestParameters: BenefitsApiGetEmployeeBenefitDeductionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeBenefitDeductions(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get employee dependent
         * @summary Get employee dependent
         * @param {BenefitsApiGetEmployeeDependentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeDependent(requestParameters: BenefitsApiGetEmployeeDependentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeDependent(requestParameters.companyDomain, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit group plan costs
         * @summary Get benefit group plan costs
         * @param {BenefitsApiGetGroupPlanCostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPlanCosts(requestParameters: BenefitsApiGetGroupPlanCostsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupPlanCosts(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit group plans
         * @summary Get benefit group plans
         * @param {BenefitsApiGetGroupPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupPlans(requestParameters: BenefitsApiGetGroupPlansRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupPlans(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get benefit plan coverages
         * @summary Get benefit plan coverages
         * @param {BenefitsApiListBenefitPlanCoveragesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBenefitPlanCoverages(requestParameters: BenefitsApiListBenefitPlanCoveragesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBenefitPlanCoverages(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of company benefit types
         * @summary Get a list of company benefit types
         * @param {BenefitsApiListCompanyBenefitTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyBenefitTypes(requestParameters: BenefitsApiListCompanyBenefitTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyBenefitType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyBenefitTypes(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of company benefits
         * @summary Get a list of company benefits
         * @param {BenefitsApiListCompanyBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyBenefits(requestParameters: BenefitsApiListCompanyBenefitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CompanyBenefitResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyBenefits(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of employee benefits
         * @summary Get a list of employee benefits
         * @param {BenefitsApiListEmployeeBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeBenefits(requestParameters: BenefitsApiListEmployeeBenefitsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EmployeeBenefit>>> {
            const employeeBenefitFilters: EmployeeBenefitFilters = {
                filters: requestParameters.filters
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeBenefits(requestParameters.companyDomain, employeeBenefitFilters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all employee dependents
         * @summary Get all employee dependents
         * @param {BenefitsApiListEmployeeDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeDependents(requestParameters: BenefitsApiListEmployeeDependentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeDependents(requestParameters.companyDomain, requestParameters.employeeid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a company benefit
         * @summary Update a company benefit
         * @param {BenefitsApiUpdateCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCompanyBenefit(requestParameters: BenefitsApiUpdateCompanyBenefitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompanyBenefitResponse>> {
            const benefitsUpdateCompanyBenefitRequest: BenefitsUpdateCompanyBenefitRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCompanyBenefit(requestParameters.companyDomain, requestParameters.id, benefitsUpdateCompanyBenefitRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API allows you to change the information for a given dependent ID.
         * @summary Update an employee dependent
         * @param {BenefitsApiUpdateDependentInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDependentInformation(requestParameters: BenefitsApiUpdateDependentInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const employeeDependent: EmployeeDependent = {
                employeeId: requestParameters.employeeId,
                firstName: requestParameters.firstName,
                middleName: requestParameters.middleName,
                lastName: requestParameters.lastName,
                relationship: requestParameters.relationship,
                gender: requestParameters.gender,
                ssn: requestParameters.ssn,
                dateOfBirth: requestParameters.dateOfBirth,
                addressLine1: requestParameters.addressLine1,
                addressLine2: requestParameters.addressLine2,
                city: requestParameters.city,
                state: requestParameters.state,
                zipCode: requestParameters.zipCode,
                homePhone: requestParameters.homePhone,
                country: requestParameters.country,
                isUsCitizen: requestParameters.isUsCitizen,
                isStudent: requestParameters.isStudent
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDependentInformation(requestParameters.companyDomain, requestParameters.id, employeeDependent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BenefitsApi - factory interface
 * @export
 */
export const BenefitsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BenefitsApiFp(configuration)
    return {
        /**
         * Add a benefit group employee
         * @summary Add a benefit group employee
         * @param {BenefitsApiAddBenefitGroupEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBenefitGroupEmployee(requestParameters: BenefitsApiAddBenefitGroupEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addBenefitGroupEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add an employee benefit
         * @summary Add an employee benefit
         * @param {BenefitsApiAddEmployeeBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEmployeeBenefit(requestParameters: BenefitsApiAddEmployeeBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addEmployeeBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add a new company benefit
         * @summary Add a new company benefit
         * @param {BenefitsApiAddNewCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addNewCompanyBenefit(requestParameters: BenefitsApiAddNewCompanyBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefitResponse> {
            return localVarFp.addNewCompanyBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds an employee dependent
         * @summary Add an employee dependent
         * @param {BenefitsApiCreateEmployeeDependentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeDependent(requestParameters: BenefitsApiCreateEmployeeDependentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createEmployeeDependent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a company benefit
         * @summary Delete a company benefit
         * @param {BenefitsApiDeleteCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCompanyBenefit(requestParameters: BenefitsApiDeleteCompanyBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCompanyBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit group employees
         * @summary Get benefit group employees
         * @param {BenefitsApiGetBenefitGroupEmployeesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitGroupEmployees(requestParameters: BenefitsApiGetBenefitGroupEmployeesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBenefitGroupEmployees(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit groups
         * @summary Get benefit groups
         * @param {BenefitsApiGetBenefitGroupsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitGroups(requestParameters: BenefitsApiGetBenefitGroupsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBenefitGroups(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit plan deductions by employee
         * @summary Get benefit plan deductions by employee
         * @param {BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitPlanDeductionsByEmployee(requestParameters: BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBenefitPlanDeductionsByEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit plans
         * @summary Get benefit plans
         * @param {BenefitsApiGetBenefitPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBenefitPlans(requestParameters: BenefitsApiGetBenefitPlansRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBenefitPlans(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a company benefit
         * @summary Get a company benefit
         * @param {BenefitsApiGetCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompanyBenefit(requestParameters: BenefitsApiGetCompanyBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefitResponse> {
            return localVarFp.getCompanyBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit coverages
         * @summary Get benefit coverages
         * @param {BenefitsApiGetCoveragesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCoverages(requestParameters: BenefitsApiGetCoveragesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getCoverages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit deduction types
         * @summary Get benefit deduction types
         * @param {BenefitsApiGetDeductionTypesAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeductionTypesAll(requestParameters: BenefitsApiGetDeductionTypesAllRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDeductionTypesAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get employee deductions by benefit plan
         * @summary Get employee deductions by benefit plan
         * @param {BenefitsApiGetDeductionsByPlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeductionsByPlan(requestParameters: BenefitsApiGetDeductionsByPlanRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDeductionsByPlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit deductions for employee
         * @summary Get benefit deductions for employee
         * @param {BenefitsApiGetEmployeeBenefitDeductionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeBenefitDeductions(requestParameters: BenefitsApiGetEmployeeBenefitDeductionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeeBenefitDeductions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get employee dependent
         * @summary Get employee dependent
         * @param {BenefitsApiGetEmployeeDependentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeDependent(requestParameters: BenefitsApiGetEmployeeDependentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeeDependent(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit group plan costs
         * @summary Get benefit group plan costs
         * @param {BenefitsApiGetGroupPlanCostsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPlanCosts(requestParameters: BenefitsApiGetGroupPlanCostsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGroupPlanCosts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit group plans
         * @summary Get benefit group plans
         * @param {BenefitsApiGetGroupPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupPlans(requestParameters: BenefitsApiGetGroupPlansRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getGroupPlans(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get benefit plan coverages
         * @summary Get benefit plan coverages
         * @param {BenefitsApiListBenefitPlanCoveragesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBenefitPlanCoverages(requestParameters: BenefitsApiListBenefitPlanCoveragesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listBenefitPlanCoverages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of company benefit types
         * @summary Get a list of company benefit types
         * @param {BenefitsApiListCompanyBenefitTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBenefitTypes(requestParameters: BenefitsApiListCompanyBenefitTypesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyBenefitType>> {
            return localVarFp.listCompanyBenefitTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of company benefits
         * @summary Get a list of company benefits
         * @param {BenefitsApiListCompanyBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyBenefits(requestParameters: BenefitsApiListCompanyBenefitsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CompanyBenefitResponse>> {
            return localVarFp.listCompanyBenefits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of employee benefits
         * @summary Get a list of employee benefits
         * @param {BenefitsApiListEmployeeBenefitsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeBenefits(requestParameters: BenefitsApiListEmployeeBenefitsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<EmployeeBenefit>> {
            return localVarFp.listEmployeeBenefits(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all employee dependents
         * @summary Get all employee dependents
         * @param {BenefitsApiListEmployeeDependentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeDependents(requestParameters: BenefitsApiListEmployeeDependentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listEmployeeDependents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a company benefit
         * @summary Update a company benefit
         * @param {BenefitsApiUpdateCompanyBenefitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCompanyBenefit(requestParameters: BenefitsApiUpdateCompanyBenefitRequest, options?: AxiosRequestConfig): AxiosPromise<CompanyBenefitResponse> {
            return localVarFp.updateCompanyBenefit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API allows you to change the information for a given dependent ID.
         * @summary Update an employee dependent
         * @param {BenefitsApiUpdateDependentInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDependentInformation(requestParameters: BenefitsApiUpdateDependentInformationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateDependentInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addBenefitGroupEmployee operation in BenefitsApi.
 * @export
 * @interface BenefitsApiAddBenefitGroupEmployeeRequest
 */
export type BenefitsApiAddBenefitGroupEmployeeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiAddBenefitGroupEmployee
    */
    readonly companyDomain: string
    
} & BenefitGroupEmployee

/**
 * Request parameters for addEmployeeBenefit operation in BenefitsApi.
 * @export
 * @interface BenefitsApiAddEmployeeBenefitRequest
 */
export type BenefitsApiAddEmployeeBenefitRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiAddEmployeeBenefit
    */
    readonly companyDomain: string
    
} & BenefitsAddEmployeeBenefitRequest

/**
 * Request parameters for addNewCompanyBenefit operation in BenefitsApi.
 * @export
 * @interface BenefitsApiAddNewCompanyBenefitRequest
 */
export type BenefitsApiAddNewCompanyBenefitRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly companyDomain: string
    
    /**
    * Description
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly description?: string
    
    /**
    * Name
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly companyBenefitName?: string
    
    /**
    * Benefit vendor ID
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly benefitVendorId?: string
    
    /**
    * Benefit type
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly benefitType?: string
    
    /**
    * Deduction type ID
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly deductionTypeId?: string
    
    /**
    * Benefit start date
    * @type {string | Date}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly startDate?: string | Date
    
    /**
    * Benefit end date
    * @type {string | Date}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly endDate?: string | Date
    
    /**
    * Plan url
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly planUrl?: string
    
    /**
    * SSO login url
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly ssoLoginUrl?: string
    
    /**
    * SSO login link text
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly ssoLoginUrlLinkText?: string
    
    /**
    * Is a safe harbor
    * @type {boolean}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly safeHarbor?: boolean
    
    /**
    * Meets ACA minimum requirements
    * @type {boolean}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly meetAcaMin?: boolean
    
    /**
    * Reimbursement amount
    * @type {number}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly reimbursementAmount?: number
    
    /**
    * Reimbursement frequency
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly reimbursementFrequency?: string
    
    /**
    * Reimbursement currency code
    * @type {string}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly reimbursementCurrencyCode?: string
    
    /**
    * Provides minimum essential coverage
    * @type {boolean}
    * @memberof BenefitsApiAddNewCompanyBenefit
    */
    readonly minEssentialCoverage?: boolean
    
} & BenefitsAddNewCompanyBenefitRequest

/**
 * Request parameters for createEmployeeDependent operation in BenefitsApi.
 * @export
 * @interface BenefitsApiCreateEmployeeDependentRequest
 */
export type BenefitsApiCreateEmployeeDependentRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiCreateEmployeeDependent
    */
    readonly companyDomain: string
    
} & EmployeeDependent

/**
 * Request parameters for deleteCompanyBenefit operation in BenefitsApi.
 * @export
 * @interface BenefitsApiDeleteCompanyBenefitRequest
 */
export type BenefitsApiDeleteCompanyBenefitRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiDeleteCompanyBenefit
    */
    readonly companyDomain: string
    
    /**
    * {id} is the company benefit ID.
    * @type {string}
    * @memberof BenefitsApiDeleteCompanyBenefit
    */
    readonly id: string
    
}

/**
 * Request parameters for getBenefitGroupEmployees operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetBenefitGroupEmployeesRequest
 */
export type BenefitsApiGetBenefitGroupEmployeesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetBenefitGroupEmployees
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getBenefitGroups operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetBenefitGroupsRequest
 */
export type BenefitsApiGetBenefitGroupsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetBenefitGroups
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getBenefitPlanDeductionsByEmployee operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest
 */
export type BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetBenefitPlanDeductionsByEmployee
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof BenefitsApiGetBenefitPlanDeductionsByEmployee
    */
    readonly id: string
    
}

/**
 * Request parameters for getBenefitPlans operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetBenefitPlansRequest
 */
export type BenefitsApiGetBenefitPlansRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetBenefitPlans
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getCompanyBenefit operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetCompanyBenefitRequest
 */
export type BenefitsApiGetCompanyBenefitRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetCompanyBenefit
    */
    readonly companyDomain: string
    
    /**
    * {id} is the company benefit ID.
    * @type {string}
    * @memberof BenefitsApiGetCompanyBenefit
    */
    readonly id: string
    
}

/**
 * Request parameters for getCoverages operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetCoveragesRequest
 */
export type BenefitsApiGetCoveragesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetCoverages
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getDeductionTypesAll operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetDeductionTypesAllRequest
 */
export type BenefitsApiGetDeductionTypesAllRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetDeductionTypesAll
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getDeductionsByPlan operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetDeductionsByPlanRequest
 */
export type BenefitsApiGetDeductionsByPlanRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetDeductionsByPlan
    */
    readonly companyDomain: string
    
    /**
    * {id} is the benefit plan ID.
    * @type {string}
    * @memberof BenefitsApiGetDeductionsByPlan
    */
    readonly id: string
    
}

/**
 * Request parameters for getEmployeeBenefitDeductions operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetEmployeeBenefitDeductionsRequest
 */
export type BenefitsApiGetEmployeeBenefitDeductionsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetEmployeeBenefitDeductions
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof BenefitsApiGetEmployeeBenefitDeductions
    */
    readonly id: string
    
}

/**
 * Request parameters for getEmployeeDependent operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetEmployeeDependentRequest
 */
export type BenefitsApiGetEmployeeDependentRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetEmployeeDependent
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee dependent ID.
    * @type {string}
    * @memberof BenefitsApiGetEmployeeDependent
    */
    readonly id: string
    
}

/**
 * Request parameters for getGroupPlanCosts operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetGroupPlanCostsRequest
 */
export type BenefitsApiGetGroupPlanCostsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetGroupPlanCosts
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getGroupPlans operation in BenefitsApi.
 * @export
 * @interface BenefitsApiGetGroupPlansRequest
 */
export type BenefitsApiGetGroupPlansRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiGetGroupPlans
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for listBenefitPlanCoverages operation in BenefitsApi.
 * @export
 * @interface BenefitsApiListBenefitPlanCoveragesRequest
 */
export type BenefitsApiListBenefitPlanCoveragesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiListBenefitPlanCoverages
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for listCompanyBenefitTypes operation in BenefitsApi.
 * @export
 * @interface BenefitsApiListCompanyBenefitTypesRequest
 */
export type BenefitsApiListCompanyBenefitTypesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiListCompanyBenefitTypes
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for listCompanyBenefits operation in BenefitsApi.
 * @export
 * @interface BenefitsApiListCompanyBenefitsRequest
 */
export type BenefitsApiListCompanyBenefitsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiListCompanyBenefits
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for listEmployeeBenefits operation in BenefitsApi.
 * @export
 * @interface BenefitsApiListEmployeeBenefitsRequest
 */
export type BenefitsApiListEmployeeBenefitsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiListEmployeeBenefits
    */
    readonly companyDomain: string
    
} & EmployeeBenefitFilters

/**
 * Request parameters for listEmployeeDependents operation in BenefitsApi.
 * @export
 * @interface BenefitsApiListEmployeeDependentsRequest
 */
export type BenefitsApiListEmployeeDependentsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiListEmployeeDependents
    */
    readonly companyDomain: string
    
    /**
    * {employeeid} is the employee ID. Supplying this ID limits the response to the specific employee.
    * @type {string}
    * @memberof BenefitsApiListEmployeeDependents
    */
    readonly employeeid: string
    
}

/**
 * Request parameters for updateCompanyBenefit operation in BenefitsApi.
 * @export
 * @interface BenefitsApiUpdateCompanyBenefitRequest
 */
export type BenefitsApiUpdateCompanyBenefitRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiUpdateCompanyBenefit
    */
    readonly companyDomain: string
    
    /**
    * {id} is the company benefit ID.
    * @type {string}
    * @memberof BenefitsApiUpdateCompanyBenefit
    */
    readonly id: string
    
} & BenefitsUpdateCompanyBenefitRequest

/**
 * Request parameters for updateDependentInformation operation in BenefitsApi.
 * @export
 * @interface BenefitsApiUpdateDependentInformationRequest
 */
export type BenefitsApiUpdateDependentInformationRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof BenefitsApiUpdateDependentInformation
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee dependent ID.
    * @type {string}
    * @memberof BenefitsApiUpdateDependentInformation
    */
    readonly id: string
    
} & EmployeeDependent

/**
 * BenefitsApiGenerated - object-oriented interface
 * @export
 * @class BenefitsApiGenerated
 * @extends {BaseAPI}
 */
export class BenefitsApiGenerated extends BaseAPI {
    /**
     * Add a benefit group employee
     * @summary Add a benefit group employee
     * @param {BenefitsApiAddBenefitGroupEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public addBenefitGroupEmployee(requestParameters: BenefitsApiAddBenefitGroupEmployeeRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).addBenefitGroupEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add an employee benefit
     * @summary Add an employee benefit
     * @param {BenefitsApiAddEmployeeBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public addEmployeeBenefit(requestParameters: BenefitsApiAddEmployeeBenefitRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).addEmployeeBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add a new company benefit
     * @summary Add a new company benefit
     * @param {BenefitsApiAddNewCompanyBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public addNewCompanyBenefit(requestParameters: BenefitsApiAddNewCompanyBenefitRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).addNewCompanyBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds an employee dependent
     * @summary Add an employee dependent
     * @param {BenefitsApiCreateEmployeeDependentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public createEmployeeDependent(requestParameters: BenefitsApiCreateEmployeeDependentRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).createEmployeeDependent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a company benefit
     * @summary Delete a company benefit
     * @param {BenefitsApiDeleteCompanyBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public deleteCompanyBenefit(requestParameters: BenefitsApiDeleteCompanyBenefitRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).deleteCompanyBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit group employees
     * @summary Get benefit group employees
     * @param {BenefitsApiGetBenefitGroupEmployeesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getBenefitGroupEmployees(requestParameters: BenefitsApiGetBenefitGroupEmployeesRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getBenefitGroupEmployees(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit groups
     * @summary Get benefit groups
     * @param {BenefitsApiGetBenefitGroupsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getBenefitGroups(requestParameters: BenefitsApiGetBenefitGroupsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getBenefitGroups(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit plan deductions by employee
     * @summary Get benefit plan deductions by employee
     * @param {BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getBenefitPlanDeductionsByEmployee(requestParameters: BenefitsApiGetBenefitPlanDeductionsByEmployeeRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getBenefitPlanDeductionsByEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit plans
     * @summary Get benefit plans
     * @param {BenefitsApiGetBenefitPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getBenefitPlans(requestParameters: BenefitsApiGetBenefitPlansRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getBenefitPlans(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a company benefit
     * @summary Get a company benefit
     * @param {BenefitsApiGetCompanyBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getCompanyBenefit(requestParameters: BenefitsApiGetCompanyBenefitRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getCompanyBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit coverages
     * @summary Get benefit coverages
     * @param {BenefitsApiGetCoveragesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getCoverages(requestParameters: BenefitsApiGetCoveragesRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getCoverages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit deduction types
     * @summary Get benefit deduction types
     * @param {BenefitsApiGetDeductionTypesAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getDeductionTypesAll(requestParameters: BenefitsApiGetDeductionTypesAllRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getDeductionTypesAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get employee deductions by benefit plan
     * @summary Get employee deductions by benefit plan
     * @param {BenefitsApiGetDeductionsByPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getDeductionsByPlan(requestParameters: BenefitsApiGetDeductionsByPlanRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getDeductionsByPlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit deductions for employee
     * @summary Get benefit deductions for employee
     * @param {BenefitsApiGetEmployeeBenefitDeductionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getEmployeeBenefitDeductions(requestParameters: BenefitsApiGetEmployeeBenefitDeductionsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getEmployeeBenefitDeductions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get employee dependent
     * @summary Get employee dependent
     * @param {BenefitsApiGetEmployeeDependentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getEmployeeDependent(requestParameters: BenefitsApiGetEmployeeDependentRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getEmployeeDependent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit group plan costs
     * @summary Get benefit group plan costs
     * @param {BenefitsApiGetGroupPlanCostsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getGroupPlanCosts(requestParameters: BenefitsApiGetGroupPlanCostsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getGroupPlanCosts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit group plans
     * @summary Get benefit group plans
     * @param {BenefitsApiGetGroupPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public getGroupPlans(requestParameters: BenefitsApiGetGroupPlansRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).getGroupPlans(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get benefit plan coverages
     * @summary Get benefit plan coverages
     * @param {BenefitsApiListBenefitPlanCoveragesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public listBenefitPlanCoverages(requestParameters: BenefitsApiListBenefitPlanCoveragesRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).listBenefitPlanCoverages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of company benefit types
     * @summary Get a list of company benefit types
     * @param {BenefitsApiListCompanyBenefitTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public listCompanyBenefitTypes(requestParameters: BenefitsApiListCompanyBenefitTypesRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).listCompanyBenefitTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of company benefits
     * @summary Get a list of company benefits
     * @param {BenefitsApiListCompanyBenefitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public listCompanyBenefits(requestParameters: BenefitsApiListCompanyBenefitsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).listCompanyBenefits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of employee benefits
     * @summary Get a list of employee benefits
     * @param {BenefitsApiListEmployeeBenefitsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public listEmployeeBenefits(requestParameters: BenefitsApiListEmployeeBenefitsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).listEmployeeBenefits(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all employee dependents
     * @summary Get all employee dependents
     * @param {BenefitsApiListEmployeeDependentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public listEmployeeDependents(requestParameters: BenefitsApiListEmployeeDependentsRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).listEmployeeDependents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a company benefit
     * @summary Update a company benefit
     * @param {BenefitsApiUpdateCompanyBenefitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public updateCompanyBenefit(requestParameters: BenefitsApiUpdateCompanyBenefitRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).updateCompanyBenefit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API allows you to change the information for a given dependent ID.
     * @summary Update an employee dependent
     * @param {BenefitsApiUpdateDependentInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BenefitsApiGenerated
     */
    public updateDependentInformation(requestParameters: BenefitsApiUpdateDependentInformationRequest, options?: AxiosRequestConfig) {
        return BenefitsApiFp(this.configuration).updateDependentInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
