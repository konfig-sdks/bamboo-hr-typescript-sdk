/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ListFieldValues } from '../models';
// @ts-ignore
import { ListFieldValuesOptionsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AccountInformationApi - axios parameter creator
 * @export
 */
export const AccountInformationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint can help discover table fields available in your BambooHR account.
         * @summary Get a list of tabular fields
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverTableFields: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('discoverTableFields', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/tables`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/tables',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can help with discovery of fields that are available in an account.
         * @summary Get a list of fields
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldList: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getFieldList', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/fields`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/fields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return details for all list fields. Lists that can be edited will have the \"manageable\" attribute set to yes. Lists with the \"multiple\" attribute set to yes are fields that can have multiple values. Options with the \"archived\" attribute set to yes should not appear as current options, but are included so that historical data can reference the value.
         * @summary Get details for list fields
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListFields: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getListFields', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/lists`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/lists',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a List of Users
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getUserList', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/users`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/users',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \"id\" attribute.
         * @summary Add or Update Values for List Fields
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} listFieldId 
         * @param {ListFieldValues} listFieldValues 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListFieldValues: async (companyDomain: string, listFieldId: string, listFieldValues: ListFieldValues, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateListFieldValues', 'companyDomain', companyDomain)
            // verify required parameter 'listFieldId' is not null or undefined
            assertParamExists('updateListFieldValues', 'listFieldId', listFieldId)
            // verify required parameter 'listFieldValues' is not null or undefined
            assertParamExists('updateListFieldValues', 'listFieldValues', listFieldValues)
            const localVarPath = `/{companyDomain}/v1/meta/lists/{listFieldId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"listFieldId"}}`, encodeURIComponent(String(listFieldId !== undefined ? listFieldId : `-listFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: listFieldValues,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/lists/{listFieldId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(listFieldValues, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountInformationApi - functional programming interface
 * @export
 */
export const AccountInformationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccountInformationApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint can help discover table fields available in your BambooHR account.
         * @summary Get a list of tabular fields
         * @param {AccountInformationApiDiscoverTableFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async discoverTableFields(requestParameters: AccountInformationApiDiscoverTableFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.discoverTableFields(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint can help with discovery of fields that are available in an account.
         * @summary Get a list of fields
         * @param {AccountInformationApiGetFieldListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFieldList(requestParameters: AccountInformationApiGetFieldListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFieldList(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will return details for all list fields. Lists that can be edited will have the \"manageable\" attribute set to yes. Lists with the \"multiple\" attribute set to yes are fields that can have multiple values. Options with the \"archived\" attribute set to yes should not appear as current options, but are included so that historical data can reference the value.
         * @summary Get details for list fields
         * @param {AccountInformationApiGetListFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListFields(requestParameters: AccountInformationApiGetListFieldsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListFields(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a List of Users
         * @param {AccountInformationApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(requestParameters: AccountInformationApiGetUserListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserList(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \"id\" attribute.
         * @summary Add or Update Values for List Fields
         * @param {AccountInformationApiUpdateListFieldValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateListFieldValues(requestParameters: AccountInformationApiUpdateListFieldValuesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const listFieldValues: ListFieldValues = {
                options: requestParameters.options
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateListFieldValues(requestParameters.companyDomain, requestParameters.listFieldId, listFieldValues, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccountInformationApi - factory interface
 * @export
 */
export const AccountInformationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccountInformationApiFp(configuration)
    return {
        /**
         * This endpoint can help discover table fields available in your BambooHR account.
         * @summary Get a list of tabular fields
         * @param {AccountInformationApiDiscoverTableFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        discoverTableFields(requestParameters: AccountInformationApiDiscoverTableFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.discoverTableFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can help with discovery of fields that are available in an account.
         * @summary Get a list of fields
         * @param {AccountInformationApiGetFieldListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFieldList(requestParameters: AccountInformationApiGetFieldListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getFieldList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return details for all list fields. Lists that can be edited will have the \"manageable\" attribute set to yes. Lists with the \"multiple\" attribute set to yes are fields that can have multiple values. Options with the \"archived\" attribute set to yes should not appear as current options, but are included so that historical data can reference the value.
         * @summary Get details for list fields
         * @param {AccountInformationApiGetListFieldsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListFields(requestParameters: AccountInformationApiGetListFieldsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getListFields(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a List of Users
         * @param {AccountInformationApiGetUserListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(requestParameters: AccountInformationApiGetUserListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getUserList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \"id\" attribute.
         * @summary Add or Update Values for List Fields
         * @param {AccountInformationApiUpdateListFieldValuesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListFieldValues(requestParameters: AccountInformationApiUpdateListFieldValuesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateListFieldValues(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for discoverTableFields operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiDiscoverTableFieldsRequest
 */
export type AccountInformationApiDiscoverTableFieldsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof AccountInformationApiDiscoverTableFields
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getFieldList operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetFieldListRequest
 */
export type AccountInformationApiGetFieldListRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof AccountInformationApiGetFieldList
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getListFields operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetListFieldsRequest
 */
export type AccountInformationApiGetListFieldsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof AccountInformationApiGetListFields
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getUserList operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiGetUserListRequest
 */
export type AccountInformationApiGetUserListRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof AccountInformationApiGetUserList
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for updateListFieldValues operation in AccountInformationApi.
 * @export
 * @interface AccountInformationApiUpdateListFieldValuesRequest
 */
export type AccountInformationApiUpdateListFieldValuesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof AccountInformationApiUpdateListFieldValues
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof AccountInformationApiUpdateListFieldValues
    */
    readonly listFieldId: string
    
} & ListFieldValues

/**
 * AccountInformationApiGenerated - object-oriented interface
 * @export
 * @class AccountInformationApiGenerated
 * @extends {BaseAPI}
 */
export class AccountInformationApiGenerated extends BaseAPI {
    /**
     * This endpoint can help discover table fields available in your BambooHR account.
     * @summary Get a list of tabular fields
     * @param {AccountInformationApiDiscoverTableFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public discoverTableFields(requestParameters: AccountInformationApiDiscoverTableFieldsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).discoverTableFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint can help with discovery of fields that are available in an account.
     * @summary Get a list of fields
     * @param {AccountInformationApiGetFieldListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getFieldList(requestParameters: AccountInformationApiGetFieldListRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getFieldList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will return details for all list fields. Lists that can be edited will have the \"manageable\" attribute set to yes. Lists with the \"multiple\" attribute set to yes are fields that can have multiple values. Options with the \"archived\" attribute set to yes should not appear as current options, but are included so that historical data can reference the value.
     * @summary Get details for list fields
     * @param {AccountInformationApiGetListFieldsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getListFields(requestParameters: AccountInformationApiGetListFieldsRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getListFields(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a List of Users
     * @param {AccountInformationApiGetUserListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public getUserList(requestParameters: AccountInformationApiGetUserListRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).getUserList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This resource accepts one or more options. To update an option, specify an ID. You may also remove an option from the list of current values by archiving the value. To create a new option, do not specify an \"id\" attribute.
     * @summary Add or Update Values for List Fields
     * @param {AccountInformationApiUpdateListFieldValuesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountInformationApiGenerated
     */
    public updateListFieldValues(requestParameters: AccountInformationApiUpdateListFieldValuesRequest, options?: AxiosRequestConfig) {
        return AccountInformationApiFp(this.configuration).updateListFieldValues(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
