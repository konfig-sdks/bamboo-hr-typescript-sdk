/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TimeTrackingPrivateBetaAddEditClockEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaAddEditClockEntriesRequestEntriesInner } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaAddEditHourEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaAddEditHourEntriesRequestHoursInner } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaAddTimesheetClockInRequest } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaCreateProjectTaskRequest } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaCreateProjectTaskRequestTasksInner } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaDeleteHourEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingProjectWithTasks } from '../models';
// @ts-ignore
import { TimeTrackingProjectWithTasksAndEmployeeIds } from '../models';
// @ts-ignore
import { TimesheetEntry } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeTrackingPrivateBetaApi - axios parameter creator
 * @export
 */
export const TimeTrackingPrivateBetaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Clock out an employee.
         * @summary Add Timesheet Clock-Out Entry
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to clock out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClockOut: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addClockOut', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addClockOut', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_out',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or edit timesheet clock entries.
         * @summary Add/Edit Timesheet Clock Entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingPrivateBetaAddEditClockEntriesRequest} [timeTrackingPrivateBetaAddEditClockEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEditClockEntries: async (companyDomain: string, timeTrackingPrivateBetaAddEditClockEntriesRequest?: TimeTrackingPrivateBetaAddEditClockEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEditClockEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_entries/store`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaAddEditClockEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_entries/store',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaAddEditClockEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Add or edit timesheet hour entries.
         * @summary Add/Edit Timesheet Hour Entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingPrivateBetaAddEditHourEntriesRequest} [timeTrackingPrivateBetaAddEditHourEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEditHourEntries: async (companyDomain: string, timeTrackingPrivateBetaAddEditHourEntriesRequest?: TimeTrackingPrivateBetaAddEditHourEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addEditHourEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/hour_entries/store`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaAddEditHourEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/hour_entries/store',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaAddEditHourEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clock in an employee.
         * @summary Add Timesheet Clock-In Entry
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to clock in.
         * @param {TimeTrackingPrivateBetaAddTimesheetClockInRequest} [timeTrackingPrivateBetaAddTimesheetClockInRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimesheetClockIn: async (companyDomain: string, employeeId: string, timeTrackingPrivateBetaAddTimesheetClockInRequest?: TimeTrackingPrivateBetaAddTimesheetClockInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addTimesheetClockIn', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addTimesheetClockIn', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaAddTimesheetClockInRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employees/{employeeId}/clock_in',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaAddTimesheetClockInRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a time tracking project with optional tasks.
         * @summary Create a Time Tracking Project
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingPrivateBetaCreateProjectTaskRequest} [timeTrackingPrivateBetaCreateProjectTaskRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTask: async (companyDomain: string, timeTrackingPrivateBetaCreateProjectTaskRequest?: TimeTrackingPrivateBetaCreateProjectTaskRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createProjectTask', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/projects`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaCreateProjectTaskRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/projects',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaCreateProjectTaskRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete timesheet hour entries.
         * @summary Delete Timesheet Hour Entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingPrivateBetaDeleteHourEntriesRequest} [timeTrackingPrivateBetaDeleteHourEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHourEntries: async (companyDomain: string, timeTrackingPrivateBetaDeleteHourEntriesRequest?: TimeTrackingPrivateBetaDeleteHourEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteHourEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/hour_entries/delete`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaDeleteHourEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/hour_entries/delete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaDeleteHourEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete timesheet clock entries.
         * @summary Delete Timesheet Clock Entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest} [timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeSheetEntries: async (companyDomain: string, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest?: TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteTimeSheetEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_entries/delete`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_entries/delete',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the projects an employee can track time for.
         * @summary Get Employee Projects
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to retrieve projects for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeProjects: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeProjects', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeeProjects', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employees/{employeeId}/projects`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employees/{employeeId}/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all timesheet entries for a given period of time.
         * @summary Get Timesheet Entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} start YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days.
         * @param {string} end YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days.
         * @param {string} [employeeIds] A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimesheetEntries: async (companyDomain: string, start: string, end: string, employeeIds?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listTimesheetEntries', 'companyDomain', companyDomain)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('listTimesheetEntries', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('listTimesheetEntries', 'end', end)
            const localVarPath = `/{companyDomain}/v1/time_tracking/timesheet_entries`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (employeeIds !== undefined) {
                localVarQueryParameter['employeeIds'] = employeeIds;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/timesheet_entries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeTrackingPrivateBetaApi - functional programming interface
 * @export
 */
export const TimeTrackingPrivateBetaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeTrackingPrivateBetaApiAxiosParamCreator(configuration)
    return {
        /**
         * Clock out an employee.
         * @summary Add Timesheet Clock-Out Entry
         * @param {TimeTrackingPrivateBetaApiAddClockOutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addClockOut(requestParameters: TimeTrackingPrivateBetaApiAddClockOutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addClockOut(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or edit timesheet clock entries.
         * @summary Add/Edit Timesheet Clock Entries
         * @param {TimeTrackingPrivateBetaApiAddEditClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEditClockEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditClockEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetEntry>>> {
            const timeTrackingPrivateBetaAddEditClockEntriesRequest: TimeTrackingPrivateBetaAddEditClockEntriesRequest = {
                entries: requestParameters.entries
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEditClockEntries(requestParameters.companyDomain, timeTrackingPrivateBetaAddEditClockEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Add or edit timesheet hour entries.
         * @summary Add/Edit Timesheet Hour Entries
         * @param {TimeTrackingPrivateBetaApiAddEditHourEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addEditHourEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditHourEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetEntry>>> {
            const timeTrackingPrivateBetaAddEditHourEntriesRequest: TimeTrackingPrivateBetaAddEditHourEntriesRequest = {
                hours: requestParameters.hours
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addEditHourEntries(requestParameters.companyDomain, timeTrackingPrivateBetaAddEditHourEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clock in an employee.
         * @summary Add Timesheet Clock-In Entry
         * @param {TimeTrackingPrivateBetaApiAddTimesheetClockInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimesheetClockIn(requestParameters: TimeTrackingPrivateBetaApiAddTimesheetClockInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimesheetEntry>> {
            const timeTrackingPrivateBetaAddTimesheetClockInRequest: TimeTrackingPrivateBetaAddTimesheetClockInRequest = {
                projectId: requestParameters.projectId,
                taskId: requestParameters.taskId,
                note: requestParameters.note
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimesheetClockIn(requestParameters.companyDomain, requestParameters.employeeId, timeTrackingPrivateBetaAddTimesheetClockInRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a time tracking project with optional tasks.
         * @summary Create a Time Tracking Project
         * @param {TimeTrackingPrivateBetaApiCreateProjectTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProjectTask(requestParameters: TimeTrackingPrivateBetaApiCreateProjectTaskRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimeTrackingProjectWithTasksAndEmployeeIds>> {
            const timeTrackingPrivateBetaCreateProjectTaskRequest: TimeTrackingPrivateBetaCreateProjectTaskRequest = {
                name: requestParameters.name,
                billable: requestParameters.billable,
                allowAllEmployees: requestParameters.allowAllEmployees,
                employeeIds: requestParameters.employeeIds,
                hasTasks: requestParameters.hasTasks,
                tasks: requestParameters.tasks
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProjectTask(requestParameters.companyDomain, timeTrackingPrivateBetaCreateProjectTaskRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete timesheet hour entries.
         * @summary Delete Timesheet Hour Entries
         * @param {TimeTrackingPrivateBetaApiDeleteHourEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHourEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteHourEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingPrivateBetaDeleteHourEntriesRequest: TimeTrackingPrivateBetaDeleteHourEntriesRequest = {
                hourEntryIds: requestParameters.hourEntryIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHourEntries(requestParameters.companyDomain, timeTrackingPrivateBetaDeleteHourEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete timesheet clock entries.
         * @summary Delete Timesheet Clock Entries
         * @param {TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTimeSheetEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest: TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest = {
                clockEntryIds: requestParameters.clockEntryIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTimeSheetEntries(requestParameters.companyDomain, timeTrackingPrivateBetaDeleteTimeSheetEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the projects an employee can track time for.
         * @summary Get Employee Projects
         * @param {TimeTrackingPrivateBetaApiListEmployeeProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeProjects(requestParameters: TimeTrackingPrivateBetaApiListEmployeeProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<TimeTrackingProjectWithTasks>>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeProjects(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all timesheet entries for a given period of time.
         * @summary Get Timesheet Entries
         * @param {TimeTrackingPrivateBetaApiListTimesheetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTimesheetEntries(requestParameters: TimeTrackingPrivateBetaApiListTimesheetEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimesheetEntry>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTimesheetEntries(requestParameters.companyDomain, requestParameters.start, requestParameters.end, requestParameters.employeeIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeTrackingPrivateBetaApi - factory interface
 * @export
 */
export const TimeTrackingPrivateBetaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeTrackingPrivateBetaApiFp(configuration)
    return {
        /**
         * Clock out an employee.
         * @summary Add Timesheet Clock-Out Entry
         * @param {TimeTrackingPrivateBetaApiAddClockOutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addClockOut(requestParameters: TimeTrackingPrivateBetaApiAddClockOutRequest, options?: AxiosRequestConfig): AxiosPromise<TimesheetEntry> {
            return localVarFp.addClockOut(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or edit timesheet clock entries.
         * @summary Add/Edit Timesheet Clock Entries
         * @param {TimeTrackingPrivateBetaApiAddEditClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEditClockEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditClockEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TimesheetEntry>> {
            return localVarFp.addEditClockEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Add or edit timesheet hour entries.
         * @summary Add/Edit Timesheet Hour Entries
         * @param {TimeTrackingPrivateBetaApiAddEditHourEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEditHourEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditHourEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TimesheetEntry>> {
            return localVarFp.addEditHourEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clock in an employee.
         * @summary Add Timesheet Clock-In Entry
         * @param {TimeTrackingPrivateBetaApiAddTimesheetClockInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimesheetClockIn(requestParameters: TimeTrackingPrivateBetaApiAddTimesheetClockInRequest, options?: AxiosRequestConfig): AxiosPromise<TimesheetEntry> {
            return localVarFp.addTimesheetClockIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a time tracking project with optional tasks.
         * @summary Create a Time Tracking Project
         * @param {TimeTrackingPrivateBetaApiCreateProjectTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProjectTask(requestParameters: TimeTrackingPrivateBetaApiCreateProjectTaskRequest, options?: AxiosRequestConfig): AxiosPromise<TimeTrackingProjectWithTasksAndEmployeeIds> {
            return localVarFp.createProjectTask(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete timesheet hour entries.
         * @summary Delete Timesheet Hour Entries
         * @param {TimeTrackingPrivateBetaApiDeleteHourEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHourEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteHourEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteHourEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete timesheet clock entries.
         * @summary Delete Timesheet Clock Entries
         * @param {TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTimeSheetEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTimeSheetEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the projects an employee can track time for.
         * @summary Get Employee Projects
         * @param {TimeTrackingPrivateBetaApiListEmployeeProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeProjects(requestParameters: TimeTrackingPrivateBetaApiListEmployeeProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<Array<TimeTrackingProjectWithTasks>>> {
            return localVarFp.listEmployeeProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all timesheet entries for a given period of time.
         * @summary Get Timesheet Entries
         * @param {TimeTrackingPrivateBetaApiListTimesheetEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTimesheetEntries(requestParameters: TimeTrackingPrivateBetaApiListTimesheetEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<TimesheetEntry>> {
            return localVarFp.listTimesheetEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addClockOut operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiAddClockOutRequest
 */
export type TimeTrackingPrivateBetaApiAddClockOutRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddClockOut
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to clock out.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddClockOut
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for addEditClockEntries operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiAddEditClockEntriesRequest
 */
export type TimeTrackingPrivateBetaApiAddEditClockEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddEditClockEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingPrivateBetaAddEditClockEntriesRequest

/**
 * Request parameters for addEditHourEntries operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiAddEditHourEntriesRequest
 */
export type TimeTrackingPrivateBetaApiAddEditHourEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddEditHourEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingPrivateBetaAddEditHourEntriesRequest

/**
 * Request parameters for addTimesheetClockIn operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiAddTimesheetClockInRequest
 */
export type TimeTrackingPrivateBetaApiAddTimesheetClockInRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddTimesheetClockIn
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to clock in.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiAddTimesheetClockIn
    */
    readonly employeeId: string
    
} & TimeTrackingPrivateBetaAddTimesheetClockInRequest

/**
 * Request parameters for createProjectTask operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiCreateProjectTaskRequest
 */
export type TimeTrackingPrivateBetaApiCreateProjectTaskRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiCreateProjectTask
    */
    readonly companyDomain: string
    
} & TimeTrackingPrivateBetaCreateProjectTaskRequest

/**
 * Request parameters for deleteHourEntries operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiDeleteHourEntriesRequest
 */
export type TimeTrackingPrivateBetaApiDeleteHourEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiDeleteHourEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingPrivateBetaDeleteHourEntriesRequest

/**
 * Request parameters for deleteTimeSheetEntries operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest
 */
export type TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiDeleteTimeSheetEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingPrivateBetaDeleteTimeSheetEntriesRequest

/**
 * Request parameters for listEmployeeProjects operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiListEmployeeProjectsRequest
 */
export type TimeTrackingPrivateBetaApiListEmployeeProjectsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListEmployeeProjects
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to retrieve projects for.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListEmployeeProjects
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for listTimesheetEntries operation in TimeTrackingPrivateBetaApi.
 * @export
 * @interface TimeTrackingPrivateBetaApiListTimesheetEntriesRequest
 */
export type TimeTrackingPrivateBetaApiListTimesheetEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListTimesheetEntries
    */
    readonly companyDomain: string
    
    /**
    * YYYY-MM-DD. Only show timesheet entries on/after the specified start date. Must be within the last 365 days.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListTimesheetEntries
    */
    readonly start: string
    
    /**
    * YYYY-MM-DD. Only show timesheet entries on/before the specified end date. Must be within the last 365 days.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListTimesheetEntries
    */
    readonly end: string
    
    /**
    * A comma separated list of employee IDs. When specified, only entries that match these employee IDs are returned.
    * @type {string}
    * @memberof TimeTrackingPrivateBetaApiListTimesheetEntries
    */
    readonly employeeIds?: string
    
}

/**
 * TimeTrackingPrivateBetaApiGenerated - object-oriented interface
 * @export
 * @class TimeTrackingPrivateBetaApiGenerated
 * @extends {BaseAPI}
 */
export class TimeTrackingPrivateBetaApiGenerated extends BaseAPI {
    /**
     * Clock out an employee.
     * @summary Add Timesheet Clock-Out Entry
     * @param {TimeTrackingPrivateBetaApiAddClockOutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public addClockOut(requestParameters: TimeTrackingPrivateBetaApiAddClockOutRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).addClockOut(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or edit timesheet clock entries.
     * @summary Add/Edit Timesheet Clock Entries
     * @param {TimeTrackingPrivateBetaApiAddEditClockEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public addEditClockEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditClockEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).addEditClockEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Add or edit timesheet hour entries.
     * @summary Add/Edit Timesheet Hour Entries
     * @param {TimeTrackingPrivateBetaApiAddEditHourEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public addEditHourEntries(requestParameters: TimeTrackingPrivateBetaApiAddEditHourEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).addEditHourEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clock in an employee.
     * @summary Add Timesheet Clock-In Entry
     * @param {TimeTrackingPrivateBetaApiAddTimesheetClockInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public addTimesheetClockIn(requestParameters: TimeTrackingPrivateBetaApiAddTimesheetClockInRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).addTimesheetClockIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a time tracking project with optional tasks.
     * @summary Create a Time Tracking Project
     * @param {TimeTrackingPrivateBetaApiCreateProjectTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public createProjectTask(requestParameters: TimeTrackingPrivateBetaApiCreateProjectTaskRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).createProjectTask(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete timesheet hour entries.
     * @summary Delete Timesheet Hour Entries
     * @param {TimeTrackingPrivateBetaApiDeleteHourEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public deleteHourEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteHourEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).deleteHourEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete timesheet clock entries.
     * @summary Delete Timesheet Clock Entries
     * @param {TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public deleteTimeSheetEntries(requestParameters: TimeTrackingPrivateBetaApiDeleteTimeSheetEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).deleteTimeSheetEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the projects an employee can track time for.
     * @summary Get Employee Projects
     * @param {TimeTrackingPrivateBetaApiListEmployeeProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public listEmployeeProjects(requestParameters: TimeTrackingPrivateBetaApiListEmployeeProjectsRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).listEmployeeProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all timesheet entries for a given period of time.
     * @summary Get Timesheet Entries
     * @param {TimeTrackingPrivateBetaApiListTimesheetEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingPrivateBetaApiGenerated
     */
    public listTimesheetEntries(requestParameters: TimeTrackingPrivateBetaApiListTimesheetEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingPrivateBetaApiFp(this.configuration).listTimesheetEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
