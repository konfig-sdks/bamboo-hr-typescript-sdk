/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Login } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User Login
         * @summary User Login
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {Login} login 
         * @param {string} [applicationKey] 
         * @param {string} [user] 
         * @param {string} [password] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCredentials: async (companyDomain: string, login: Login, applicationKey?: string, user?: string, password?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('userCredentials', 'companyDomain', companyDomain)
            // verify required parameter 'login' is not null or undefined
            assertParamExists('userCredentials', 'login', login)
            const localVarPath = `/{companyDomain}/v1/login`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (applicationKey !== undefined) {
                await addFormParam('applicationKey', applicationKey, false, true)
            }
    
            if (user !== undefined) {
                await addFormParam('user', user, false, true)
            }
    
            if (password !== undefined) {
                await addFormParam('password', password, false, true)
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: login,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/login',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(login, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * User Login
         * @summary User Login
         * @param {LoginApiUserCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userCredentials(requestParameters: LoginApiUserCredentialsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const login: Login = {
                applicationKey: requestParameters.applicationKey,
                user: requestParameters.user,
                password: requestParameters.password
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCredentials(requestParameters.companyDomain, login, requestParameters.applicationKey, requestParameters.user, requestParameters.password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * User Login
         * @summary User Login
         * @param {LoginApiUserCredentialsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userCredentials(requestParameters: LoginApiUserCredentialsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userCredentials(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userCredentials operation in LoginApi.
 * @export
 * @interface LoginApiUserCredentialsRequest
 */
export type LoginApiUserCredentialsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof LoginApiUserCredentials
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof LoginApiUserCredentials
    */
    readonly applicationKey?: string
    
    /**
    * 
    * @type {string}
    * @memberof LoginApiUserCredentials
    */
    readonly user?: string
    
    /**
    * 
    * @type {string}
    * @memberof LoginApiUserCredentials
    */
    readonly password?: string
    
} & Login

/**
 * LoginApiGenerated - object-oriented interface
 * @export
 * @class LoginApiGenerated
 * @extends {BaseAPI}
 */
export class LoginApiGenerated extends BaseAPI {
    /**
     * User Login
     * @summary User Login
     * @param {LoginApiUserCredentialsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApiGenerated
     */
    public userCredentials(requestParameters: LoginApiUserCredentialsRequest, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).userCredentials(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
