/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TableRowUpdate } from '../models';
// @ts-ignore
import { TabularDataDeleteRowResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TabularDataApi - axios parameter creator
 * @export
 */
export const TabularDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Adds a table row
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {TableRowUpdate} tableRowUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRow: async (companyDomain: string, id: string, table: string, tableRowUpdate: TableRowUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addRow', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addRow', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('addRow', 'table', table)
            // verify required parameter 'tableRowUpdate' is not null or undefined
            assertParamExists('addRow', 'tableRowUpdate', tableRowUpdate)
            const localVarPath = `/{companyDomain}/v1_1/employees/{id}/tables/{table}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tableRowUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/employees/{id}/tables/{table}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tableRowUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).
         * @summary Adds a table row
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {TableRowUpdate} tableRowUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTableRow: async (companyDomain: string, id: string, table: string, tableRowUpdate: TableRowUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addTableRow', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addTableRow', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('addTableRow', 'table', table)
            // verify required parameter 'tableRowUpdate' is not null or undefined
            assertParamExists('addTableRow', 'tableRowUpdate', tableRowUpdate)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/tables/{table}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tableRowUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/tables/{table}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tableRowUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a table row
         * @summary Deletes a table row
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {string} rowId Row ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRow: async (companyDomain: string, id: string, table: string, rowId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteRow', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteRow', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('deleteRow', 'table', table)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('deleteRow', 'rowId', rowId)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId !== undefined ? rowId : `-rowId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.
         * @summary Gets all updated employee table data
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} table Table name
         * @param {string} since URL encoded iso8601 timestamp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangedTableRows: async (companyDomain: string, table: string, since: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getChangedTableRows', 'companyDomain', companyDomain)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('getChangedTableRows', 'table', table)
            // verify required parameter 'since' is not null or undefined
            assertParamExists('getChangedTableRows', 'since', since)
            const localVarPath = `/{companyDomain}/v1/employees/changed/tables/{table}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/changed/tables/{table}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.
         * @summary Gets table rows for a given employee and table combination
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTableRows: async (companyDomain: string, id: string, table: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeeTableRows', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeeTableRows', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('getEmployeeTableRows', 'table', table)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/tables/{table}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/tables/{table}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).
         * @summary Updates a table row.
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {string} rowId Row ID
         * @param {TableRowUpdate} tableRowUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRow: async (companyDomain: string, id: string, table: string, rowId: string, tableRowUpdate: TableRowUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateRow', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRow', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('updateRow', 'table', table)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('updateRow', 'rowId', rowId)
            // verify required parameter 'tableRowUpdate' is not null or undefined
            assertParamExists('updateRow', 'tableRowUpdate', tableRowUpdate)
            const localVarPath = `/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId !== undefined ? rowId : `-rowId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tableRowUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{id}/tables/{table}/{rowId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tableRowUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Updates a table row.
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is the employee ID.
         * @param {string} table Table name
         * @param {string} rowId Row ID
         * @param {TableRowUpdate} tableRowUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRow_1: async (companyDomain: string, id: string, table: string, rowId: string, tableRowUpdate: TableRowUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateRow_1', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateRow_1', 'id', id)
            // verify required parameter 'table' is not null or undefined
            assertParamExists('updateRow_1', 'table', table)
            // verify required parameter 'rowId' is not null or undefined
            assertParamExists('updateRow_1', 'rowId', rowId)
            // verify required parameter 'tableRowUpdate' is not null or undefined
            assertParamExists('updateRow_1', 'tableRowUpdate', tableRowUpdate)
            const localVarPath = `/{companyDomain}/v1_1/employees/{id}/tables/{table}/{rowId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"table"}}`, encodeURIComponent(String(table !== undefined ? table : `-table-`)))
                .replace(`{${"rowId"}}`, encodeURIComponent(String(rowId !== undefined ? rowId : `-rowId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tableRowUpdate,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/employees/{id}/tables/{table}/{rowId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tableRowUpdate, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TabularDataApi - functional programming interface
 * @export
 */
export const TabularDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TabularDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Adds a table row
         * @param {TabularDataApiAddRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addRow(requestParameters: TabularDataApiAddRowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tableRowUpdate: TableRowUpdate = {
                date: requestParameters.date,
                location: requestParameters.location,
                division: requestParameters.division,
                department: requestParameters.department,
                jobTitle: requestParameters.jobTitle,
                reportsTo: requestParameters.reportsTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addRow(requestParameters.companyDomain, requestParameters.id, requestParameters.table, tableRowUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).
         * @summary Adds a table row
         * @param {TabularDataApiAddTableRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTableRow(requestParameters: TabularDataApiAddTableRowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tableRowUpdate: TableRowUpdate = {
                date: requestParameters.date,
                location: requestParameters.location,
                division: requestParameters.division,
                department: requestParameters.department,
                jobTitle: requestParameters.jobTitle,
                reportsTo: requestParameters.reportsTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTableRow(requestParameters.companyDomain, requestParameters.id, requestParameters.table, tableRowUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a table row
         * @summary Deletes a table row
         * @param {TabularDataApiDeleteRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRow(requestParameters: TabularDataApiDeleteRowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TabularDataDeleteRowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteRow(requestParameters.companyDomain, requestParameters.id, requestParameters.table, requestParameters.rowId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.
         * @summary Gets all updated employee table data
         * @param {TabularDataApiGetChangedTableRowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChangedTableRows(requestParameters: TabularDataApiGetChangedTableRowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChangedTableRows(requestParameters.companyDomain, requestParameters.table, requestParameters.since, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.
         * @summary Gets table rows for a given employee and table combination
         * @param {TabularDataApiGetEmployeeTableRowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTableRows(requestParameters: TabularDataApiGetEmployeeTableRowsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTableRows(requestParameters.companyDomain, requestParameters.id, requestParameters.table, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).
         * @summary Updates a table row.
         * @param {TabularDataApiUpdateRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRow(requestParameters: TabularDataApiUpdateRowRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tableRowUpdate: TableRowUpdate = {
                date: requestParameters.date,
                location: requestParameters.location,
                division: requestParameters.division,
                department: requestParameters.department,
                jobTitle: requestParameters.jobTitle,
                reportsTo: requestParameters.reportsTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRow(requestParameters.companyDomain, requestParameters.id, requestParameters.table, requestParameters.rowId, tableRowUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Updates a table row.
         * @param {TabularDataApiUpdateRow0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRow_1(requestParameters: TabularDataApiUpdateRow0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const tableRowUpdate: TableRowUpdate = {
                date: requestParameters.date,
                location: requestParameters.location,
                division: requestParameters.division,
                department: requestParameters.department,
                jobTitle: requestParameters.jobTitle,
                reportsTo: requestParameters.reportsTo
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRow_1(requestParameters.companyDomain, requestParameters.id, requestParameters.table, requestParameters.rowId, tableRowUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TabularDataApi - factory interface
 * @export
 */
export const TabularDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TabularDataApiFp(configuration)
    return {
        /**
         * Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Adds a table row
         * @param {TabularDataApiAddRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRow(requestParameters: TabularDataApiAddRowRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addRow(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).
         * @summary Adds a table row
         * @param {TabularDataApiAddTableRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTableRow(requestParameters: TabularDataApiAddTableRowRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTableRow(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a table row
         * @summary Deletes a table row
         * @param {TabularDataApiDeleteRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRow(requestParameters: TabularDataApiDeleteRowRequest, options?: AxiosRequestConfig): AxiosPromise<TabularDataDeleteRowResponse> {
            return localVarFp.deleteRow(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.
         * @summary Gets all updated employee table data
         * @param {TabularDataApiGetChangedTableRowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChangedTableRows(requestParameters: TabularDataApiGetChangedTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getChangedTableRows(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.
         * @summary Gets table rows for a given employee and table combination
         * @param {TabularDataApiGetEmployeeTableRowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTableRows(requestParameters: TabularDataApiGetEmployeeTableRowsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEmployeeTableRows(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).
         * @summary Updates a table row.
         * @param {TabularDataApiUpdateRowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRow(requestParameters: TabularDataApiUpdateRowRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRow(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
         * @summary Updates a table row.
         * @param {TabularDataApiUpdateRow0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRow_1(requestParameters: TabularDataApiUpdateRow0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateRow_1(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addRow operation in TabularDataApi.
 * @export
 * @interface TabularDataApiAddRowRequest
 */
export type TabularDataApiAddRowRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiAddRow
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiAddRow
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiAddRow
    */
    readonly table: string
    
} & TableRowUpdate

/**
 * Request parameters for addTableRow operation in TabularDataApi.
 * @export
 * @interface TabularDataApiAddTableRowRequest
 */
export type TabularDataApiAddTableRowRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiAddTableRow
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiAddTableRow
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiAddTableRow
    */
    readonly table: string
    
} & TableRowUpdate

/**
 * Request parameters for deleteRow operation in TabularDataApi.
 * @export
 * @interface TabularDataApiDeleteRowRequest
 */
export type TabularDataApiDeleteRowRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiDeleteRow
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiDeleteRow
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiDeleteRow
    */
    readonly table: string
    
    /**
    * Row ID
    * @type {string}
    * @memberof TabularDataApiDeleteRow
    */
    readonly rowId: string
    
}

/**
 * Request parameters for getChangedTableRows operation in TabularDataApi.
 * @export
 * @interface TabularDataApiGetChangedTableRowsRequest
 */
export type TabularDataApiGetChangedTableRowsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiGetChangedTableRows
    */
    readonly companyDomain: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiGetChangedTableRows
    */
    readonly table: string
    
    /**
    * URL encoded iso8601 timestamp
    * @type {string}
    * @memberof TabularDataApiGetChangedTableRows
    */
    readonly since: string
    
}

/**
 * Request parameters for getEmployeeTableRows operation in TabularDataApi.
 * @export
 * @interface TabularDataApiGetEmployeeTableRowsRequest
 */
export type TabularDataApiGetEmployeeTableRowsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiGetEmployeeTableRows
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiGetEmployeeTableRows
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiGetEmployeeTableRows
    */
    readonly table: string
    
}

/**
 * Request parameters for updateRow operation in TabularDataApi.
 * @export
 * @interface TabularDataApiUpdateRowRequest
 */
export type TabularDataApiUpdateRowRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiUpdateRow
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiUpdateRow
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiUpdateRow
    */
    readonly table: string
    
    /**
    * Row ID
    * @type {string}
    * @memberof TabularDataApiUpdateRow
    */
    readonly rowId: string
    
} & TableRowUpdate

/**
 * Request parameters for updateRow_1 operation in TabularDataApi.
 * @export
 * @interface TabularDataApiUpdateRow0Request
 */
export type TabularDataApiUpdateRow0Request = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TabularDataApiUpdateRow0
    */
    readonly companyDomain: string
    
    /**
    * {id} is the employee ID.
    * @type {string}
    * @memberof TabularDataApiUpdateRow0
    */
    readonly id: string
    
    /**
    * Table name
    * @type {string}
    * @memberof TabularDataApiUpdateRow0
    */
    readonly table: string
    
    /**
    * Row ID
    * @type {string}
    * @memberof TabularDataApiUpdateRow0
    */
    readonly rowId: string
    
} & TableRowUpdate

/**
 * TabularDataApiGenerated - object-oriented interface
 * @export
 * @class TabularDataApiGenerated
 * @extends {BaseAPI}
 */
export class TabularDataApiGenerated extends BaseAPI {
    /**
     * Adds a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
     * @summary Adds a table row
     * @param {TabularDataApiAddRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public addRow(requestParameters: TabularDataApiAddRowRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).addRow(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adds a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is adding a row on the compensation table, the row cannot be added if they are missing any of the required employee fields (including fields not on that table).
     * @summary Adds a table row
     * @param {TabularDataApiAddTableRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public addTableRow(requestParameters: TabularDataApiAddTableRowRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).addTableRow(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a table row
     * @summary Deletes a table row
     * @param {TabularDataApiDeleteRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public deleteRow(requestParameters: TabularDataApiDeleteRowRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).deleteRow(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API is merely an optimization to avoid downloading all table data for all employees. When you use this API you will provide a timestamp and the results will be limited to just the employees that have changed since the time you provided. This API operates on an employee-last-changed-timestamp, which means that a change in ANY field in the employee record will cause ALL of that employees table rows to show up via this API.
     * @summary Gets all updated employee table data
     * @param {TabularDataApiGetChangedTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public getChangedTableRows(requestParameters: TabularDataApiGetChangedTableRowsRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).getChangedTableRows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a data structure representing all the table rows for a given employee and table combination. The result is not sorted in any particular order.
     * @summary Gets table rows for a given employee and table combination
     * @param {TabularDataApiGetEmployeeTableRowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public getEmployeeTableRows(requestParameters: TabularDataApiGetEmployeeTableRowsRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).getEmployeeTableRows(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a table row. If employee is currently on a pay schedule syncing with Trax Payroll, or being added to one, the row cannot be added if they are missing any required fields for that table. If the API user is updating a row on the compensation table, the row cannot be updated if they are missing any of the required employee fields (including fields not on that table).
     * @summary Updates a table row.
     * @param {TabularDataApiUpdateRowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public updateRow(requestParameters: TabularDataApiUpdateRowRequest, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).updateRow(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a table row. Fundamentally the same as version 1 so choose a version and stay with it unless other changes occur. Changes from version 1 are now minor with a few variations limited to ACA, payroll, terminated rehire, gusto, benetrac, and final pay date.
     * @summary Updates a table row.
     * @param {TabularDataApiUpdateRow0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TabularDataApiGenerated
     */
    public updateRow_1(requestParameters: TabularDataApiUpdateRow0Request, options?: AxiosRequestConfig) {
        return TabularDataApiFp(this.configuration).updateRow_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
