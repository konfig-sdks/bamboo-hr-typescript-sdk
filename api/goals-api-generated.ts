/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Goal } from '../models';
// @ts-ignore
import { GoalsCloseGoalResponse } from '../models';
// @ts-ignore
import { GoalsCountPerStatusResponse } from '../models';
// @ts-ignore
import { GoalsGetAllAggregateInfo200Response } from '../models';
// @ts-ignore
import { GoalsGetAllAggregateInfo200Response1 } from '../models';
// @ts-ignore
import { GoalsGetAllAggregateInfoResponse } from '../models';
// @ts-ignore
import { GoalsGetEmployeeGoalsResponse } from '../models';
// @ts-ignore
import { GoalsGetGoalAggregateInfoResponse } from '../models';
// @ts-ignore
import { GoalsStatusCountResponse } from '../models';
// @ts-ignore
import { GoalsUpdateGoalSharingRequest } from '../models';
// @ts-ignore
import { GoalsUpdateGoalSharingResponse } from '../models';
// @ts-ignore
import { GoalsUpdateProgressResponse } from '../models';
// @ts-ignore
import { Milestone } from '../models';
// @ts-ignore
import { NewGoal } from '../models';
// @ts-ignore
import { UpdateGoalV11 } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * GoalsApi - axios parameter creator
 * @export
 */
export const GoalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Close a goal.
         * @summary Close Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {string} [body] Comment field is optional.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGoal: async (companyDomain: string, employeeId: string, goalId: string, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('closeGoal', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('closeGoal', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('closeGoal', 'goalId', goalId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/close`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/close',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.
         * @summary Get Goal Status Counts, Version 1.1
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID to whom the goals are assigned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countPerStatus: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('countPerStatus', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('countPerStatus', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/filters`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/filters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new goal comment.
         * @summary Create Goal Comment
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment: async (companyDomain: string, employeeId: string, goalId: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createComment', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createComment', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('createComment', 'goalId', goalId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createComment', 'body', body)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new goal for an employee.
         * @summary Create Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {NewGoal} newGoal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeGoal: async (companyDomain: string, employeeId: string, newGoal: NewGoal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createEmployeeGoal', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('createEmployeeGoal', 'employeeId', employeeId)
            // verify required parameter 'newGoal' is not null or undefined
            assertParamExists('createEmployeeGoal', 'newGoal', newGoal)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: newGoal,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(newGoal, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a goal.
         * @summary Delete Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (companyDomain: string, employeeId: string, goalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteById', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteById', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('deleteById', 'goalId', goalId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a goal comment.
         * @summary Delete Goal Comment
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {string} commentId commentId is the ID of a specific comment for the specified goal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment: async (companyDomain: string, employeeId: string, goalId: string, commentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteComment', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('deleteComment', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('deleteComment', 'goalId', goalId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('deleteComment', 'commentId', commentId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-commentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Determine if the API user has permission to create a goal for this employee.
         * @summary Can Create a Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        determinePermission: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('determinePermission', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('determinePermission', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/canCreateGoals`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/canCreateGoals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get alignable goal options for an employee.
         * @summary Alignable Goal Options
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID to get alignable goal options for.
         * @param {string} [body] Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlignableOptions: async (companyDomain: string, employeeId: string, body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getAlignableOptions', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAlignableOptions', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/alignmentOptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/alignmentOptions',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID used to generate the aggregate information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getAllAggregateInfo', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllAggregateInfo', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/aggregate`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/aggregate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info, Version 1.1
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID used to generate the aggregate information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo_1: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getAllAggregateInfo_1', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllAggregateInfo_1', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/aggregate`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/aggregate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.
         * @summary Get All Aggregate Goal Info, Version 1.2
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID used to generate the aggregate information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo_2: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getAllAggregateInfo_2', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getAllAggregateInfo_2', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/aggregate`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_2/performance/employees/{employeeId}/goals/aggregate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comments for a goal.
         * @summary Get Goal Comments
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments: async (companyDomain: string, employeeId: string, goalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getComments', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getComments', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('getComments', 'goalId', goalId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get goals for an employee.
         * @summary Get Goals
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID to whom the goals are assigned.
         * @param {string} [filter] A filter that can be applied to only show the goals that are in a certain state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGoals: async (companyDomain: string, employeeId: string, filter?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEmployeeGoals', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getEmployeeGoals', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.
         * @summary Get Aggregate Goal Info
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the Goal ID used to generate the aggregate information.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalAggregateInfo: async (companyDomain: string, employeeId: string, goalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getGoalAggregateInfo', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getGoalAggregateInfo', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('getGoalAggregateInfo', 'goalId', goalId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/aggregate`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/aggregate',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reopen a goal.
         * @summary Reopen a Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenGoal: async (companyDomain: string, employeeId: string, goalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('reopenGoal', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('reopenGoal', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('reopenGoal', 'goalId', goalId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/reopen`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/reopen',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of employees with whom the specified employee\'s goals may be shared.
         * @summary Available Goal Sharing Options
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID to get sharing options for.
         * @param {string} [search] The search term used to filter employees returned. Will search name, employee ID and email.
         * @param {string} [limit] Limit will restrict results to specified number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareOptionsGet: async (companyDomain: string, employeeId: string, search?: string, limit?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('shareOptionsGet', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('shareOptionsGet', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/shareOptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/shareOptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the number of goals per status for an employee.
         * @summary Get Goal Status Counts
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID to whom the goals are assigned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusCount: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('statusCount', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('statusCount', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/filters`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/filters',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a goal comment.
         * @summary Update Goal Comment
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {string} commentId commentId is the comment ID for the specified goal.
         * @param {string} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment: async (companyDomain: string, employeeId: string, goalId: string, commentId: string, body: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateComment', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateComment', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateComment', 'goalId', goalId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('updateComment', 'commentId', commentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateComment', 'body', body)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId !== undefined ? commentId : `-commentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/comments/{commentId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1
         * @summary Update Goal
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {Goal} goal Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeGoal: async (companyDomain: string, employeeId: string, goalId: string, goal: Goal, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateEmployeeGoal', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeGoal', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateEmployeeGoal', 'goalId', goalId)
            // verify required parameter 'goal' is not null or undefined
            assertParamExists('updateEmployeeGoal', 'goal', goal)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goal,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goal, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.
         * @summary Update Goal, V1.1
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {UpdateGoalV11} updateGoalV11 Required fields: title, sharedWithEmployeeIds, dueDate. Any non-required field not provided will overwrite existing data with a NULL value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeGoalV11: async (companyDomain: string, employeeId: string, goalId: string, updateGoalV11: UpdateGoalV11, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateEmployeeGoalV11', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateEmployeeGoalV11', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateEmployeeGoalV11', 'goalId', goalId)
            // verify required parameter 'updateGoalV11' is not null or undefined
            assertParamExists('updateEmployeeGoalV11', 'updateGoalV11', updateGoalV11)
            const localVarPath = `/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/{goalId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: updateGoalV11,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/performance/employees/{employeeId}/goals/{goalId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(updateGoalV11, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates which employees this goal is shared with.
         * @summary Update Goal Sharing
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {string} goalId goalId is the goal ID for the specified employee.
         * @param {GoalsUpdateGoalSharingRequest} goalsUpdateGoalSharingRequest Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalSharing: async (companyDomain: string, employeeId: string, goalId: string, goalsUpdateGoalSharingRequest: GoalsUpdateGoalSharingRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateGoalSharing', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateGoalSharing', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateGoalSharing', 'goalId', goalId)
            // verify required parameter 'goalsUpdateGoalSharingRequest' is not null or undefined
            assertParamExists('updateGoalSharing', 'goalsUpdateGoalSharingRequest', goalsUpdateGoalSharingRequest)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/sharedWith`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: goalsUpdateGoalSharingRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/sharedWith',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(goalsUpdateGoalSharingRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Goal Progress
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeId employeeId is the employee ID with whom the goal is associated.
         * @param {number} goalId goalId is the goal ID for the specified employee.
         * @param {number} body Employee IDs of employees with whom the goal is shared. All goal owners are considered \&quot;shared with\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress: async (companyDomain: string, employeeId: number, goalId: number, body: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateProgress', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('updateProgress', 'employeeId', employeeId)
            // verify required parameter 'goalId' is not null or undefined
            assertParamExists('updateProgress', 'goalId', goalId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateProgress', 'body', body)
            const localVarPath = `/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/progress`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"goalId"}}`, encodeURIComponent(String(goalId !== undefined ? goalId : `-goalId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/performance/employees/{employeeId}/goals/{goalId}/progress',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GoalsApi - functional programming interface
 * @export
 */
export const GoalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GoalsApiAxiosParamCreator(configuration)
    return {
        /**
         * Close a goal.
         * @summary Close Goal
         * @param {GoalsApiCloseGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeGoal(requestParameters: GoalsApiCloseGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsCloseGoalResponse>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeGoal(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.
         * @summary Get Goal Status Counts, Version 1.1
         * @param {GoalsApiCountPerStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countPerStatus(requestParameters: GoalsApiCountPerStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsCountPerStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countPerStatus(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new goal comment.
         * @summary Create Goal Comment
         * @param {GoalsApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createComment(requestParameters: GoalsApiCreateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.createComment(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new goal for an employee.
         * @summary Create Goal
         * @param {GoalsApiCreateEmployeeGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmployeeGoal(requestParameters: GoalsApiCreateEmployeeGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const newGoal: NewGoal = {
                title: requestParameters.title,
                description: requestParameters.description,
                percentComplete: requestParameters.percentComplete,
                alignsWithOptionId: requestParameters.alignsWithOptionId,
                sharedWithEmployeeIds: requestParameters.sharedWithEmployeeIds,
                dueDate: requestParameters.dueDate,
                completionDate: requestParameters.completionDate,
                milestones: requestParameters.milestones
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmployeeGoal(requestParameters.companyDomain, requestParameters.employeeId, newGoal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a goal.
         * @summary Delete Goal
         * @param {GoalsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: GoalsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a goal comment.
         * @summary Delete Goal Comment
         * @param {GoalsApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteComment(requestParameters: GoalsApiDeleteCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteComment(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, requestParameters.commentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Determine if the API user has permission to create a goal for this employee.
         * @summary Can Create a Goal
         * @param {GoalsApiDeterminePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async determinePermission(requestParameters: GoalsApiDeterminePermissionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.determinePermission(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get alignable goal options for an employee.
         * @summary Alignable Goal Options
         * @param {GoalsApiGetAlignableOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAlignableOptions(requestParameters: GoalsApiGetAlignableOptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAlignableOptions(requestParameters.companyDomain, requestParameters.employeeId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info
         * @param {GoalsApiGetAllAggregateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAggregateInfo(requestParameters: GoalsApiGetAllAggregateInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetAllAggregateInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAggregateInfo(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info, Version 1.1
         * @param {GoalsApiGetAllAggregateInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAggregateInfo_1(requestParameters: GoalsApiGetAllAggregateInfo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetAllAggregateInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAggregateInfo_1(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.
         * @summary Get All Aggregate Goal Info, Version 1.2
         * @param {GoalsApiGetAllAggregateInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAggregateInfo_2(requestParameters: GoalsApiGetAllAggregateInfo1Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetAllAggregateInfo200Response1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAggregateInfo_2(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get comments for a goal.
         * @summary Get Goal Comments
         * @param {GoalsApiGetCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComments(requestParameters: GoalsApiGetCommentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComments(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get goals for an employee.
         * @summary Get Goals
         * @param {GoalsApiGetEmployeeGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeGoals(requestParameters: GoalsApiGetEmployeeGoalsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetEmployeeGoalsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeGoals(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.
         * @summary Get Aggregate Goal Info
         * @param {GoalsApiGetGoalAggregateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGoalAggregateInfo(requestParameters: GoalsApiGetGoalAggregateInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsGetGoalAggregateInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGoalAggregateInfo(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reopen a goal.
         * @summary Reopen a Goal
         * @param {GoalsApiReopenGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reopenGoal(requestParameters: GoalsApiReopenGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reopenGoal(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of employees with whom the specified employee\'s goals may be shared.
         * @summary Available Goal Sharing Options
         * @param {GoalsApiShareOptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareOptionsGet(requestParameters: GoalsApiShareOptionsGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareOptionsGet(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.search, requestParameters.limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the number of goals per status for an employee.
         * @summary Get Goal Status Counts
         * @param {GoalsApiStatusCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusCount(requestParameters: GoalsApiStatusCountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsStatusCountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statusCount(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a goal comment.
         * @summary Update Goal Comment
         * @param {GoalsApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateComment(requestParameters: GoalsApiUpdateCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const body: string = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateComment(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, requestParameters.commentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1
         * @summary Update Goal
         * @param {GoalsApiUpdateEmployeeGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeGoal(requestParameters: GoalsApiUpdateEmployeeGoalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const goal: Goal = {
                title: requestParameters.title,
                description: requestParameters.description,
                id: requestParameters.id,
                percentComplete: requestParameters.percentComplete,
                alignsWithOptionId: requestParameters.alignsWithOptionId,
                sharedWithEmployeeIds: requestParameters.sharedWithEmployeeIds,
                dueDate: requestParameters.dueDate,
                completionDate: requestParameters.completionDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeGoal(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, goal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.
         * @summary Update Goal, V1.1
         * @param {GoalsApiUpdateEmployeeGoalV11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmployeeGoalV11(requestParameters: GoalsApiUpdateEmployeeGoalV11Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const updateGoalV11: UpdateGoalV11 = {
                title: requestParameters.title,
                description: requestParameters.description,
                alignsWithOptionId: requestParameters.alignsWithOptionId,
                sharedWithEmployeeIds: requestParameters.sharedWithEmployeeIds,
                dueDate: requestParameters.dueDate,
                milestonesEnabled: requestParameters.milestonesEnabled,
                deletedMilestoneIds: requestParameters.deletedMilestoneIds,
                milestones: requestParameters.milestones
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmployeeGoalV11(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, updateGoalV11, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates which employees this goal is shared with.
         * @summary Update Goal Sharing
         * @param {GoalsApiUpdateGoalSharingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGoalSharing(requestParameters: GoalsApiUpdateGoalSharingRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsUpdateGoalSharingResponse>> {
            const goalsUpdateGoalSharingRequest: GoalsUpdateGoalSharingRequest = {
                sharedWithEmployeeIds: requestParameters.sharedWithEmployeeIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGoalSharing(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, goalsUpdateGoalSharingRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Goal Progress
         * @param {GoalsApiUpdateProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProgress(requestParameters: GoalsApiUpdateProgressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GoalsUpdateProgressResponse>> {
            const body: number = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProgress(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.goalId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GoalsApi - factory interface
 * @export
 */
export const GoalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GoalsApiFp(configuration)
    return {
        /**
         * Close a goal.
         * @summary Close Goal
         * @param {GoalsApiCloseGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeGoal(requestParameters: GoalsApiCloseGoalRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsCloseGoalResponse> {
            return localVarFp.closeGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.
         * @summary Get Goal Status Counts, Version 1.1
         * @param {GoalsApiCountPerStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countPerStatus(requestParameters: GoalsApiCountPerStatusRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsCountPerStatusResponse> {
            return localVarFp.countPerStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new goal comment.
         * @summary Create Goal Comment
         * @param {GoalsApiCreateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createComment(requestParameters: GoalsApiCreateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new goal for an employee.
         * @summary Create Goal
         * @param {GoalsApiCreateEmployeeGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmployeeGoal(requestParameters: GoalsApiCreateEmployeeGoalRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createEmployeeGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a goal.
         * @summary Delete Goal
         * @param {GoalsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: GoalsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a goal comment.
         * @summary Delete Goal Comment
         * @param {GoalsApiDeleteCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteComment(requestParameters: GoalsApiDeleteCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Determine if the API user has permission to create a goal for this employee.
         * @summary Can Create a Goal
         * @param {GoalsApiDeterminePermissionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        determinePermission(requestParameters: GoalsApiDeterminePermissionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.determinePermission(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get alignable goal options for an employee.
         * @summary Alignable Goal Options
         * @param {GoalsApiGetAlignableOptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAlignableOptions(requestParameters: GoalsApiGetAlignableOptionsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAlignableOptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info
         * @param {GoalsApiGetAllAggregateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo(requestParameters: GoalsApiGetAllAggregateInfoRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetAllAggregateInfoResponse> {
            return localVarFp.getAllAggregateInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
         * @summary Get All Aggregate Goal Info, Version 1.1
         * @param {GoalsApiGetAllAggregateInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo_1(requestParameters: GoalsApiGetAllAggregateInfo0Request, options?: AxiosRequestConfig): AxiosPromise<GoalsGetAllAggregateInfo200Response> {
            return localVarFp.getAllAggregateInfo_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.
         * @summary Get All Aggregate Goal Info, Version 1.2
         * @param {GoalsApiGetAllAggregateInfo1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAggregateInfo_2(requestParameters: GoalsApiGetAllAggregateInfo1Request, options?: AxiosRequestConfig): AxiosPromise<GoalsGetAllAggregateInfo200Response1> {
            return localVarFp.getAllAggregateInfo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get comments for a goal.
         * @summary Get Goal Comments
         * @param {GoalsApiGetCommentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComments(requestParameters: GoalsApiGetCommentsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getComments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get goals for an employee.
         * @summary Get Goals
         * @param {GoalsApiGetEmployeeGoalsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeGoals(requestParameters: GoalsApiGetEmployeeGoalsRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetEmployeeGoalsResponse> {
            return localVarFp.getEmployeeGoals(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.
         * @summary Get Aggregate Goal Info
         * @param {GoalsApiGetGoalAggregateInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGoalAggregateInfo(requestParameters: GoalsApiGetGoalAggregateInfoRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsGetGoalAggregateInfoResponse> {
            return localVarFp.getGoalAggregateInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Reopen a goal.
         * @summary Reopen a Goal
         * @param {GoalsApiReopenGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reopenGoal(requestParameters: GoalsApiReopenGoalRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.reopenGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of employees with whom the specified employee\'s goals may be shared.
         * @summary Available Goal Sharing Options
         * @param {GoalsApiShareOptionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareOptionsGet(requestParameters: GoalsApiShareOptionsGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.shareOptionsGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the number of goals per status for an employee.
         * @summary Get Goal Status Counts
         * @param {GoalsApiStatusCountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusCount(requestParameters: GoalsApiStatusCountRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsStatusCountResponse> {
            return localVarFp.statusCount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a goal comment.
         * @summary Update Goal Comment
         * @param {GoalsApiUpdateCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateComment(requestParameters: GoalsApiUpdateCommentRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1
         * @summary Update Goal
         * @param {GoalsApiUpdateEmployeeGoalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeGoal(requestParameters: GoalsApiUpdateEmployeeGoalRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateEmployeeGoal(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.
         * @summary Update Goal, V1.1
         * @param {GoalsApiUpdateEmployeeGoalV11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmployeeGoalV11(requestParameters: GoalsApiUpdateEmployeeGoalV11Request, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateEmployeeGoalV11(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates which employees this goal is shared with.
         * @summary Update Goal Sharing
         * @param {GoalsApiUpdateGoalSharingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGoalSharing(requestParameters: GoalsApiUpdateGoalSharingRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsUpdateGoalSharingResponse> {
            return localVarFp.updateGoalSharing(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Goal Progress
         * @param {GoalsApiUpdateProgressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProgress(requestParameters: GoalsApiUpdateProgressRequest, options?: AxiosRequestConfig): AxiosPromise<GoalsUpdateProgressResponse> {
            return localVarFp.updateProgress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for closeGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiCloseGoalRequest
 */
export type GoalsApiCloseGoalRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiCloseGoal
    */
    readonly companyDomain: string
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiCloseGoal
    */
    readonly employeeId: string
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiCloseGoal
    */
    readonly goalId: string
    /**
    * Comment field is optional.
    * @type {string}
    * @memberof GoalsApiCloseGoal
    */
    readonly requestBody?: string
}

/**
 * Request parameters for countPerStatus operation in GoalsApi.
 * @export
 * @interface GoalsApiCountPerStatusRequest
 */
export type GoalsApiCountPerStatusRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiCountPerStatus
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID to whom the goals are assigned.
    * @type {string}
    * @memberof GoalsApiCountPerStatus
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for createComment operation in GoalsApi.
 * @export
 * @interface GoalsApiCreateCommentRequest
 */
export type GoalsApiCreateCommentRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiCreateComment
    */
    readonly companyDomain: string
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiCreateComment
    */
    readonly employeeId: string
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiCreateComment
    */
    readonly goalId: string
    /**
    * 
    * @type {string}
    * @memberof GoalsApiCreateComment
    */
    readonly requestBody: string
}

/**
 * Request parameters for createEmployeeGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiCreateEmployeeGoalRequest
 */
export type GoalsApiCreateEmployeeGoalRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiCreateEmployeeGoal
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiCreateEmployeeGoal
    */
    readonly employeeId: string
    
} & NewGoal

/**
 * Request parameters for deleteById operation in GoalsApi.
 * @export
 * @interface GoalsApiDeleteByIdRequest
 */
export type GoalsApiDeleteByIdRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiDeleteById
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiDeleteById
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiDeleteById
    */
    readonly goalId: string
    
}

/**
 * Request parameters for deleteComment operation in GoalsApi.
 * @export
 * @interface GoalsApiDeleteCommentRequest
 */
export type GoalsApiDeleteCommentRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiDeleteComment
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiDeleteComment
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiDeleteComment
    */
    readonly goalId: string
    
    /**
    * commentId is the ID of a specific comment for the specified goal.
    * @type {string}
    * @memberof GoalsApiDeleteComment
    */
    readonly commentId: string
    
}

/**
 * Request parameters for determinePermission operation in GoalsApi.
 * @export
 * @interface GoalsApiDeterminePermissionRequest
 */
export type GoalsApiDeterminePermissionRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiDeterminePermission
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiDeterminePermission
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getAlignableOptions operation in GoalsApi.
 * @export
 * @interface GoalsApiGetAlignableOptionsRequest
 */
export type GoalsApiGetAlignableOptionsRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetAlignableOptions
    */
    readonly companyDomain: string
    /**
    * employeeId is the employee ID to get alignable goal options for.
    * @type {string}
    * @memberof GoalsApiGetAlignableOptions
    */
    readonly employeeId: string
    /**
    * Get alignment options including the option currently aligned with this goal (if applicable). If omitted, response will be alignment options belonging to the API user.
    * @type {string}
    * @memberof GoalsApiGetAlignableOptions
    */
    readonly requestBody?: string
}

/**
 * Request parameters for getAllAggregateInfo operation in GoalsApi.
 * @export
 * @interface GoalsApiGetAllAggregateInfoRequest
 */
export type GoalsApiGetAllAggregateInfoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID used to generate the aggregate information.
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getAllAggregateInfo_1 operation in GoalsApi.
 * @export
 * @interface GoalsApiGetAllAggregateInfo0Request
 */
export type GoalsApiGetAllAggregateInfo0Request = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo0
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID used to generate the aggregate information.
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo0
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getAllAggregateInfo_2 operation in GoalsApi.
 * @export
 * @interface GoalsApiGetAllAggregateInfo1Request
 */
export type GoalsApiGetAllAggregateInfo1Request = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo1
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID used to generate the aggregate information.
    * @type {string}
    * @memberof GoalsApiGetAllAggregateInfo1
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getComments operation in GoalsApi.
 * @export
 * @interface GoalsApiGetCommentsRequest
 */
export type GoalsApiGetCommentsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetComments
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiGetComments
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiGetComments
    */
    readonly goalId: string
    
}

/**
 * Request parameters for getEmployeeGoals operation in GoalsApi.
 * @export
 * @interface GoalsApiGetEmployeeGoalsRequest
 */
export type GoalsApiGetEmployeeGoalsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetEmployeeGoals
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID to whom the goals are assigned.
    * @type {string}
    * @memberof GoalsApiGetEmployeeGoals
    */
    readonly employeeId: string
    
    /**
    * A filter that can be applied to only show the goals that are in a certain state.
    * @type {string}
    * @memberof GoalsApiGetEmployeeGoals
    */
    readonly filter?: string
    
}

/**
 * Request parameters for getGoalAggregateInfo operation in GoalsApi.
 * @export
 * @interface GoalsApiGetGoalAggregateInfoRequest
 */
export type GoalsApiGetGoalAggregateInfoRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiGetGoalAggregateInfo
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiGetGoalAggregateInfo
    */
    readonly employeeId: string
    
    /**
    * goalId is the Goal ID used to generate the aggregate information.
    * @type {string}
    * @memberof GoalsApiGetGoalAggregateInfo
    */
    readonly goalId: string
    
}

/**
 * Request parameters for reopenGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiReopenGoalRequest
 */
export type GoalsApiReopenGoalRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiReopenGoal
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiReopenGoal
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiReopenGoal
    */
    readonly goalId: string
    
}

/**
 * Request parameters for shareOptionsGet operation in GoalsApi.
 * @export
 * @interface GoalsApiShareOptionsGetRequest
 */
export type GoalsApiShareOptionsGetRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiShareOptionsGet
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID to get sharing options for.
    * @type {string}
    * @memberof GoalsApiShareOptionsGet
    */
    readonly employeeId: string
    
    /**
    * The search term used to filter employees returned. Will search name, employee ID and email.
    * @type {string}
    * @memberof GoalsApiShareOptionsGet
    */
    readonly search?: string
    
    /**
    * Limit will restrict results to specified number.
    * @type {string}
    * @memberof GoalsApiShareOptionsGet
    */
    readonly limit?: string
    
}

/**
 * Request parameters for statusCount operation in GoalsApi.
 * @export
 * @interface GoalsApiStatusCountRequest
 */
export type GoalsApiStatusCountRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiStatusCount
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID to whom the goals are assigned.
    * @type {string}
    * @memberof GoalsApiStatusCount
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for updateComment operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateCommentRequest
 */
export type GoalsApiUpdateCommentRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiUpdateComment
    */
    readonly companyDomain: string
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiUpdateComment
    */
    readonly employeeId: string
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiUpdateComment
    */
    readonly goalId: string
    /**
    * commentId is the comment ID for the specified goal.
    * @type {string}
    * @memberof GoalsApiUpdateComment
    */
    readonly commentId: string
    /**
    * 
    * @type {string}
    * @memberof GoalsApiUpdateComment
    */
    readonly requestBody: string
}

/**
 * Request parameters for updateEmployeeGoal operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateEmployeeGoalRequest
 */
export type GoalsApiUpdateEmployeeGoalRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoal
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoal
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoal
    */
    readonly goalId: string
    
} & Goal

/**
 * Request parameters for updateEmployeeGoalV11 operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateEmployeeGoalV11Request
 */
export type GoalsApiUpdateEmployeeGoalV11Request = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoalV11
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoalV11
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiUpdateEmployeeGoalV11
    */
    readonly goalId: string
    
} & UpdateGoalV11

/**
 * Request parameters for updateGoalSharing operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateGoalSharingRequest
 */
export type GoalsApiUpdateGoalSharingRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiUpdateGoalSharing
    */
    readonly companyDomain: string
    
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {string}
    * @memberof GoalsApiUpdateGoalSharing
    */
    readonly employeeId: string
    
    /**
    * goalId is the goal ID for the specified employee.
    * @type {string}
    * @memberof GoalsApiUpdateGoalSharing
    */
    readonly goalId: string
    
} & GoalsUpdateGoalSharingRequest

/**
 * Request parameters for updateProgress operation in GoalsApi.
 * @export
 * @interface GoalsApiUpdateProgressRequest
 */
export type GoalsApiUpdateProgressRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof GoalsApiUpdateProgress
    */
    readonly companyDomain: string
    /**
    * employeeId is the employee ID with whom the goal is associated.
    * @type {number}
    * @memberof GoalsApiUpdateProgress
    */
    readonly employeeId: number
    /**
    * goalId is the goal ID for the specified employee.
    * @type {number}
    * @memberof GoalsApiUpdateProgress
    */
    readonly goalId: number
    /**
    * Employee IDs of employees with whom the goal is shared. All goal owners are considered \"shared with\".
    * @type {number}
    * @memberof GoalsApiUpdateProgress
    */
    readonly requestBody: number
}

/**
 * GoalsApiGenerated - object-oriented interface
 * @export
 * @class GoalsApiGenerated
 * @extends {BaseAPI}
 */
export class GoalsApiGenerated extends BaseAPI {
    /**
     * Close a goal.
     * @summary Close Goal
     * @param {GoalsApiCloseGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public closeGoal(requestParameters: GoalsApiCloseGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).closeGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the number of goals per status for an employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter.
     * @summary Get Goal Status Counts, Version 1.1
     * @param {GoalsApiCountPerStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public countPerStatus(requestParameters: GoalsApiCountPerStatusRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).countPerStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new goal comment.
     * @summary Create Goal Comment
     * @param {GoalsApiCreateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public createComment(requestParameters: GoalsApiCreateCommentRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new goal for an employee.
     * @summary Create Goal
     * @param {GoalsApiCreateEmployeeGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public createEmployeeGoal(requestParameters: GoalsApiCreateEmployeeGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).createEmployeeGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a goal.
     * @summary Delete Goal
     * @param {GoalsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public deleteById(requestParameters: GoalsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a goal comment.
     * @summary Delete Goal Comment
     * @param {GoalsApiDeleteCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public deleteComment(requestParameters: GoalsApiDeleteCommentRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).deleteComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Determine if the API user has permission to create a goal for this employee.
     * @summary Can Create a Goal
     * @param {GoalsApiDeterminePermissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public determinePermission(requestParameters: GoalsApiDeterminePermissionRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).determinePermission(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get alignable goal options for an employee.
     * @summary Alignable Goal Options
     * @param {GoalsApiGetAlignableOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getAlignableOptions(requestParameters: GoalsApiGetAlignableOptionsRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getAlignableOptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all goals, type counts, goal comment counts, and employees shared with goals for the given employee. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
     * @summary Get All Aggregate Goal Info
     * @param {GoalsApiGetAllAggregateInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getAllAggregateInfo(requestParameters: GoalsApiGetAllAggregateInfoRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getAllAggregateInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1: Returns goals in the closed filter and provides filter actions for each filter. This version of the endpoint will not return any goals with milestones. Milestone functionality for this endpoint begins in version 1.2.
     * @summary Get All Aggregate Goal Info, Version 1.1
     * @param {GoalsApiGetAllAggregateInfo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getAllAggregateInfo_1(requestParameters: GoalsApiGetAllAggregateInfo0Request, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getAllAggregateInfo_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all goals, type counts, filter actions, goal comment counts, and employees shared with goals for the given employee. Difference from Version 1.1: Returns all goals, including goals that contain milestones.
     * @summary Get All Aggregate Goal Info, Version 1.2
     * @param {GoalsApiGetAllAggregateInfo1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getAllAggregateInfo_2(requestParameters: GoalsApiGetAllAggregateInfo1Request, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getAllAggregateInfo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get comments for a goal.
     * @summary Get Goal Comments
     * @param {GoalsApiGetCommentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getComments(requestParameters: GoalsApiGetCommentsRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getComments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get goals for an employee.
     * @summary Get Goals
     * @param {GoalsApiGetEmployeeGoalsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getEmployeeGoals(requestParameters: GoalsApiGetEmployeeGoalsRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getEmployeeGoals(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides goal information, goal comments, and employees shared with goals or who have commented on the given goal.
     * @summary Get Aggregate Goal Info
     * @param {GoalsApiGetGoalAggregateInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public getGoalAggregateInfo(requestParameters: GoalsApiGetGoalAggregateInfoRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).getGoalAggregateInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reopen a goal.
     * @summary Reopen a Goal
     * @param {GoalsApiReopenGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public reopenGoal(requestParameters: GoalsApiReopenGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).reopenGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of employees with whom the specified employee\'s goals may be shared.
     * @summary Available Goal Sharing Options
     * @param {GoalsApiShareOptionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public shareOptionsGet(requestParameters: GoalsApiShareOptionsGetRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).shareOptionsGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the number of goals per status for an employee.
     * @summary Get Goal Status Counts
     * @param {GoalsApiStatusCountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public statusCount(requestParameters: GoalsApiStatusCountRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).statusCount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a goal comment.
     * @summary Update Goal Comment
     * @param {GoalsApiUpdateCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateComment(requestParameters: GoalsApiUpdateCommentRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a goal. This version will not update a goal to contain milestones, that functionality is added in version 1.1
     * @summary Update Goal
     * @param {GoalsApiUpdateEmployeeGoalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateEmployeeGoal(requestParameters: GoalsApiUpdateEmployeeGoalRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateEmployeeGoal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a goal. Version 1.1 allows the updating of the milestones contained within the goal, unlike Version 1.
     * @summary Update Goal, V1.1
     * @param {GoalsApiUpdateEmployeeGoalV11Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateEmployeeGoalV11(requestParameters: GoalsApiUpdateEmployeeGoalV11Request, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateEmployeeGoalV11(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates which employees this goal is shared with.
     * @summary Update Goal Sharing
     * @param {GoalsApiUpdateGoalSharingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateGoalSharing(requestParameters: GoalsApiUpdateGoalSharingRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateGoalSharing(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Goal Progress
     * @param {GoalsApiUpdateProgressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GoalsApiGenerated
     */
    public updateProgress(requestParameters: GoalsApiUpdateProgressRequest, options?: AxiosRequestConfig) {
        return GoalsApiFp(this.configuration).updateProgress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
