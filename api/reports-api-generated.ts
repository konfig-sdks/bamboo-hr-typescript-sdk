/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RequestCustomReport } from '../models';
// @ts-ignore
import { RequestCustomReportFilters } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.
         * @summary Get company report
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} id {id} is a report ID.
         * @param {string} format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON
         * @param {string} [fd] yes&#x3D;apply standard duplicate field filtering, no&#x3D;return the raw results with no duplicate filtering. Default value is \&quot;yes\&quot;
         * @param {boolean} [onlyCurrent] Setting to false will return future dated values from history table fields.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReport: async (companyDomain: string, id: string, format: string, fd?: string, onlyCurrent?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('companyReport', 'companyDomain', companyDomain)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyReport', 'id', id)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('companyReport', 'format', format)
            const localVarPath = `/{companyDomain}/v1/reports/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (fd !== undefined) {
                localVarQueryParameter['fd'] = fd;
            }

            if (onlyCurrent !== undefined) {
                localVarQueryParameter['onlyCurrent'] = onlyCurrent;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/reports/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use this resource to request BambooHR generate a report. You must specify a type of either \"PDF\", \"XLS\", \"CSV\", \"JSON\", or \"XML\". You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \"Active\" or \"Inactive\". This differs from the UI, which by default applies a quick filter to display only \"Active\" employees.
         * @summary Request a custom report
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} format The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON
         * @param {RequestCustomReport} requestCustomReport 
         * @param {boolean} [onlyCurrent] Limits the report to only current employees. Setting to false will include future-dated employees in the report.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCustomReport: async (companyDomain: string, format: string, requestCustomReport: RequestCustomReport, onlyCurrent?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('requestCustomReport', 'companyDomain', companyDomain)
            // verify required parameter 'format' is not null or undefined
            assertParamExists('requestCustomReport', 'format', format)
            // verify required parameter 'requestCustomReport' is not null or undefined
            assertParamExists('requestCustomReport', 'requestCustomReport', requestCustomReport)
            const localVarPath = `/{companyDomain}/v1/reports/custom`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (onlyCurrent !== undefined) {
                localVarQueryParameter['onlyCurrent'] = onlyCurrent;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: requestCustomReport,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/reports/custom',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(requestCustomReport, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.
         * @summary Get company report
         * @param {ReportsApiCompanyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyReport(requestParameters: ReportsApiCompanyReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyReport(requestParameters.companyDomain, requestParameters.id, requestParameters.format, requestParameters.fd, requestParameters.onlyCurrent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Use this resource to request BambooHR generate a report. You must specify a type of either \"PDF\", \"XLS\", \"CSV\", \"JSON\", or \"XML\". You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \"Active\" or \"Inactive\". This differs from the UI, which by default applies a quick filter to display only \"Active\" employees.
         * @summary Request a custom report
         * @param {ReportsApiRequestCustomReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestCustomReport(requestParameters: ReportsApiRequestCustomReportRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const requestCustomReport: RequestCustomReport = {
                title: requestParameters.title,
                filters: requestParameters.filters,
                fields: requestParameters.fields
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestCustomReport(requestParameters.companyDomain, requestParameters.format, requestCustomReport, requestParameters.onlyCurrent, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.
         * @summary Get company report
         * @param {ReportsApiCompanyReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReport(requestParameters: ReportsApiCompanyReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.companyReport(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Use this resource to request BambooHR generate a report. You must specify a type of either \"PDF\", \"XLS\", \"CSV\", \"JSON\", or \"XML\". You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \"Active\" or \"Inactive\". This differs from the UI, which by default applies a quick filter to display only \"Active\" employees.
         * @summary Request a custom report
         * @param {ReportsApiRequestCustomReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCustomReport(requestParameters: ReportsApiRequestCustomReportRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestCustomReport(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for companyReport operation in ReportsApi.
 * @export
 * @interface ReportsApiCompanyReportRequest
 */
export type ReportsApiCompanyReportRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ReportsApiCompanyReport
    */
    readonly companyDomain: string
    
    /**
    * {id} is a report ID.
    * @type {string}
    * @memberof ReportsApiCompanyReport
    */
    readonly id: string
    
    /**
    * The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON
    * @type {string}
    * @memberof ReportsApiCompanyReport
    */
    readonly format: string
    
    /**
    * yes=apply standard duplicate field filtering, no=return the raw results with no duplicate filtering. Default value is \"yes\"
    * @type {string}
    * @memberof ReportsApiCompanyReport
    */
    readonly fd?: string
    
    /**
    * Setting to false will return future dated values from history table fields.
    * @type {boolean}
    * @memberof ReportsApiCompanyReport
    */
    readonly onlyCurrent?: boolean
    
}

/**
 * Request parameters for requestCustomReport operation in ReportsApi.
 * @export
 * @interface ReportsApiRequestCustomReportRequest
 */
export type ReportsApiRequestCustomReportRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof ReportsApiRequestCustomReport
    */
    readonly companyDomain: string
    
    /**
    * The output format for the report. Supported formats: CSV, PDF, XLS, XML, JSON
    * @type {string}
    * @memberof ReportsApiRequestCustomReport
    */
    readonly format: string
    
    /**
    * Limits the report to only current employees. Setting to false will include future-dated employees in the report.
    * @type {boolean}
    * @memberof ReportsApiRequestCustomReport
    */
    readonly onlyCurrent?: boolean
    
} & RequestCustomReport

/**
 * ReportsApiGenerated - object-oriented interface
 * @export
 * @class ReportsApiGenerated
 * @extends {BaseAPI}
 */
export class ReportsApiGenerated extends BaseAPI {
    /**
     * Use this resource to request one of your existing custom company reports from the My Reports or Manage Reports sections in the Reports tab. You can get the report number by hovering over the report name and noting the ID from the URL. At present, only reports from the My Reports or Manage Reports sections are supported. In the future we may implement reports from the Standard Reports section if there is enough demand for it. The report numbers used in this request are different in each company.
     * @summary Get company report
     * @param {ReportsApiCompanyReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public companyReport(requestParameters: ReportsApiCompanyReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).companyReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Use this resource to request BambooHR generate a report. You must specify a type of either \"PDF\", \"XLS\", \"CSV\", \"JSON\", or \"XML\". You must specify a list of fields to show on the report. The list of fields is available here. The custom report will return employees regardless of their status, \"Active\" or \"Inactive\". This differs from the UI, which by default applies a quick filter to display only \"Active\" employees.
     * @summary Request a custom report
     * @param {ReportsApiRequestCustomReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApiGenerated
     */
    public requestCustomReport(requestParameters: ReportsApiRequestCustomReportRequest, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).requestCustomReport(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
