/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdjustTimeOffBalance } from '../models';
// @ts-ignore
import { Request } from '../models';
// @ts-ignore
import { TimeOffHistory } from '../models';
// @ts-ignore
import { TimeOffPoliciesInner } from '../models';
// @ts-ignore
import { TimeOffRequest } from '../models';
// @ts-ignore
import { TimeOffRequestDatesInner } from '../models';
// @ts-ignore
import { TimeOffRequestNotesInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeOffApi - axios parameter creator
 * @export
 */
export const TimeOffApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Add a Time Off History Item For Time Off Request
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeId The ID of the employee.
         * @param {TimeOffHistory} timeOffHistory 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeOffHistoryItem: async (companyDomain: string, employeeId: number, timeOffHistory: TimeOffHistory, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addTimeOffHistoryItem', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('addTimeOffHistoryItem', 'employeeId', employeeId)
            // verify required parameter 'timeOffHistory' is not null or undefined
            assertParamExists('addTimeOffHistoryItem', 'timeOffHistory', timeOffHistory)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/history`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffHistory,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/history',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffHistory, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId 
         * @param {Array<TimeOffPoliciesInner>} timeOffPoliciesInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeePolicies: async (companyDomain: string, employeeId: string, timeOffPoliciesInner: Array<TimeOffPoliciesInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('assignEmployeePolicies', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('assignEmployeePolicies', 'employeeId', employeeId)
            // verify required parameter 'timeOffPoliciesInner' is not null or undefined
            assertParamExists('assignEmployeePolicies', 'timeOffPoliciesInner', timeOffPoliciesInner)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/policies`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/policies',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee, Version 1.1
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId 
         * @param {Array<TimeOffPoliciesInner>} timeOffPoliciesInner 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeePoliciesV11: async (companyDomain: string, employeeId: string, timeOffPoliciesInner: Array<TimeOffPoliciesInner>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('assignEmployeePoliciesV11', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('assignEmployeePoliciesV11', 'employeeId', employeeId)
            // verify required parameter 'timeOffPoliciesInner' is not null or undefined
            assertParamExists('assignEmployeePoliciesV11', 'timeOffPoliciesInner', timeOffPoliciesInner)
            const localVarPath = `/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffPoliciesInner,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffPoliciesInner, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Adjust Time Off Balance
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {number} employeeId The ID of the employee.
         * @param {AdjustTimeOffBalance} adjustTimeOffBalance 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceAdjustmentPut: async (companyDomain: string, employeeId: number, adjustTimeOffBalance: AdjustTimeOffBalance, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('balanceAdjustmentPut', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('balanceAdjustmentPut', 'employeeId', employeeId)
            // verify required parameter 'adjustTimeOffBalance' is not null or undefined
            assertParamExists('balanceAdjustmentPut', 'adjustTimeOffBalance', adjustTimeOffBalance)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: adjustTimeOffBalance,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/balance_adjustment',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(adjustTimeOffBalance, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
         * @summary Change a Request Status
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} requestId 
         * @param {Request} request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRequestStatus: async (companyDomain: string, requestId: string, request: Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('changeRequestStatus', 'companyDomain', companyDomain)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('changeRequestStatus', 'requestId', requestId)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('changeRequestStatus', 'request', request)
            const localVarPath = `/{companyDomain}/v1/time_off/requests/{requestId}/status`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId !== undefined ? requestId : `-requestId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: request,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_off/requests/{requestId}/status',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
         * @summary Estimate Future Time Off Balances
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} end 
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateFutureTimeOffBalances: async (companyDomain: string, end: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('estimateFutureTimeOffBalances', 'companyDomain', companyDomain)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('estimateFutureTimeOffBalances', 'end', end)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('estimateFutureTimeOffBalances', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/calculator`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (end !== undefined) {
                localVarQueryParameter['end'] = (end as any instanceof Date) ?
                    (end as any).toISOString() :
                    end;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/calculator',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets a list of time off policies.
         * @summary Get Time Off Policies
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getPolicies', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/time_off/policies`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/time_off/policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Time Off Requests
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} start YYYY-MM-DD. Only show time off that occurs on/after the specified start date.
         * @param {string} end YYYY-MM-DD. Only show time off that occurs on/before the specified end date.
         * @param {number} [id] A particular request ID to limit the response to.
         * @param {string} [action] Limit to requests that the user has a particular level of access to. Legal values are: \&quot;view\&quot; or \&quot;approve\&quot;. Defaults to view.
         * @param {string} [employeeId] A particular employee ID to limit the response to.
         * @param {string} [type] A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included.
         * @param {string} [status] A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \&quot;approved\&quot;, \&quot;denied\&quot;, \&quot;superceded\&quot;, \&quot;requested\&quot;, \&quot;canceled\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffRequests: async (companyDomain: string, start: string, end: string, id?: number, action?: string, employeeId?: string, type?: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getTimeOffRequests', 'companyDomain', companyDomain)
            // verify required parameter 'start' is not null or undefined
            assertParamExists('getTimeOffRequests', 'start', start)
            // verify required parameter 'end' is not null or undefined
            assertParamExists('getTimeOffRequests', 'end', end)
            const localVarPath = `/{companyDomain}/v1/time_off/requests`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (action !== undefined) {
                localVarQueryParameter['action'] = action;
            }

            if (employeeId !== undefined) {
                localVarQueryParameter['employeeId'] = employeeId;
            }

            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_off/requests',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint gets a list of time off types.
         * @summary Get Time Off Types
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} [mode] set to \&#39;request\&#39; to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\&#39;t have permission to view balances and requests for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffTypes: async (companyDomain: string, mode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getTimeOffTypes', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/meta/time_off/types`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/meta/time_off/types',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
         * @summary Get a list of Who\'s Out
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} [start] A date in the form YYYY-MM-DD - defaults to the current date.
         * @param {string} [end] A date in the form YYYY-MM-DD - defaults to 14 days from the start date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhosOutList: async (companyDomain: string, start?: string, end?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getWhosOutList', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_off/whos_out`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_off/whos_out',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Time Off Policies for Employee, Version 1.1
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeePolicies: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeePolicies', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeePolicies', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1_1/employees/{employeeId}/time_off/policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Time Off Policies for Employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTimeOffPolicies: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeTimeOffPolicies', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeeTimeOffPolicies', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/policies`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/policies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
         * @summary Add a Time Off Request
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId 
         * @param {TimeOffRequest} timeOffRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCreation: async (companyDomain: string, employeeId: string, timeOffRequest: TimeOffRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('requestCreation', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('requestCreation', 'employeeId', employeeId)
            // verify required parameter 'timeOffRequest' is not null or undefined
            assertParamExists('requestCreation', 'timeOffRequest', timeOffRequest)
            const localVarPath = `/{companyDomain}/v1/employees/{employeeId}/time_off/request`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeOffRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/employees/{employeeId}/time_off/request',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeOffRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeOffApi - functional programming interface
 * @export
 */
export const TimeOffApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeOffApiAxiosParamCreator(configuration)
    return {
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Add a Time Off History Item For Time Off Request
         * @param {TimeOffApiAddTimeOffHistoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTimeOffHistoryItem(requestParameters: TimeOffApiAddTimeOffHistoryItemRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeOffHistory: TimeOffHistory = {
                date: requestParameters.date,
                timeOffRequestId: requestParameters.timeOffRequestId,
                note: requestParameters.note
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTimeOffHistoryItem(requestParameters.companyDomain, requestParameters.employeeId, timeOffHistory, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee
         * @param {TimeOffApiAssignEmployeePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignEmployeePolicies(requestParameters: TimeOffApiAssignEmployeePoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeOffPoliciesInner: Array<TimeOffPoliciesInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignEmployeePolicies(requestParameters.companyDomain, requestParameters.employeeId, timeOffPoliciesInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee, Version 1.1
         * @param {TimeOffApiAssignEmployeePoliciesV11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignEmployeePoliciesV11(requestParameters: TimeOffApiAssignEmployeePoliciesV11Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeOffPoliciesInner: Array<TimeOffPoliciesInner> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignEmployeePoliciesV11(requestParameters.companyDomain, requestParameters.employeeId, timeOffPoliciesInner, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Adjust Time Off Balance
         * @param {TimeOffApiBalanceAdjustmentPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balanceAdjustmentPut(requestParameters: TimeOffApiBalanceAdjustmentPutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const adjustTimeOffBalance: AdjustTimeOffBalance = {
                date: requestParameters.date,
                timeOffTypeId: requestParameters.timeOffTypeId,
                amount: requestParameters.amount,
                note: requestParameters.note
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.balanceAdjustmentPut(requestParameters.companyDomain, requestParameters.employeeId, adjustTimeOffBalance, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
         * @summary Change a Request Status
         * @param {TimeOffApiChangeRequestStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeRequestStatus(requestParameters: TimeOffApiChangeRequestStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const request: Request = {
                status: requestParameters.status,
                note: requestParameters.note
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeRequestStatus(requestParameters.companyDomain, requestParameters.requestId, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
         * @summary Estimate Future Time Off Balances
         * @param {TimeOffApiEstimateFutureTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async estimateFutureTimeOffBalances(requestParameters: TimeOffApiEstimateFutureTimeOffBalancesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.estimateFutureTimeOffBalances(requestParameters.companyDomain, requestParameters.end, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets a list of time off policies.
         * @summary Get Time Off Policies
         * @param {TimeOffApiGetPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicies(requestParameters: TimeOffApiGetPoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicies(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Time Off Requests
         * @param {TimeOffApiGetTimeOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffRequests(requestParameters: TimeOffApiGetTimeOffRequestsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffRequests(requestParameters.companyDomain, requestParameters.start, requestParameters.end, requestParameters.id, requestParameters.action, requestParameters.employeeId, requestParameters.type, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint gets a list of time off types.
         * @summary Get Time Off Types
         * @param {TimeOffApiGetTimeOffTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeOffTypes(requestParameters: TimeOffApiGetTimeOffTypesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeOffTypes(requestParameters.companyDomain, requestParameters.mode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
         * @summary Get a list of Who\'s Out
         * @param {TimeOffApiGetWhosOutListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWhosOutList(requestParameters: TimeOffApiGetWhosOutListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWhosOutList(requestParameters.companyDomain, requestParameters.start, requestParameters.end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Time Off Policies for Employee, Version 1.1
         * @param {TimeOffApiListEmployeePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeePolicies(requestParameters: TimeOffApiListEmployeePoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeePolicies(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Time Off Policies for Employee
         * @param {TimeOffApiListEmployeeTimeOffPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeTimeOffPolicies(requestParameters: TimeOffApiListEmployeeTimeOffPoliciesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeTimeOffPolicies(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
         * @summary Add a Time Off Request
         * @param {TimeOffApiRequestCreationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestCreation(requestParameters: TimeOffApiRequestCreationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeOffRequest: TimeOffRequest = {
                status: requestParameters.status,
                start: requestParameters.start,
                end: requestParameters.end,
                timeOffTypeId: requestParameters.timeOffTypeId,
                amount: requestParameters.amount,
                notes: requestParameters.notes,
                dates: requestParameters.dates,
                previousRequest: requestParameters.previousRequest
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestCreation(requestParameters.companyDomain, requestParameters.employeeId, timeOffRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeOffApi - factory interface
 * @export
 */
export const TimeOffApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeOffApiFp(configuration)
    return {
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Add a Time Off History Item For Time Off Request
         * @param {TimeOffApiAddTimeOffHistoryItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTimeOffHistoryItem(requestParameters: TimeOffApiAddTimeOffHistoryItemRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addTimeOffHistoryItem(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee
         * @param {TimeOffApiAssignEmployeePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeePolicies(requestParameters: TimeOffApiAssignEmployeePoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignEmployeePolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
         * @summary Assign Time Off Policies for an Employee, Version 1.1
         * @param {TimeOffApiAssignEmployeePoliciesV11Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignEmployeePoliciesV11(requestParameters: TimeOffApiAssignEmployeePoliciesV11Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.assignEmployeePoliciesV11(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
         * @summary Adjust Time Off Balance
         * @param {TimeOffApiBalanceAdjustmentPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balanceAdjustmentPut(requestParameters: TimeOffApiBalanceAdjustmentPutRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.balanceAdjustmentPut(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
         * @summary Change a Request Status
         * @param {TimeOffApiChangeRequestStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeRequestStatus(requestParameters: TimeOffApiChangeRequestStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changeRequestStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
         * @summary Estimate Future Time Off Balances
         * @param {TimeOffApiEstimateFutureTimeOffBalancesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        estimateFutureTimeOffBalances(requestParameters: TimeOffApiEstimateFutureTimeOffBalancesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.estimateFutureTimeOffBalances(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets a list of time off policies.
         * @summary Get Time Off Policies
         * @param {TimeOffApiGetPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicies(requestParameters: TimeOffApiGetPoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Time Off Requests
         * @param {TimeOffApiGetTimeOffRequestsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffRequests(requestParameters: TimeOffApiGetTimeOffRequestsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTimeOffRequests(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint gets a list of time off types.
         * @summary Get Time Off Types
         * @param {TimeOffApiGetTimeOffTypesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeOffTypes(requestParameters: TimeOffApiGetTimeOffTypesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTimeOffTypes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
         * @summary Get a list of Who\'s Out
         * @param {TimeOffApiGetWhosOutListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWhosOutList(requestParameters: TimeOffApiGetWhosOutListRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getWhosOutList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Time Off Policies for Employee, Version 1.1
         * @param {TimeOffApiListEmployeePoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeePolicies(requestParameters: TimeOffApiListEmployeePoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listEmployeePolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Time Off Policies for Employee
         * @param {TimeOffApiListEmployeeTimeOffPoliciesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeTimeOffPolicies(requestParameters: TimeOffApiListEmployeeTimeOffPoliciesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listEmployeeTimeOffPolicies(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
         * @summary Add a Time Off Request
         * @param {TimeOffApiRequestCreationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestCreation(requestParameters: TimeOffApiRequestCreationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.requestCreation(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTimeOffHistoryItem operation in TimeOffApi.
 * @export
 * @interface TimeOffApiAddTimeOffHistoryItemRequest
 */
export type TimeOffApiAddTimeOffHistoryItemRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiAddTimeOffHistoryItem
    */
    readonly companyDomain: string
    
    /**
    * The ID of the employee.
    * @type {number}
    * @memberof TimeOffApiAddTimeOffHistoryItem
    */
    readonly employeeId: number
    
} & TimeOffHistory

/**
 * Request parameters for assignEmployeePolicies operation in TimeOffApi.
 * @export
 * @interface TimeOffApiAssignEmployeePoliciesRequest
 */
export type TimeOffApiAssignEmployeePoliciesRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiAssignEmployeePolicies
    */
    readonly companyDomain: string
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiAssignEmployeePolicies
    */
    readonly employeeId: string
    /**
    * 
    * @type {Array<TimeOffPoliciesInner>}
    * @memberof TimeOffApiAssignEmployeePolicies
    */
    readonly requestBody: Array<TimeOffPoliciesInner>
}

/**
 * Request parameters for assignEmployeePoliciesV11 operation in TimeOffApi.
 * @export
 * @interface TimeOffApiAssignEmployeePoliciesV11Request
 */
export type TimeOffApiAssignEmployeePoliciesV11Request = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiAssignEmployeePoliciesV11
    */
    readonly companyDomain: string
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiAssignEmployeePoliciesV11
    */
    readonly employeeId: string
    /**
    * 
    * @type {Array<TimeOffPoliciesInner>}
    * @memberof TimeOffApiAssignEmployeePoliciesV11
    */
    readonly requestBody: Array<TimeOffPoliciesInner>
}

/**
 * Request parameters for balanceAdjustmentPut operation in TimeOffApi.
 * @export
 * @interface TimeOffApiBalanceAdjustmentPutRequest
 */
export type TimeOffApiBalanceAdjustmentPutRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiBalanceAdjustmentPut
    */
    readonly companyDomain: string
    
    /**
    * The ID of the employee.
    * @type {number}
    * @memberof TimeOffApiBalanceAdjustmentPut
    */
    readonly employeeId: number
    
} & AdjustTimeOffBalance

/**
 * Request parameters for changeRequestStatus operation in TimeOffApi.
 * @export
 * @interface TimeOffApiChangeRequestStatusRequest
 */
export type TimeOffApiChangeRequestStatusRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiChangeRequestStatus
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiChangeRequestStatus
    */
    readonly requestId: string
    
} & Request

/**
 * Request parameters for estimateFutureTimeOffBalances operation in TimeOffApi.
 * @export
 * @interface TimeOffApiEstimateFutureTimeOffBalancesRequest
 */
export type TimeOffApiEstimateFutureTimeOffBalancesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiEstimateFutureTimeOffBalances
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiEstimateFutureTimeOffBalances
    */
    readonly end: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiEstimateFutureTimeOffBalances
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for getPolicies operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetPoliciesRequest
 */
export type TimeOffApiGetPoliciesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiGetPolicies
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for getTimeOffRequests operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetTimeOffRequestsRequest
 */
export type TimeOffApiGetTimeOffRequestsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly companyDomain: string
    
    /**
    * YYYY-MM-DD. Only show time off that occurs on/after the specified start date.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly start: string
    
    /**
    * YYYY-MM-DD. Only show time off that occurs on/before the specified end date.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly end: string
    
    /**
    * A particular request ID to limit the response to.
    * @type {number}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly id?: number
    
    /**
    * Limit to requests that the user has a particular level of access to. Legal values are: \"view\" or \"approve\". Defaults to view.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly action?: string
    
    /**
    * A particular employee ID to limit the response to.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly employeeId?: string
    
    /**
    * A comma separated list of time off types IDs to include limit the response to. If omitted, requests of all types are included.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly type?: string
    
    /**
    * A comma separated list of request status values to include. If omitted, requests of all status values are included. Legal values are \"approved\", \"denied\", \"superceded\", \"requested\", \"canceled\".
    * @type {string}
    * @memberof TimeOffApiGetTimeOffRequests
    */
    readonly status?: string
    
}

/**
 * Request parameters for getTimeOffTypes operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetTimeOffTypesRequest
 */
export type TimeOffApiGetTimeOffTypesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiGetTimeOffTypes
    */
    readonly companyDomain: string
    
    /**
    * set to \'request\' to get a list of all time off types with which this user can create a time off request. The default is to return the list of time off types the user has permissions on. This distinction is important, as employees can request time off for types that they don\'t have permission to view balances and requests for.
    * @type {string}
    * @memberof TimeOffApiGetTimeOffTypes
    */
    readonly mode?: string
    
}

/**
 * Request parameters for getWhosOutList operation in TimeOffApi.
 * @export
 * @interface TimeOffApiGetWhosOutListRequest
 */
export type TimeOffApiGetWhosOutListRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiGetWhosOutList
    */
    readonly companyDomain: string
    
    /**
    * A date in the form YYYY-MM-DD - defaults to the current date.
    * @type {string}
    * @memberof TimeOffApiGetWhosOutList
    */
    readonly start?: string
    
    /**
    * A date in the form YYYY-MM-DD - defaults to 14 days from the start date.
    * @type {string}
    * @memberof TimeOffApiGetWhosOutList
    */
    readonly end?: string
    
}

/**
 * Request parameters for listEmployeePolicies operation in TimeOffApi.
 * @export
 * @interface TimeOffApiListEmployeePoliciesRequest
 */
export type TimeOffApiListEmployeePoliciesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiListEmployeePolicies
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiListEmployeePolicies
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for listEmployeeTimeOffPolicies operation in TimeOffApi.
 * @export
 * @interface TimeOffApiListEmployeeTimeOffPoliciesRequest
 */
export type TimeOffApiListEmployeeTimeOffPoliciesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiListEmployeeTimeOffPolicies
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiListEmployeeTimeOffPolicies
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for requestCreation operation in TimeOffApi.
 * @export
 * @interface TimeOffApiRequestCreationRequest
 */
export type TimeOffApiRequestCreationRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeOffApiRequestCreation
    */
    readonly companyDomain: string
    
    /**
    * 
    * @type {string}
    * @memberof TimeOffApiRequestCreation
    */
    readonly employeeId: string
    
} & TimeOffRequest

/**
 * TimeOffApiGenerated - object-oriented interface
 * @export
 * @class TimeOffApiGenerated
 * @extends {BaseAPI}
 */
export class TimeOffApiGenerated extends BaseAPI {
    /**
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A new time off history item will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
     * @summary Add a Time Off History Item For Time Off Request
     * @param {TimeOffApiAddTimeOffHistoryItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public addTimeOffHistoryItem(requestParameters: TimeOffApiAddTimeOffHistoryItemRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).addTimeOffHistoryItem(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. A null start date will remove the assignment. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     * @summary Assign Time Off Policies for an Employee
     * @param {TimeOffApiAssignEmployeePoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public assignEmployeePolicies(requestParameters: TimeOffApiAssignEmployeePoliciesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).assignEmployeePolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off policy will be assigned to the employee with accruals starting on the date specified. On success, a 200 Success code is returned and the content of the response will be the same as the List Time off Policies API.
     * @summary Assign Time Off Policies for an Employee, Version 1.1
     * @param {TimeOffApiAssignEmployeePoliciesV11Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public assignEmployeePoliciesV11(requestParameters: TimeOffApiAssignEmployeePoliciesV11Request, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).assignEmployeePoliciesV11(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * To use this API make an HTTP PUT where the body of the request is the JSON documented below. A time off balance adjustment will be inserted into the database. On success, a 201 Created code is returned and the \"Location\" header of the response will contain a URL that identifies the new history item.
     * @summary Adjust Time Off Balance
     * @param {TimeOffApiBalanceAdjustmentPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public balanceAdjustmentPut(requestParameters: TimeOffApiBalanceAdjustmentPutRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).balanceAdjustmentPut(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to change the status of a request in the system. You can use this to approve, deny, or cancel a time off request.
     * @summary Change a Request Status
     * @param {TimeOffApiChangeRequestStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public changeRequestStatus(requestParameters: TimeOffApiChangeRequestStatusRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).changeRequestStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will sum future time off accruals, scheduled time off, and carry-over events to produce estimates for the anticipated time off balance on a given date in the future.
     * @summary Estimate Future Time Off Balances
     * @param {TimeOffApiEstimateFutureTimeOffBalancesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public estimateFutureTimeOffBalances(requestParameters: TimeOffApiEstimateFutureTimeOffBalancesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).estimateFutureTimeOffBalances(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets a list of time off policies.
     * @summary Get Time Off Policies
     * @param {TimeOffApiGetPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getPolicies(requestParameters: TimeOffApiGetPoliciesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getPolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Time Off Requests
     * @param {TimeOffApiGetTimeOffRequestsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getTimeOffRequests(requestParameters: TimeOffApiGetTimeOffRequestsRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getTimeOffRequests(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint gets a list of time off types.
     * @summary Get Time Off Types
     * @param {TimeOffApiGetTimeOffTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getTimeOffTypes(requestParameters: TimeOffApiGetTimeOffTypesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getTimeOffTypes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint will return a list, sorted by date, of employees who will be out, and company holidays, for a period of time.
     * @summary Get a list of Who\'s Out
     * @param {TimeOffApiGetWhosOutListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public getWhosOutList(requestParameters: TimeOffApiGetWhosOutListRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).getWhosOutList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Time Off Policies for Employee, Version 1.1
     * @param {TimeOffApiListEmployeePoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public listEmployeePolicies(requestParameters: TimeOffApiListEmployeePoliciesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).listEmployeePolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Time Off Policies for Employee
     * @param {TimeOffApiListEmployeeTimeOffPoliciesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public listEmployeeTimeOffPolicies(requestParameters: TimeOffApiListEmployeeTimeOffPoliciesRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).listEmployeeTimeOffPolicies(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * A time off request is an entity that describes the decision making process for approving time off. Once a request has been created, a history entry can be created documenting the actual use of time off.
     * @summary Add a Time Off Request
     * @param {TimeOffApiRequestCreationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeOffApiGenerated
     */
    public requestCreation(requestParameters: TimeOffApiRequestCreationRequest, options?: AxiosRequestConfig) {
        return TimeOffApiFp(this.configuration).requestCreation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
