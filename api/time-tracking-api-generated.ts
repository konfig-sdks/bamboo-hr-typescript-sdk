/* tslint:disable */
/* eslint-disable */
/*
BambooHR API

This is the majority of the API requests including some that are not documented.

http://www.bamboohr.com/api/documentation/

The version of the OpenAPI document: v1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TimeTrackingApproveEmployeeTimesheetsRequest } from '../models';
// @ts-ignore
import { TimeTrackingApproveEmployeeTimesheetsRequest1 } from '../models';
// @ts-ignore
import { TimeTrackingApproveEmployeeTimesheetsRequest1ClockOutsInner } from '../models';
// @ts-ignore
import { TimeTrackingApproveEmployeeTimesheetsRequestTimesheetsInner } from '../models';
// @ts-ignore
import { TimeTrackingClockInEmployeeRequest } from '../models';
// @ts-ignore
import { TimeTrackingClockInEmployeeRequestClockInLocation } from '../models';
// @ts-ignore
import { TimeTrackingClockOutEmployeeAtSpecificTimeRequest } from '../models';
// @ts-ignore
import { TimeTrackingClockOutEmployeeRequest } from '../models';
// @ts-ignore
import { TimeTrackingClockOutEmployeeRequestClockOutLocation } from '../models';
// @ts-ignore
import { TimeTrackingDeleteClockEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingEditClockedInEntryDataRequest } from '../models';
// @ts-ignore
import { TimeTrackingEditClockedInEntryDataRequestClockInLocation } from '../models';
// @ts-ignore
import { TimeTrackingEditClockedInEntryDataRequestClockOutLocation } from '../models';
// @ts-ignore
import { TimeTrackingGetTimesheetsByIdsRequest } from '../models';
// @ts-ignore
import { TimeTrackingStoreClockEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingStoreClockEntriesRequestEntriesInner } from '../models';
// @ts-ignore
import { TimeTrackingStoreDailyEntriesRequest } from '../models';
// @ts-ignore
import { TimeTrackingStoreDailyEntriesRequestEntriesInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TimeTrackingApi - axios parameter creator
 * @export
 */
export const TimeTrackingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Approve employee timesheets
         * @summary Approve employee timesheets
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingApproveEmployeeTimesheetsRequest} timeTrackingApproveEmployeeTimesheetsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEmployeeTimesheets: async (companyDomain: string, timeTrackingApproveEmployeeTimesheetsRequest: TimeTrackingApproveEmployeeTimesheetsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('approveEmployeeTimesheets', 'companyDomain', companyDomain)
            // verify required parameter 'timeTrackingApproveEmployeeTimesheetsRequest' is not null or undefined
            assertParamExists('approveEmployeeTimesheets', 'timeTrackingApproveEmployeeTimesheetsRequest', timeTrackingApproveEmployeeTimesheetsRequest)
            const localVarPath = `/{companyDomain}/v1/time_tracking/timesheets/approve`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingApproveEmployeeTimesheetsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/timesheets/approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingApproveEmployeeTimesheetsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Approve timesheets for employees that are currently clocked in
         * @summary Approve timesheets for employees that are currently clocked in
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingApproveEmployeeTimesheetsRequest1} timeTrackingApproveEmployeeTimesheetsRequest1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEmployeeTimesheets_1: async (companyDomain: string, timeTrackingApproveEmployeeTimesheetsRequest1: TimeTrackingApproveEmployeeTimesheetsRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('approveEmployeeTimesheets_1', 'companyDomain', companyDomain)
            // verify required parameter 'timeTrackingApproveEmployeeTimesheetsRequest1' is not null or undefined
            assertParamExists('approveEmployeeTimesheets_1', 'timeTrackingApproveEmployeeTimesheetsRequest1', timeTrackingApproveEmployeeTimesheetsRequest1)
            const localVarPath = `/{companyDomain}/v1/time_tracking/timesheets/clock_out_and_approve`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingApproveEmployeeTimesheetsRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/timesheets/clock_out_and_approve',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingApproveEmployeeTimesheetsRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clock in (employee id optional)
         * @summary Clock in (employee id optional)
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId {employeeId} is id of the employee clocking out
         * @param {TimeTrackingClockInEmployeeRequest} [timeTrackingClockInEmployeeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockInEmployee: async (companyDomain: string, employeeId: string, timeTrackingClockInEmployeeRequest?: TimeTrackingClockInEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clockInEmployee', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('clockInEmployee', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_in/{employeeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingClockInEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_in/{employeeId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingClockInEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clock out (employee id optional)
         * @summary Clock out (employee id optional)
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId {employeeId} is id of the employee clocking out
         * @param {TimeTrackingClockOutEmployeeRequest} [timeTrackingClockOutEmployeeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockOutEmployee: async (companyDomain: string, employeeId: string, timeTrackingClockOutEmployeeRequest?: TimeTrackingClockOutEmployeeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clockOutEmployee', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('clockOutEmployee', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_out/{employeeId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingClockOutEmployeeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_out/{employeeId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingClockOutEmployeeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Clock out an employee at a specific time
         * @summary Clock out an employee at a specific time
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to whom the projects belong.
         * @param {TimeTrackingClockOutEmployeeAtSpecificTimeRequest} [timeTrackingClockOutEmployeeAtSpecificTimeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockOutEmployeeAtSpecificTime: async (companyDomain: string, employeeId: string, timeTrackingClockOutEmployeeAtSpecificTimeRequest?: TimeTrackingClockOutEmployeeAtSpecificTimeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clockOutEmployeeAtSpecificTime', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('clockOutEmployeeAtSpecificTime', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_out/datetime`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingClockOutEmployeeAtSpecificTimeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_out/datetime',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingClockOutEmployeeAtSpecificTimeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete clock entries
         * @summary Delete clock entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingDeleteClockEntriesRequest} timeTrackingDeleteClockEntriesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockEntries: async (companyDomain: string, timeTrackingDeleteClockEntriesRequest: TimeTrackingDeleteClockEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteClockEntries', 'companyDomain', companyDomain)
            // verify required parameter 'timeTrackingDeleteClockEntriesRequest' is not null or undefined
            assertParamExists('deleteClockEntries', 'timeTrackingDeleteClockEntriesRequest', timeTrackingDeleteClockEntriesRequest)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_entries`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingDeleteClockEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_entries',
                httpMethod: 'DELETE'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingDeleteClockEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Edit information on the currently clocked in entry
         * @summary Edit information on the currently clocked in entry
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to whom the projects belong.
         * @param {TimeTrackingEditClockedInEntryDataRequest} [timeTrackingEditClockedInEntryDataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editClockedInEntryData: async (companyDomain: string, employeeId: string, timeTrackingEditClockedInEntryDataRequest?: TimeTrackingEditClockedInEntryDataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('editClockedInEntryData', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('editClockedInEntryData', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_in/data`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingEditClockedInEntryDataRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_in/data',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingEditClockedInEntryDataRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Is employee clocked in?
         * @summary Is employee clocked in?
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of employee to whom the clock entry belongs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeClockedIn: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('employeeClockedIn', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('employeeClockedIn', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/is_clocked_in`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/is_clocked_in',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a timesheet for an employee
         * @summary Get a timesheet for an employee
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of employee to whom the timesheet belongs.
         * @param {string} timesheetId timesheetId is the id to whom the timesheet belongs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeTimesheetGet: async (companyDomain: string, employeeId: string, timesheetId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('employeeTimesheetGet', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('employeeTimesheetGet', 'employeeId', employeeId)
            // verify required parameter 'timesheetId' is not null or undefined
            assertParamExists('employeeTimesheetGet', 'timesheetId', timesheetId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/timesheet/{timesheetId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"timesheetId"}}`, encodeURIComponent(String(timesheetId !== undefined ? timesheetId : `-timesheetId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/timesheet/{timesheetId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a clock entry
         * @summary Get a clock entry
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of employee to whom the clock entry belongs.
         * @param {string} id the id to whom the clock entry belongs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockEntry: async (companyDomain: string, employeeId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getClockEntry', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getClockEntry', 'employeeId', employeeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClockEntry', 'id', id)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_entries/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/clock_entries/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a daily entry
         * @summary Get a daily entry
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of employee to whom the daily entry belongs.
         * @param {string} id the id to whom the daily entry belongs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyEntry: async (companyDomain: string, employeeId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDailyEntry', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getDailyEntry', 'employeeId', employeeId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDailyEntry', 'id', id)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/daily_entries/{id}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/daily_entries/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get tasks for a project
         * @summary Get tasks for a project
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to whom the projects belong.
         * @param {string} projectId id of the project to which the tasks belong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTasks: async (companyDomain: string, employeeId: string, projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getProjectTasks', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('getProjectTasks', 'employeeId', employeeId)
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectTasks', 'projectId', projectId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects/{projectId}/tasks`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)))
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId !== undefined ? projectId : `-projectId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects/{projectId}/tasks',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get timesheets by ids
         * @summary Get timesheets by ids
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingGetTimesheetsByIdsRequest} timeTrackingGetTimesheetsByIdsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimesheetsByIds: async (companyDomain: string, timeTrackingGetTimesheetsByIdsRequest: TimeTrackingGetTimesheetsByIdsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getTimesheetsByIds', 'companyDomain', companyDomain)
            // verify required parameter 'timeTrackingGetTimesheetsByIdsRequest' is not null or undefined
            assertParamExists('getTimesheetsByIds', 'timeTrackingGetTimesheetsByIdsRequest', timeTrackingGetTimesheetsByIdsRequest)
            const localVarPath = `/{companyDomain}/v1/time_tracking/timesheets`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingGetTimesheetsByIdsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/timesheets',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingGetTimesheetsByIdsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get projects an employee can log time to
         * @summary Get projects an employee can log time to
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {string} employeeId id of the employee to whom the projects belong.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeProjects: async (companyDomain: string, employeeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listEmployeeProjects', 'companyDomain', companyDomain)
            // verify required parameter 'employeeId' is not null or undefined
            assertParamExists('listEmployeeProjects', 'employeeId', employeeId)
            const localVarPath = `/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"employeeId"}}`, encodeURIComponent(String(employeeId !== undefined ? employeeId : `-employeeId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/employee/{employeeId}/projects',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store clock entries
         * @summary Store clock entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingStoreClockEntriesRequest} [timeTrackingStoreClockEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeClockEntries: async (companyDomain: string, timeTrackingStoreClockEntriesRequest?: TimeTrackingStoreClockEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('storeClockEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/clock_entries`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingStoreClockEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/clock_entries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingStoreClockEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Store daily entries
         * @summary Store daily entries
         * @param {string} companyDomain The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \&quot;mycompany\&quot;
         * @param {TimeTrackingStoreDailyEntriesRequest} [timeTrackingStoreDailyEntriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeDailyEntries: async (companyDomain: string, timeTrackingStoreDailyEntriesRequest?: TimeTrackingStoreDailyEntriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('storeDailyEntries', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/v1/time_tracking/daily_entries`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)
            // authentication basic required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: timeTrackingStoreDailyEntriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/v1/time_tracking/daily_entries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(timeTrackingStoreDailyEntriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeTrackingApi - functional programming interface
 * @export
 */
export const TimeTrackingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeTrackingApiAxiosParamCreator(configuration)
    return {
        /**
         * Approve employee timesheets
         * @summary Approve employee timesheets
         * @param {TimeTrackingApiApproveEmployeeTimesheetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveEmployeeTimesheets(requestParameters: TimeTrackingApiApproveEmployeeTimesheetsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingApproveEmployeeTimesheetsRequest: TimeTrackingApproveEmployeeTimesheetsRequest = {
                lastChanged: requestParameters.lastChanged,
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveEmployeeTimesheets(requestParameters.companyDomain, timeTrackingApproveEmployeeTimesheetsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Approve timesheets for employees that are currently clocked in
         * @summary Approve timesheets for employees that are currently clocked in
         * @param {TimeTrackingApiApproveEmployeeTimesheets0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveEmployeeTimesheets_1(requestParameters: TimeTrackingApiApproveEmployeeTimesheets0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingApproveEmployeeTimesheetsRequest1: TimeTrackingApproveEmployeeTimesheetsRequest1 = {
                clockOuts: requestParameters.clockOuts
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveEmployeeTimesheets_1(requestParameters.companyDomain, timeTrackingApproveEmployeeTimesheetsRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clock in (employee id optional)
         * @summary Clock in (employee id optional)
         * @param {TimeTrackingApiClockInEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clockInEmployee(requestParameters: TimeTrackingApiClockInEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingClockInEmployeeRequest: TimeTrackingClockInEmployeeRequest = {
                start: requestParameters.start,
                timezone: requestParameters.timezone,
                note: requestParameters.note,
                projectId: requestParameters.projectId,
                taskId: requestParameters.taskId,
                clockInLocation: requestParameters.clockInLocation
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.clockInEmployee(requestParameters.companyDomain, requestParameters.employeeId, timeTrackingClockInEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clock out (employee id optional)
         * @summary Clock out (employee id optional)
         * @param {TimeTrackingApiClockOutEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clockOutEmployee(requestParameters: TimeTrackingApiClockOutEmployeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingClockOutEmployeeRequest: TimeTrackingClockOutEmployeeRequest = {
                clockOutLocation: requestParameters.clockOutLocation
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.clockOutEmployee(requestParameters.companyDomain, requestParameters.employeeId, timeTrackingClockOutEmployeeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Clock out an employee at a specific time
         * @summary Clock out an employee at a specific time
         * @param {TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clockOutEmployeeAtSpecificTime(requestParameters: TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingClockOutEmployeeAtSpecificTimeRequest: TimeTrackingClockOutEmployeeAtSpecificTimeRequest = {
                datetime: requestParameters.requestBody.datetime,
                timezone: requestParameters.requestBody.timezone,
                employeeId: requestParameters.requestBody.employeeId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.clockOutEmployeeAtSpecificTime(requestParameters.companyDomain, requestParameters.employeeId, timeTrackingClockOutEmployeeAtSpecificTimeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete clock entries
         * @summary Delete clock entries
         * @param {TimeTrackingApiDeleteClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClockEntries(requestParameters: TimeTrackingApiDeleteClockEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingDeleteClockEntriesRequest: TimeTrackingDeleteClockEntriesRequest = {
                clockEntryIds: requestParameters.clockEntryIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClockEntries(requestParameters.companyDomain, timeTrackingDeleteClockEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Edit information on the currently clocked in entry
         * @summary Edit information on the currently clocked in entry
         * @param {TimeTrackingApiEditClockedInEntryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editClockedInEntryData(requestParameters: TimeTrackingApiEditClockedInEntryDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingEditClockedInEntryDataRequest: TimeTrackingEditClockedInEntryDataRequest = {
                start: requestParameters.start,
                timezone: requestParameters.timezone,
                note: requestParameters.note,
                projectId: requestParameters.projectId,
                taskId: requestParameters.taskId,
                clockInLocation: requestParameters.clockInLocation,
                clockOutLocation: requestParameters.clockOutLocation
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.editClockedInEntryData(requestParameters.companyDomain, requestParameters.employeeId, timeTrackingEditClockedInEntryDataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Is employee clocked in?
         * @summary Is employee clocked in?
         * @param {TimeTrackingApiEmployeeClockedInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeClockedIn(requestParameters: TimeTrackingApiEmployeeClockedInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeClockedIn(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a timesheet for an employee
         * @summary Get a timesheet for an employee
         * @param {TimeTrackingApiEmployeeTimesheetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employeeTimesheetGet(requestParameters: TimeTrackingApiEmployeeTimesheetGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employeeTimesheetGet(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.timesheetId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a clock entry
         * @summary Get a clock entry
         * @param {TimeTrackingApiGetClockEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClockEntry(requestParameters: TimeTrackingApiGetClockEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClockEntry(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a daily entry
         * @summary Get a daily entry
         * @param {TimeTrackingApiGetDailyEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDailyEntry(requestParameters: TimeTrackingApiGetDailyEntryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDailyEntry(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get tasks for a project
         * @summary Get tasks for a project
         * @param {TimeTrackingApiGetProjectTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectTasks(requestParameters: TimeTrackingApiGetProjectTasksRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectTasks(requestParameters.companyDomain, requestParameters.employeeId, requestParameters.projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get timesheets by ids
         * @summary Get timesheets by ids
         * @param {TimeTrackingApiGetTimesheetsByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimesheetsByIds(requestParameters: TimeTrackingApiGetTimesheetsByIdsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingGetTimesheetsByIdsRequest: TimeTrackingGetTimesheetsByIdsRequest = {
                timesheets: requestParameters.timesheets
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimesheetsByIds(requestParameters.companyDomain, timeTrackingGetTimesheetsByIdsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get projects an employee can log time to
         * @summary Get projects an employee can log time to
         * @param {TimeTrackingApiListEmployeeProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmployeeProjects(requestParameters: TimeTrackingApiListEmployeeProjectsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmployeeProjects(requestParameters.companyDomain, requestParameters.employeeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Store clock entries
         * @summary Store clock entries
         * @param {TimeTrackingApiStoreClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeClockEntries(requestParameters: TimeTrackingApiStoreClockEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingStoreClockEntriesRequest: TimeTrackingStoreClockEntriesRequest = {
                entries: requestParameters.entries
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeClockEntries(requestParameters.companyDomain, timeTrackingStoreClockEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Store daily entries
         * @summary Store daily entries
         * @param {TimeTrackingApiStoreDailyEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storeDailyEntries(requestParameters: TimeTrackingApiStoreDailyEntriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const timeTrackingStoreDailyEntriesRequest: TimeTrackingStoreDailyEntriesRequest = {
                entries: requestParameters.entries
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.storeDailyEntries(requestParameters.companyDomain, timeTrackingStoreDailyEntriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimeTrackingApi - factory interface
 * @export
 */
export const TimeTrackingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeTrackingApiFp(configuration)
    return {
        /**
         * Approve employee timesheets
         * @summary Approve employee timesheets
         * @param {TimeTrackingApiApproveEmployeeTimesheetsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEmployeeTimesheets(requestParameters: TimeTrackingApiApproveEmployeeTimesheetsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveEmployeeTimesheets(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Approve timesheets for employees that are currently clocked in
         * @summary Approve timesheets for employees that are currently clocked in
         * @param {TimeTrackingApiApproveEmployeeTimesheets0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveEmployeeTimesheets_1(requestParameters: TimeTrackingApiApproveEmployeeTimesheets0Request, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveEmployeeTimesheets_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clock in (employee id optional)
         * @summary Clock in (employee id optional)
         * @param {TimeTrackingApiClockInEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockInEmployee(requestParameters: TimeTrackingApiClockInEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clockInEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clock out (employee id optional)
         * @summary Clock out (employee id optional)
         * @param {TimeTrackingApiClockOutEmployeeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockOutEmployee(requestParameters: TimeTrackingApiClockOutEmployeeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clockOutEmployee(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Clock out an employee at a specific time
         * @summary Clock out an employee at a specific time
         * @param {TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clockOutEmployeeAtSpecificTime(requestParameters: TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.clockOutEmployeeAtSpecificTime(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete clock entries
         * @summary Delete clock entries
         * @param {TimeTrackingApiDeleteClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClockEntries(requestParameters: TimeTrackingApiDeleteClockEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteClockEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Edit information on the currently clocked in entry
         * @summary Edit information on the currently clocked in entry
         * @param {TimeTrackingApiEditClockedInEntryDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editClockedInEntryData(requestParameters: TimeTrackingApiEditClockedInEntryDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editClockedInEntryData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Is employee clocked in?
         * @summary Is employee clocked in?
         * @param {TimeTrackingApiEmployeeClockedInRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeClockedIn(requestParameters: TimeTrackingApiEmployeeClockedInRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employeeClockedIn(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a timesheet for an employee
         * @summary Get a timesheet for an employee
         * @param {TimeTrackingApiEmployeeTimesheetGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employeeTimesheetGet(requestParameters: TimeTrackingApiEmployeeTimesheetGetRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.employeeTimesheetGet(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a clock entry
         * @summary Get a clock entry
         * @param {TimeTrackingApiGetClockEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClockEntry(requestParameters: TimeTrackingApiGetClockEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getClockEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a daily entry
         * @summary Get a daily entry
         * @param {TimeTrackingApiGetDailyEntryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDailyEntry(requestParameters: TimeTrackingApiGetDailyEntryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDailyEntry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get tasks for a project
         * @summary Get tasks for a project
         * @param {TimeTrackingApiGetProjectTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectTasks(requestParameters: TimeTrackingApiGetProjectTasksRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getProjectTasks(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get timesheets by ids
         * @summary Get timesheets by ids
         * @param {TimeTrackingApiGetTimesheetsByIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimesheetsByIds(requestParameters: TimeTrackingApiGetTimesheetsByIdsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getTimesheetsByIds(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get projects an employee can log time to
         * @summary Get projects an employee can log time to
         * @param {TimeTrackingApiListEmployeeProjectsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmployeeProjects(requestParameters: TimeTrackingApiListEmployeeProjectsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listEmployeeProjects(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Store clock entries
         * @summary Store clock entries
         * @param {TimeTrackingApiStoreClockEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeClockEntries(requestParameters: TimeTrackingApiStoreClockEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeClockEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Store daily entries
         * @summary Store daily entries
         * @param {TimeTrackingApiStoreDailyEntriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storeDailyEntries(requestParameters: TimeTrackingApiStoreDailyEntriesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.storeDailyEntries(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveEmployeeTimesheets operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiApproveEmployeeTimesheetsRequest
 */
export type TimeTrackingApiApproveEmployeeTimesheetsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiApproveEmployeeTimesheets
    */
    readonly companyDomain: string
    
} & TimeTrackingApproveEmployeeTimesheetsRequest

/**
 * Request parameters for approveEmployeeTimesheets_1 operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiApproveEmployeeTimesheets0Request
 */
export type TimeTrackingApiApproveEmployeeTimesheets0Request = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiApproveEmployeeTimesheets0
    */
    readonly companyDomain: string
    
} & TimeTrackingApproveEmployeeTimesheetsRequest1

/**
 * Request parameters for clockInEmployee operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiClockInEmployeeRequest
 */
export type TimeTrackingApiClockInEmployeeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiClockInEmployee
    */
    readonly companyDomain: string
    
    /**
    * {employeeId} is id of the employee clocking out
    * @type {string}
    * @memberof TimeTrackingApiClockInEmployee
    */
    readonly employeeId: string
    
} & TimeTrackingClockInEmployeeRequest

/**
 * Request parameters for clockOutEmployee operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiClockOutEmployeeRequest
 */
export type TimeTrackingApiClockOutEmployeeRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiClockOutEmployee
    */
    readonly companyDomain: string
    
    /**
    * {employeeId} is id of the employee clocking out
    * @type {string}
    * @memberof TimeTrackingApiClockOutEmployee
    */
    readonly employeeId: string
    
} & TimeTrackingClockOutEmployeeRequest

/**
 * Request parameters for clockOutEmployeeAtSpecificTime operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest
 */
export type TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest = {
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiClockOutEmployeeAtSpecificTime
    */
    readonly companyDomain: string
    /**
    * id of the employee to whom the projects belong.
    * @type {string}
    * @memberof TimeTrackingApiClockOutEmployeeAtSpecificTime
    */
    readonly employeeId: string
    /**
    * 
    * @type {TimeTrackingClockOutEmployeeAtSpecificTimeRequest}
    * @memberof TimeTrackingApiClockOutEmployeeAtSpecificTime
    */
    readonly requestBody?: TimeTrackingClockOutEmployeeAtSpecificTimeRequest
}

/**
 * Request parameters for deleteClockEntries operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiDeleteClockEntriesRequest
 */
export type TimeTrackingApiDeleteClockEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiDeleteClockEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingDeleteClockEntriesRequest

/**
 * Request parameters for editClockedInEntryData operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiEditClockedInEntryDataRequest
 */
export type TimeTrackingApiEditClockedInEntryDataRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiEditClockedInEntryData
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to whom the projects belong.
    * @type {string}
    * @memberof TimeTrackingApiEditClockedInEntryData
    */
    readonly employeeId: string
    
} & TimeTrackingEditClockedInEntryDataRequest

/**
 * Request parameters for employeeClockedIn operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiEmployeeClockedInRequest
 */
export type TimeTrackingApiEmployeeClockedInRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiEmployeeClockedIn
    */
    readonly companyDomain: string
    
    /**
    * id of employee to whom the clock entry belongs.
    * @type {string}
    * @memberof TimeTrackingApiEmployeeClockedIn
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for employeeTimesheetGet operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiEmployeeTimesheetGetRequest
 */
export type TimeTrackingApiEmployeeTimesheetGetRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiEmployeeTimesheetGet
    */
    readonly companyDomain: string
    
    /**
    * id of employee to whom the timesheet belongs.
    * @type {string}
    * @memberof TimeTrackingApiEmployeeTimesheetGet
    */
    readonly employeeId: string
    
    /**
    * timesheetId is the id to whom the timesheet belongs.
    * @type {string}
    * @memberof TimeTrackingApiEmployeeTimesheetGet
    */
    readonly timesheetId: string
    
}

/**
 * Request parameters for getClockEntry operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiGetClockEntryRequest
 */
export type TimeTrackingApiGetClockEntryRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiGetClockEntry
    */
    readonly companyDomain: string
    
    /**
    * id of employee to whom the clock entry belongs.
    * @type {string}
    * @memberof TimeTrackingApiGetClockEntry
    */
    readonly employeeId: string
    
    /**
    * the id to whom the clock entry belongs.
    * @type {string}
    * @memberof TimeTrackingApiGetClockEntry
    */
    readonly id: string
    
}

/**
 * Request parameters for getDailyEntry operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiGetDailyEntryRequest
 */
export type TimeTrackingApiGetDailyEntryRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiGetDailyEntry
    */
    readonly companyDomain: string
    
    /**
    * id of employee to whom the daily entry belongs.
    * @type {string}
    * @memberof TimeTrackingApiGetDailyEntry
    */
    readonly employeeId: string
    
    /**
    * the id to whom the daily entry belongs.
    * @type {string}
    * @memberof TimeTrackingApiGetDailyEntry
    */
    readonly id: string
    
}

/**
 * Request parameters for getProjectTasks operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiGetProjectTasksRequest
 */
export type TimeTrackingApiGetProjectTasksRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiGetProjectTasks
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to whom the projects belong.
    * @type {string}
    * @memberof TimeTrackingApiGetProjectTasks
    */
    readonly employeeId: string
    
    /**
    * id of the project to which the tasks belong.
    * @type {string}
    * @memberof TimeTrackingApiGetProjectTasks
    */
    readonly projectId: string
    
}

/**
 * Request parameters for getTimesheetsByIds operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiGetTimesheetsByIdsRequest
 */
export type TimeTrackingApiGetTimesheetsByIdsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiGetTimesheetsByIds
    */
    readonly companyDomain: string
    
} & TimeTrackingGetTimesheetsByIdsRequest

/**
 * Request parameters for listEmployeeProjects operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiListEmployeeProjectsRequest
 */
export type TimeTrackingApiListEmployeeProjectsRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiListEmployeeProjects
    */
    readonly companyDomain: string
    
    /**
    * id of the employee to whom the projects belong.
    * @type {string}
    * @memberof TimeTrackingApiListEmployeeProjects
    */
    readonly employeeId: string
    
}

/**
 * Request parameters for storeClockEntries operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiStoreClockEntriesRequest
 */
export type TimeTrackingApiStoreClockEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiStoreClockEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingStoreClockEntriesRequest

/**
 * Request parameters for storeDailyEntries operation in TimeTrackingApi.
 * @export
 * @interface TimeTrackingApiStoreDailyEntriesRequest
 */
export type TimeTrackingApiStoreDailyEntriesRequest = {
    
    /**
    * The subdomain used to access BambooHR. If you access BambooHR at https://mycompany.bamboohr.com, then the companyDomain is \"mycompany\"
    * @type {string}
    * @memberof TimeTrackingApiStoreDailyEntries
    */
    readonly companyDomain: string
    
} & TimeTrackingStoreDailyEntriesRequest

/**
 * TimeTrackingApiGenerated - object-oriented interface
 * @export
 * @class TimeTrackingApiGenerated
 * @extends {BaseAPI}
 */
export class TimeTrackingApiGenerated extends BaseAPI {
    /**
     * Approve employee timesheets
     * @summary Approve employee timesheets
     * @param {TimeTrackingApiApproveEmployeeTimesheetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public approveEmployeeTimesheets(requestParameters: TimeTrackingApiApproveEmployeeTimesheetsRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).approveEmployeeTimesheets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Approve timesheets for employees that are currently clocked in
     * @summary Approve timesheets for employees that are currently clocked in
     * @param {TimeTrackingApiApproveEmployeeTimesheets0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public approveEmployeeTimesheets_1(requestParameters: TimeTrackingApiApproveEmployeeTimesheets0Request, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).approveEmployeeTimesheets_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clock in (employee id optional)
     * @summary Clock in (employee id optional)
     * @param {TimeTrackingApiClockInEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public clockInEmployee(requestParameters: TimeTrackingApiClockInEmployeeRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).clockInEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clock out (employee id optional)
     * @summary Clock out (employee id optional)
     * @param {TimeTrackingApiClockOutEmployeeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public clockOutEmployee(requestParameters: TimeTrackingApiClockOutEmployeeRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).clockOutEmployee(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Clock out an employee at a specific time
     * @summary Clock out an employee at a specific time
     * @param {TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public clockOutEmployeeAtSpecificTime(requestParameters: TimeTrackingApiClockOutEmployeeAtSpecificTimeRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).clockOutEmployeeAtSpecificTime(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete clock entries
     * @summary Delete clock entries
     * @param {TimeTrackingApiDeleteClockEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public deleteClockEntries(requestParameters: TimeTrackingApiDeleteClockEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).deleteClockEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Edit information on the currently clocked in entry
     * @summary Edit information on the currently clocked in entry
     * @param {TimeTrackingApiEditClockedInEntryDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public editClockedInEntryData(requestParameters: TimeTrackingApiEditClockedInEntryDataRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).editClockedInEntryData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Is employee clocked in?
     * @summary Is employee clocked in?
     * @param {TimeTrackingApiEmployeeClockedInRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public employeeClockedIn(requestParameters: TimeTrackingApiEmployeeClockedInRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).employeeClockedIn(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a timesheet for an employee
     * @summary Get a timesheet for an employee
     * @param {TimeTrackingApiEmployeeTimesheetGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public employeeTimesheetGet(requestParameters: TimeTrackingApiEmployeeTimesheetGetRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).employeeTimesheetGet(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a clock entry
     * @summary Get a clock entry
     * @param {TimeTrackingApiGetClockEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public getClockEntry(requestParameters: TimeTrackingApiGetClockEntryRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).getClockEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a daily entry
     * @summary Get a daily entry
     * @param {TimeTrackingApiGetDailyEntryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public getDailyEntry(requestParameters: TimeTrackingApiGetDailyEntryRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).getDailyEntry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get tasks for a project
     * @summary Get tasks for a project
     * @param {TimeTrackingApiGetProjectTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public getProjectTasks(requestParameters: TimeTrackingApiGetProjectTasksRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).getProjectTasks(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get timesheets by ids
     * @summary Get timesheets by ids
     * @param {TimeTrackingApiGetTimesheetsByIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public getTimesheetsByIds(requestParameters: TimeTrackingApiGetTimesheetsByIdsRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).getTimesheetsByIds(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get projects an employee can log time to
     * @summary Get projects an employee can log time to
     * @param {TimeTrackingApiListEmployeeProjectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public listEmployeeProjects(requestParameters: TimeTrackingApiListEmployeeProjectsRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).listEmployeeProjects(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Store clock entries
     * @summary Store clock entries
     * @param {TimeTrackingApiStoreClockEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public storeClockEntries(requestParameters: TimeTrackingApiStoreClockEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).storeClockEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Store daily entries
     * @summary Store daily entries
     * @param {TimeTrackingApiStoreDailyEntriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeTrackingApiGenerated
     */
    public storeDailyEntries(requestParameters: TimeTrackingApiStoreDailyEntriesRequest, options?: AxiosRequestConfig) {
        return TimeTrackingApiFp(this.configuration).storeDailyEntries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
